/**
 * @description Onsight Engine
 * @about       Powerful, easy-to-use JavaScript video game and application creation engine.
 * @author      Stephens Nunnally <@stevinz>
 * @version     v0.0.3
 * @license     MIT - Copyright (c) 2021-2022 Stephens Nunnally and Scidian Software
 * @source      https://github.com/onsightengine/onsight
 */
import*as e from"three";import{mergeBufferGeometries as t}from"three/addons/utils/BufferGeometryUtils.js";import{SVGLoader as r}from"three/addons/loaders/SVGLoader.js";import{Line2 as i}from"three/addons/lines/Line2.js";import{LineGeometry as s}from"three/addons/lines/LineGeometry.js";import{LineMaterial as a}from"three/addons/lines/LineMaterial.js";import{LineSegmentsGeometry as n}from"three/addons/lines/LineSegmentsGeometry.js";import{Wireframe as o}from"three/addons/lines/Wireframe.js";import{WireframeGeometry2 as l}from"three/addons/lines/WireframeGeometry2.js";import{CopyShader as h}from"three/addons/shaders/CopyShader.js";import{Pass as c,FullScreenQuad as d}from"three/addons/postprocessing/Pass.js";import{ShaderPass as u}from"three/addons/postprocessing/ShaderPass.js";import{RoundedBoxGeometry as p}from"three/addons/geometries/RoundedBoxGeometry.js";import{LoopSubdivision as m}from"three-subdivide";const f="Onsight",y="0.0.3",g="THREE",b={Entity3D:"Entity3D"},v={Scene3D:"Scene3D"},w={World3D:"World3D"},x={LOCKED:"flagLocked",TEMP:"flagTemp"},S={PLAYING:"playing",PAUSED:"paused",STOPPED:"stopped"},M=.01,k=5,C=0,T=new e.Raycaster;class B{static createOrthographic(t,r,i="none",s=0){const a=new e.OrthographicCamera(0,1,1,0,-1e3,1e3);return a.desiredSize=s,a.fitType=i,a.position.set(0,0,5),a.lookAt(0,0,0),B.updateOrthographic(a,t,r),a}static createPerspective(t,r,i=!0){const s=new e.PerspectiveCamera(58.1,1,.01,1e3);return s.tanFOV=Math.tan(Math.PI/180*s.fov/2),s.windowHeight=i?1e3:0,s.fixedSize=i,s.position.set(0,0,5),s.lookAt(0,0,0),B.updatePerspective(s,t,r),s}static updateCamera(e,t,r){e.isPerspectiveCamera&&B.updatePerspective(e,t,r),e.isOrthographicCamera&&B.updateOrthographic(e,t,r)}static updatePerspective(e,t,r){e.fixedSize&&(e.fov=360/Math.PI*Math.atan(e.tanFOV*(r/e.windowHeight))),e.aspect=t/r,e.updateProjectionMatrix()}static updateOrthographic(e,t,r){let i=e.fitType,s=0;e.desiredSize?s=e.desiredSize:i="none";let a=1,n=1,o=s,l=s;"none"===i?(o=.01*t*.5,l=.01*r*.5):"width"===i?n=r/t:"height"===i&&(a=t/r),e.left=-o/a/2,e.right=o/a/2,e.top=l*n/2,e.bottom=-l*n/2,e.updateProjectionMatrix()}static screenPoint(t,r){return r&&r.isCamera?new e.Vector3.copy(t).project(r):(console.warn("CameraUtils.screenPoint: No camera provided!"),new e.Vector3)}static worldPoint(t,r,i=new e.Vector3,s="xy"){if(!r||!r.isCamera)return console.warn("CameraUtils.worldPoint: No camera provided!"),new e.Vector3;const a=new e.PlaneGeometry(1e8,1e8,2,2);switch(s.toLowerCase()){case"yz":a.rotateY(Math.PI/2);break;case"xz":a.rotateX(Math.PI/2)}a.translate(i.x,i.y,i.z);const n=new e.MeshBasicMaterial({side:e.DoubleSide}),o=new e.Mesh(a,n);T.setFromCamera(t,r),r.isOrthographicCamera&&T.ray.origin.set(t.x,t.y,-r.far).unproject(r);const l=T.intersectObject(o,!0);return a.dispose(),n.dispose(),l.length>0&&l[0].point}static distanceToFitObject(e,t,r=1.25){}static fitCameraToObject(t,r,i=null,s=1.25){const a=new e.Box3;a.setFromObject(r);const n=a.getCenter(new e.Vector3),o=a.getSize(new e.Vector3),l=o.z/(2*Math.atan(Math.PI*t.fov/360)),h=Math.max(l,o.y/(2*Math.atan(Math.PI*t.fov/360))),c=o.x/(2.5*Math.atan(Math.PI*t.fov/360))/t.aspect,d=s*Math.max(h,c);t.near=d/100,t.far=100*d,t.updateProjectionMatrix(),t.position.copy(n),t.position.z+=d,t.lookAt(n),i&&(i.maxDistance=10*d,i.target.copy(n),i.update())}}class z{static radiansToDegrees(e){return e*(180/Math.PI)}static degreesToRadians(e){return Math.PI/180*e}static fuzzyFloat(e,t,r=.001){return e<t+r&&e>t-r}static fuzzyVector(e,t,r=.001){return!1!==z.fuzzyFloat(e.x,t.x,r)&&(!1!==z.fuzzyFloat(e.y,t.y,r)&&!1!==z.fuzzyFloat(e.z,t.z,r))}static fuzzyQuaternion(e,t,r=.001){return!1!==z.fuzzyVector(e,t,r)&&!1!==z.fuzzyFloat(e.w,t.w,r)}static clamp(e,t,r){return(e=Number(e))<t&&(e=t),e>r&&(e=r),e}static damp(e,t,r,i){return z.lerp(e,t,1-Math.exp(-r*i))}static lerp(e,t,r){return(1-r)*e+r*t}static roundTo(e,t=0){const r=Math.pow(10,t);return Math.round(e*r)/r}static isPowerOfTwo(e){return 0==(e&e-1)&&0!==e}static addCommas(e){return e.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,")}static countDecimals(e){return Math.floor(e.valueOf())===e.valueOf()?0:e.toString().split(".")[1].length||0}static isNumber(e){return"number"==typeof e&&!Number.isNaN(e)&&Number.isFinite(e)}static lineCollision(e,t,r,i,s,a,n,o){let l=(o-a)*(r-e)-(n-s)*(i-t);if(z.fuzzyFloat(l,0,1e-7))return!1;let h=((n-s)*(t-a)-(o-a)*(e-s))/l,c=((r-e)*(t-a)-(i-t)*(e-s))/l;return h>=0&&h<=1&&c>=0&&c<=1}static lineRectCollision(e,t,r,i,s,a,n,o){const l=z.lineCollision(e,t,r,i,s,a,s,o),h=z.lineCollision(e,t,r,i,n,a,n,o),c=z.lineCollision(e,t,r,i,s,a,n,a),d=z.lineCollision(e,t,r,i,s,o,n,o);return l||h||c||d}static randomFloat(e,t){return e+Math.random()*(t-e)}static randomInt(e=0,t=1){return e+Math.floor(Math.random()*(t-e))}}class P{static arrayFromArguments(){return 1===arguments.length&&Array.isArray(arguments[0])?arguments[0]:Array.from(arguments)}static isIterable(e){return null!=e&&"function"==typeof e[Symbol.iterator]}static isObject(e){return"object"==typeof e&&!Array.isArray(e)&&null!==e}static save(e,t){try{const r=document.createElement("a");document.body.appendChild(r),r.href=e,r.download=t||"data.json",r.click(),setTimeout((function(){document.body.removeChild(r),window.URL.revokeObjectURL(e)}),0)}catch(e){return void console.warn(e)}}static saveBuffer(e,t,r={type:"application/octet-stream"}){let i=URL.createObjectURL(new Blob([e],{type:r}));P.save(i,t)}static saveImage(e,t){P.save(e,t)}static saveString(e,t){let r=URL.createObjectURL(new Blob([e],{type:"text/plain"}));P.save(r,t)}static detectOS(){let e={Android:["android"],iOS:["iphone","ipad","ipod","ios"],Linux:["linux","x11","wayland"],Mac:["mac","darwin","osx","os x"],Win:["win"]},t=window.navigator.userAgent,r=window.navigator.userAgentData,i=r?r.platform:t;i=i.toLowerCase();for(let t in e)for(let r of e[t])if(-1!==i.indexOf(r))return t;return"Unknown OS"}static fullscreen(e){if(document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement){let e=document;(e.cancelFullScreen||e.exitFullscreen||e.webkitCancelFullScreen||e.webkitExitFullscreen||e.mozCancelFullScreen).call(e)}else{let t=e??document.body;(t.requestFullScreen||t.webkitRequestFullScreen||t.mozRequestFullScreen||t.msRequestFullScreen).call(t)}}static metaKeyOS(){return"Mac"===P.detectOS()?"⌘":"⌃"}static sleep(e){const t=Date.now();let r=t;for(;r-t<e;)r=Date.now()}static waitForObject(e,t,r,i=1e3,s=!1,a=5e3){let n=Date.now(),o=Date.now();!function l(){a&&Date.now()-o>a&&(console.info(`Still waiting on operation: ${e}`),o=Date.now()),void 0===t()||null===t()?setTimeout((function(){s&&Date.now()-n>s||l()}),i):r()}()}}const O=new e.Box3,D=new e.Matrix4,E=new e.Vector3,A=new e.Quaternion,j=new e.Quaternion,R=new e.Quaternion,F=new e.Vector3,V=new e.Quaternion,_=(new e.Euler,new e.Vector3);class G{static allowSelection(e){let t=!0;return e.userData&&(e.userData.flagLocked&&(t=!1),e.userData.flagTemp&&(t=!1)),t}static checkTransforms(e){if(e.length<=1)return!0;e[0].getWorldQuaternion(A);for(let t=1;t<e.length;t++)if(e[t].getWorldQuaternion(R),!1===z.fuzzyQuaternion(A,R))return!1;return!0}static clearObject(e,t=!0){if(e){for(;e.children.length>0;)G.clearObject(e.children[0],!0);e.geometry&&e.geometry.dispose(),e.material&&G.clearMaterial(e.material),G.resetTransform(e),t&&e.removeFromParent()}}static clearMaterial(e){!0!==P.isIterable(e)&&(e=[e]);for(let t=0,r=e.length;t<r;t++){let r=e[t];Object.keys(r).forEach((e=>{r[e]&&"function"==typeof r[e].dispose&&r[e].dispose()})),r.dispose()}}static computeBounds(t,r,i=!1){void 0!==r&&!0===r.isBox3||(r=new e.Box3);const s=P.isIterable(t)?t:[t];if(r.makeEmpty(),i&&1===G.countGeometry(t)){let e;if(s.forEach((t=>{t.traverse((t=>{t.geometry&&(e=t)}))})),e&&e.geometry)return e.geometry.computeBoundingBox(),r.copy(e.geometry.boundingBox),e.matrixWorld.decompose(F,V,_),V.identity(),D.compose(F,V,_),r.applyMatrix4(D),r}return s.forEach((e=>r.expandByObject(e))),r}static computeCenter(e,t){const r=P.isIterable(e)?e:[e];if(G.computeBounds(r,O),O.isEmpty())for(let e of r)e.getWorldPosition(E),O.expandByPoint(E);return O.getCenter(t),t}static containsObject(e,t){if(t&&t.uuid&&P.isIterable(e))for(let r=0;r<e.length;r++)if(e[r].uuid===t.uuid)return!0;return!1}static copyLocalTransform(e,t,r=!0){e.updateMatrix(),e.matrix.decompose(t.position,j,t.scale),t.rotation.setFromQuaternion(j,void 0,!1),r&&t.updateMatrix()}static copyWorldTransform(e,t,r=!0){e.updateWorldMatrix(!0,!0),e.matrixWorld.decompose(t.position,j,t.scale),t.rotation.setFromQuaternion(j,void 0,!1),r&&t.updateMatrix()}static countGeometry(e){const t=P.isIterable(e)?e:[e];let r=0;return t.forEach((e=>{e.traverse((e=>{e.geometry&&r++}))})),r}static flattenGroup(e){if(e&&e.parent){for(;e.children;)e.parent.attach(e.children[0]);G.clearObject(e,!0)}}static resetTransform(e){e.position.set(0,0,0),e.rotation.set(0,0,0),e.scale.set(1,1,1)}static tempObjectRemoval(e){const t=[];e.traverse((e=>{e.userData&&e.userData.flagTemp&&t.push({object:e,parent:e.parent})}));for(let e=0;e<t.length;e++)t[e].object.removeFromParent();return t}static tempObjectRestore(e){for(let t=0;t<e.length;t++){let r=e[t];r.parent.attach(r.object)}}}class L{static addSpaces(e){return String(e).replace(/([A-Z])/g," $1").trim()}static capitalize(e){const t=String(e).split(" ");for(let e=0;e<t.length;e++)t[e]=t[e][0].toUpperCase()+t[e].substring(1);return t.join(" ")}static countDigits(e){return parseFloat(e).toString().length}static nameFromUrl(e,t=!0){let r=new String(e.replace(/^.*[\\\/]/,""));return r=r.replace(/\.[^/.]+$/,""),t&&(r=L.capitalize(r)),r}}let U={},N={},I={},W={},H={},q={},Q={},J={};const Y={},$=new e.TextureLoader;class X{static getLibrary(e){switch(e){case"scripts":return U;case"shapes":return N;case"geometries":return I;case"images":return W;case"textures":return H;case"materials":return q;case"animations":return Q;case"skeletons":return J}return null}static addGeometry(e){if(e&&e.isBufferGeometry){e.name&&""!==e.name||(e.name=e.constructor.name);const r=t([e]);r.name=e.name,r.uuid=e.uuid,e.dispose(),I[(e=r).uuid]=e}return e}static getGeometry(e){return e&&e.isBufferGeometry&&(e=e.uuid),I[e]}static removeGeometry(e,t=!0){I[e.uuid]&&(t&&I[e.uuid].dispose(),delete I[e.uuid])}static addMaterial(e){if(e&&e.isMaterial){let t=Array.isArray(e)?e:[e];for(let r=0;r<t.length;r++)q[e.uuid]=t[r]}return e}static getMaterial(e){return e&&e.isMaterial&&(e=e.uuid),q[e]}static removeMaterial(e,t=!0){q[e.uuid]&&(t&&q[e.uuid].dispose(),delete q[e.uuid])}static loadTexture(t,r){if(!t||""===t)return null;let i=e.DefaultLoadingManager.resolveURL(t);if(Y[i])return console.log("AssetManager.loadTexture: Duplicate image!"),Y[i];const s=$.load(t,(function(t){t.name=L.nameFromUrl(t.image.src),t.premultiplyAlpha=!0,t.wrapS=e.RepeatWrapping,t.wrapT=e.RepeatWrapping,r&&"function"==typeof r&&r(t)}),(function(){Y[i]&&Y[i].isTexture&&Y[i].dispose();delete Y[i]}));return Y[i]=s,s}static addTexture(e){return e&&e.isTexture&&(H[e.uuid]=e),e}static getTexture(e){return e&&e.isTexture&&(e=e.uuid),H[e]}static removeTexture(e,t=!0){if(H[e.uuid]){for(let t in Y)Y[t]&&Y[t].isTexture&&Y[t].uuid===e.uuid&&delete Y[t];t&&H[e.uuid].dispose(),delete H[e.uuid]}}static clear(){function e(e){for(let t in e){const r=e[t];r&&r.dispose&&"function"==typeof r.dispose&&r.dispose(),delete e[t]}}e(q),e(H),e(W),e(I),e(N),e(Q)}static fromJSON(t){X.clear();const r=new e.ObjectLoader;Q=r.parseAnimations(t.animations),N=r.parseShapes(t.shapes),I=r.parseGeometries(t.geometries,N),W=r.parseImages(t.images),H=r.parseTextures(t.textures,W),q=r.parseMaterials(t.materials,H)}static toJSON(e){const t={};e||(e={}),e.shapes||(e.shapes={}),e.geometries||(e.geometries={}),e.images||(e.images={}),e.textures||(e.textures={}),e.materials||(e.materials={}),e.animations||(e.animations={}),e.skeletons||(e.skeletons={});const r={images:{},textures:{},materials:{}};for(let t in I){const r=I[t];if(e.geometries[r.uuid]||(e.geometries[r.uuid]=r.toJSON(e)),r.parameters&&r.parameters.shapes){let t=r.parameters.shapes;!0!==Array.isArray(t)&&(t=[t]);for(let r=0,i=t.length;r<i;r++){const i=t[r];e.shapes[i.uuid]||(e.shapes[i.uuid]=i.toJSON(e))}}}for(let t in q){const i=q[t];e.materials[i.uuid]||(e.materials[i.uuid]=i.toJSON(r))}for(let t in H){const r=H[t];e.textures[r.uuid]||(e.textures[r.uuid]=r.toJSON(e))}for(const r in e){const i=[];for(const t in e[r]){const s=e[r][t];delete s.metadata,i.push(s)}i.length>0&&(t[r]=i)}return t}}const K={};class Z{static registered(e=""){const t=K[e];return t||console.warn(`ComponentManager.registered: Component '${e}' not registered'`),t}static registeredTypes(){return Object.keys(K)}static register(e="",t){if(e=e.toLowerCase(),K[e])return console.warn(`ComponentManager.register: Component '${e}' already registered`);P.isObject(t.config)||(t.config={}),P.isObject(t.config.schema)||(t.config.schema={});const r=t.config.schema;for(const e in r){const t=Array.isArray(r[e])?r[e]:[r[e]];for(let e=0,r=t.length;e<r;e++){let r=t[e];if(void 0===r.type)console.warn("ComponentManager.register(): All schema properties require a 'type' value");else if("divider"===r.type);else if(void 0===r.default)switch(r.type){case"select":case"asset":case"map":case"shape":r.default=null;break;case"number":case"int":case"angle":case"slider":case"scroller":r.default=0;break;case"boolean":r.default=!1;break;case"color":r.default=16777215;break;case"variable":case"vector2":r.default=[0,0];break;case"array":r.default=[];break;case"vector3":r.default=[0,0,0];break;case"vector4":r.default=[0,0,0,0];break;case"string":case"script":r.default="";break;default:console.warn(`ComponentManager.register(): Unknown property type: '${r.type}'`)}else void 0!==r.proMode&&(r.promode=r.proMode)}}K[e]=class extends t{constructor(){super(),this.isComponent=!0,this.enabled=!0,this.tag="",this.type=e,this.entity=null}init(e){super.init(e)}dispose(){super.dispose()}disable(){this.enabled=!1,super.disable()}enable(){this.enabled=!0,super.enable()}defaultData(){let e={};for(let t=0,r=arguments.length;t<r;t+=2)e[arguments[t]]=arguments[t+1];return Z.sanitizeData(e,t.config.schema),e.base={enabled:this.enabled,tag:this.tag,type:this.type},e}}}static sanitizeData(e,t){for(let r in t){let i,s=t[r];!0!==P.isIterable(s)&&(s=[t[r]]);for(let t=0;t<s.length;t++){let r=s[t];if("divider"!==r.type){if(void 0!==r.if){let t=!0;for(let i in r.if){let s=Array.isArray(r.if[i])?r.if[i]:[],a=!1;for(let t=0;t<s.length;t++)if(e[i]===s[t]){a=!0;break}if(!0!==a){t=!1;break}}if(!0!==t)continue}i=r;break}}if(void 0!==i){if(void 0===e[r]&&(e[r]=i.default),z.isNumber(e[r])){let t=i.min??-1/0,s=i.max??1/0;e[r]<t&&(e[r]=t),e[r]>s&&(e[r]=s)}}else delete e[r]}}static stripData(e,t,r){for(let i in r){let s=!1,a=r[i];!0!==P.isIterable(a)&&(a=[r[i]]);for(let r=0;r<a.length;r++){let i=a[r];if("divider"!==i.type){if(void 0!==i.if){let r=!0;for(let s in i.if){let a=Array.isArray(i.if[s])?i.if[s]:[],n=!1,o=!1,l=!1;for(let r=0;r<a.length;r++)if(e[s]===a[r]&&(o=!0),t[s]===a[r]&&(l=!0),o&&l){n=!0;break}if(!0!==n){r=!1;break}}if(!0!==r)continue}s=!0;break}}!0!==s&&delete t[i]}}}new e.Matrix4;const ee=new e.Vector3,te=new e.Quaternion,re=new e.Vector3,ie=(new e.Quaternion,new e.Vector3,new e.Vector3),se=new e.Vector3,ae=(new e.Quaternion,new e.Quaternion),ne=new e.Quaternion,oe=(new e.Euler,new e.Quaternion),le=new e.Vector3,he=new e.Quaternion,ce=new e.Vector3,de=new e.Euler;class ue extends e.Object3D{constructor(){super();const t=new e.Euler,r=new e.Quaternion;t._onChange((function(){})),r._onChange((function(){})),Object.defineProperties(this,{rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:r}})}copy(e,t=!0){return super.copy(e,t),G.copyLocalTransform(e,this,!1),this.lookAtCamera=e.lookAtCamera,this.updateMatrix(),this}getWorldQuaternion(e,t=!0){let r=this.lookAtCamera;return t&&r&&(this.lookAtCamera=!1),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ie,e,se),t&&r&&(this.lookAtCamera=!0,this.updateWorldMatrix(!0,!1)),e}safeAttach(e){e&&e.isObject3D&&(e.getWorldQuaternion(he),e.getWorldScale(ce),e.getWorldPosition(le),e.removeFromParent(),e.rotation.copy(de.setFromQuaternion(he,void 0,!1)),e.scale.copy(ce),e.position.copy(le),this.attach(e))}updateMatrix(){const e=window.activeCamera;let t=this.lookAtCamera&&e&&!this.isScene;t&&this.parent&&this.parent.isObject3D&&this.traverseAncestors((e=>{e.lookAtCamera&&(t=!1)})),t?(e.matrixWorld.decompose(ee,te,re),this.matrixWorld.decompose(le,he,ce),oe.setFromEuler(this.rotation,!1),this.quaternion.copy(te),this.quaternion.multiply(oe),this.parent&&this.parent.isObject3D&&(this.parent.getWorldQuaternion(ae,!1),ne.copy(ae).invert(),this.quaternion.multiply(ne))):this.quaternion.setFromEuler(this.rotation,!1),this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}}class pe extends ue{constructor(e=""){super(),this.isEntity=!0,this.isEntity3D=!0,this.name=e,this.type="Entity3D",this.project=null,this.enabled=!0,this.castShadow=!0,this.receiveShadow=!0,this.lookAtCamera=!1,this.components=[],this.setFlag(x.LOCKED,!1)}getReducedType(){return this.isScene?"Scene":1===this.components.length?L.capitalize(this.components[0].type.toLowerCase()):"Entity3D"}getFlag(e){return Boolean(this.userData[e])}setFlag(e,t){return this.userData[e]=t,this}addComponent(e,t={},r=!0){const i=Z.registered(e);if(void 0===i)return;const s=i.config;let a=this.getComponent(e);if(i.config.multiple||void 0===a?(a=new i,this.components.push(a)):a.disable(),s.dependencies&&r){const e=s.dependencies;for(let t=0,r=e.length;t<r;t++)void 0===this.getComponent(e[t])&&this.addComponent(e[t],{},!1)}return a.entity=this,Z.sanitizeData(t,s.schema),a.init&&a.init(t),this.enabled&&a.enable(),a}getComponent(e,t){if(void 0===t)return this.getComponentByProperty("type",e);let r=this.getComponentsWithProperties("type",e,"tag",t);return r.length>0?r[0]:void 0}getComponentByTag(e){return this.getComponentByProperty("tag",e)}getComponentByType(e){return this.getComponentByProperty("type",e)}getComponentByProperty(e,t){for(let r=0,i=this.components.length;r<i;r++){const i=this.components[r];if(i[e]===t)return i}}getComponentsWithProperties(){let e=[];for(let t=0,r=this.components.length;t<r;t++){const r=this.components[t];let i=!0;for(let e=0,t=arguments.length;e<t;e+=2)if(r[arguments[e]]!==arguments[e+1]){i=!1;break}i&&e.push(r)}return e}removeComponent(e){let t=this.components.indexOf(e);return-1!==t?(this.components.splice(t,1),e.disable(),e.dispose()):console.warn(`Entity3D.removeComponent: Component ${e.uuid}, type '${e.type}' not found`),e}getEntities(){const e=[],t=this.children;for(let r=0;r<t.length;r++)t[r].isEntity3D&&e.push(t[r]);return e}getEntityById(e){return this.getEntityByProperty("id",e)}getEntityByName(e){return this.getEntityByProperty("name",e)}getEntityByUuid(e){return this.getEntityByProperty("uuid",e)}getEntityByProperty(e,t){if(this[e]===t)return this;const r=this.getEntities();for(let i=0,s=r.length;i<s;i++){const s=r[i].getEntityByProperty(e,t);if(s)return s}}traverseEntities(e){this.traverse((t=>{t.isEntity3D&&e(t)}))}cloneEntity(e=!0){return(new this.constructor).copyEntity(this,e)}copyEntity(e,t=!0){this.destroy(),super.copy(e,!1),this.name=e.name,this.enabled=e.enabled,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.lookAtCamera=e.lookAtCamera;for(let t in x)this.setFlag(x[t],e.getFlag(x[t]));const r=e.components;for(let e=0;e<r.length;e++){const t=r[e];let i=this.addComponent(t.type,t.toJSON(),!1);i.tag=t.tag,!0!==t.enabled&&i.disable()}if(!0===t){const t=e.getEntities();for(let e=0;e<t.length;e++){const r=t[e];this.add(r.cloneEntity(!0))}}return this}destroy(){let e=this.getEntities();for(let t=0;t<e.length;t++)this.project&&this.project.removeEntity(e[t]),e[t].destroy();for(;this.components.length>0;){let e=this.components[0];this.removeComponent(e)}}fromJSON(e){const t=e.object;this.uuid=t.uuid,void 0!==t.name&&(this.name=t.name),void 0!==t.enabled&&(this.enabled=t.enabled),void 0!==t.castShadow&&(this.castShadow=t.castShadow),void 0!==t.receiveShadow&&(this.receiveShadow=t.receiveShadow),void 0!==t.lookAtCamera&&(this.lookAtCamera=t.lookAtCamera),void 0!==t.position&&this.position.fromArray(t.position),void 0!==t.rotation&&this.rotation.fromArray(t.rotation),void 0!==t.scale&&this.scale.fromArray(t.scale),void 0!==t.matrixAutoUpdate&&(this.matrixAutoUpdate=t.matrixAutoUpdate),void 0!==t.layers&&(this.layers.mask=t.layers),void 0!==t.visible&&(this.visible=t.visible),void 0!==t.frustumCulled&&(this.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(this.renderOrder=t.renderOrder),void 0!==t.userData&&(this.userData=t.userData);for(let t in e.object.flags)this.setFlag(t,e.object.flags[t]);for(let t=0;t<e.object.components.length;t++){let r=e.object.components[t];if(r&&r.base&&r.base.type){const e=this.addComponent(r.base.type,r,!1);!1===r.enabled&&e.disable(),e.tag=r.base.tag}}if(void 0!==t.entities)for(let t=0;t<e.object.entities.length;t++){const r=(new pe).fromJSON(e.object.entities[t]);this.add(r)}return this.updateMatrix(),this}toJSON(){const e={object:{name:this.name,type:this.type,uuid:this.uuid,components:[],flags:{}}};for(let t in x)e.object.flags[t]=this.getFlag(t);for(let t=0;t<this.components.length;t++)e.object.components.push(this.components[t].toJSON());e.object.enabled=this.enabled,e.object.castShadow=this.castShadow,e.object.receiveShadow=this.receiveShadow,e.object.lookAtCamera=this.lookAtCamera,e.object.position=this.position.toArray(),e.object.rotation=this.rotation.toArray(),e.object.scale=this.scale.toArray(),e.object.matrixAutoUpdate=this.matrixAutoUpdate,e.object.layers=this.layers.mask,!1===this.visible&&(e.object.visible=!1),!1===this.frustumCulled&&(e.object.frustumCulled=!1),0!==this.renderOrder&&(e.object.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(e.object.userData=this.userData);let t=this.getEntities();if(t.length>0){e.object.entities=[];for(let r=0;r<t.length;r++)e.object.entities.push(t[r].toJSON())}return e}}class me extends pe{constructor(t="Start Scene"){super(),this.isScene=!0,this.isScene3D=!0,this.name=t,this.type="Scene3D",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,this.shadowPlane=new e.Mesh(new e.PlaneGeometry(1e5,1e5),new e.ShadowMaterial({color:0,transparent:!0,opacity:.2,depthWrite:!1})),this.shadowPlane.name="ShadowPlane",this.shadowPlane.userData.flagTemp=!0,this.shadowPlane.rotation.x=-Math.PI/2,this.shadowPlane.castShadow=!1,this.shadowPlane.receiveShadow=!0,this.shadowPlane.visible=!1,this.add(this.shadowPlane)}fromJSON(t){const r=t.object;return void 0!==r.background&&(Number.isInteger(r.background)?this.background=new e.Color(r.background):this.background=X.getTexture(r.background)),void 0!==r.environment&&(this.environment=X.getTexture(r.environment)),void 0!==r.fog&&("Fog"===r.fog.type?this.fog=new e.Fog(r.fog.color,r.fog.near,r.fog.far):"FogExp2"===r.fog.type&&(this.fog=new e.FogExp2(r.fog.color,r.fog.density))),super.fromJSON(t),this}toJSON(){const e=super.toJSON();return this.fog&&(e.object.fog=this.fog.toJSON()),e}}class fe{constructor(e="World 1"){this.isWorld=!0,this.isWorld3D=!0,this.name=e,this.type="World3D",this.uuid=crypto.randomUUID(),this.order=0,this.startScene=null,this.lastEditorScene=null,this.sceneNodes={}}addScene(e){return e&&"Scene3D"===e.type?this.sceneNodes[e.uuid]?console.warn(`World3D.addScene: Scene ('${e.name}') already added`,e):(this.sceneNodes[e.uuid]={uuid:e.uuid,order:this.order++},this.startScene||(this.startScene=e.uuid),this.lastEditorScene||(this.lastEditorScene=e.uuid)):console.error("'World3D.addScene: Scene not of type 'Scene3D'",e),this}fromJSON(e){const t=e.object;return this.name=t.name,this.uuid=t.uuid,this.order=t.order,this.startScene=t.startScene,this.lastEditorScene=t.lastEditorScene,this.sceneNodes=t.sceneNodes,this}toJSON(){return{object:{name:this.name,type:this.type,uuid:this.uuid,order:this.order,startScene:this.startScene,lastEditorScene:this.lastEditorScene,sceneNodes:this.sceneNodes}}}}class ye{static combineEntityArrays(e,t){for(let r=0;r<t.length;r++){let i=t[r];!1===ye.containsEntity(e,i)&&e.push(i)}}static commonEntity(e,t){for(let r=0;r<e.length;r++)if(!0===ye.containsEntity(t,e[r]))return!0;for(let r=0;r<t.length;r++)if(!0===ye.containsEntity(e,t[r]))return!0;return!1}static compareArrayOfEntities(e,t){for(let r=0;r<e.length;r++)if(!1===ye.containsEntity(t,e[r]))return!1;for(let r=0;r<t.length;r++)if(!1===ye.containsEntity(e,t[r]))return!1;return!0}static containsEntity(e,t){if(t&&t.uuid&&Array.isArray(e))for(let r=0;r<e.length;r++)if(e[r].uuid===t.uuid)return!0;return!1}static isImportant(e){let t=!1;return t=t||null===e.parent,t=t||e.isScene,t=t||e.userData.flagLocked,t}static parentEntity(e,t=!1){for(;e&&e.parent&&!0!==e.parent.isScene;)if(e=e.parent,t&&e.isEntity)return e;return e}static parentScene(e){for(;e&&e.parent;)if((e=e.parent).isScene)return e}static removeEntityFromArray(e,t){let r=e.length;for(let i=0;i<r;i++)e[i].uuid===t.uuid&&(e.splice(i,1),r=e.length)}static uuidArray(e){let t=[];for(let r=0;r<e.length;r++)t.push(e[r].uuid);return t}}class ge{constructor(e="My Project"){this.isProject=!0,this.name=e,this.uuid=crypto.randomUUID(),this.type="Project",this.scripts={},this.scenes={},this.worlds={}}addWorld(e){return e&&w[e.type]?(this.worlds[e.uuid]=e,null==this.activeWorldUuid&&(this.activeWorldUuid=e.uuid)):console.error(`Project.addWorld: World type (${e.type}) not a valid world type`,e),this}getWorldByName(e){return this.getWorldByProperty("name",e)}getWorldByUuid(e){return this.worlds[e]}getWorldByProperty(e,t){for(const r in this.worlds){const i=this.worlds[r];if(i[e]===t)return i}}addScene(e){return e&&v[e.type]?this.scenes[e.uuid]?console.warn(`Project.addScene: Scene ('${e.name}') already added`,e):this.scenes[e.uuid]=e:console.error(`Project.addScene: Scene type (${e.type}) not a valid scene type`,e),this}getFirstScene(){let e=Object.keys(this.scenes);return e.length>0?this.scenes[e[0]]:null}getSceneByName(e){return this.getSceneByProperty("name",e)}getSceneByUuid(e){return this.scenes[e]}getSceneByProperty(e,t){for(const r in this.scenes){const i=this.scenes[r];if(i[e]===t)return i}}removeScene(e){if(!0!==e.isScene)return;let t=e.getEntities();for(let e=t.length-1;e>=0;e--)this.removeEntity(t[e],!0),t[e].destroy();delete this.scenes[e.uuid]}traverseScenes(e){for(let t in this.scenes){this.scenes[t].traverse(e)}}addEntity(e,t,r=-1,i=!1){if(e){if(null==r&&(r=-1),e.isObject3D)if(t&&t.children&&-1!==r)t.children.splice(r,0,e),e.parent=t;else{let r=t;r&&r.isObject3D||window.editor&&(r=window.editor.viewport.scene),r&&r.isObject3D&&(i?r.attach(e):r.add(e))}return this}}getEntityByUuid(e,t=!1){let r=[],i=null;if(window.editor&&(i=window.editor.viewport.scene),t){r=Array.from(this.scenes);const e=r.indexOf(i),t=0;i&&-1!==e&&(arr.splice(e,1),arr.splice(t,0,i))}else i&&r.push(i);for(let t=0;t<r.length;t++){const i=r[t].getEntityByProperty("uuid",e);if(i)return i}}moveEntity(e,t,r,i=-1){e&&(t&&t.isObject3D||!window.editor||(t=window.editor.viewport.scene),t&&t.isObject3D&&(t.safeAttach(e),r&&(i=t.children.indexOf(r)),-1!==i&&(t.children.splice(i,0,e),t.children.pop())))}removeEntity(e,t=!1){e&&(!t&&ye.isImportant(e)||e.parent&&e.parent.remove(e))}addScript(e,t){let r=e.uuid;return this.scripts[r]||(this.scripts[r]=[]),this.scripts[r].push(t),this}removeScript(e,t){let r=e.uuid;if(!this.scripts[r])return;let i=this.scripts[r].indexOf(t);-1!==i&&this.scripts[r].splice(i,1)}clear(){const e=Object.keys(this.scenes);for(let t=0;t<e.length;t++){let r=this.scenes[e[t]];this.removeScene(r)}this.name="My Project",this.uuid=crypto.randomUUID()}fromJSON(e,t=!0){const r=e.metadata?e.metadata.type:"Undefined";if("Onsight"!==r)return void console.error(`Project.fromJSON: Unknown project type ('${r}'), expected 'Onsight'`);const i=e.metadata.version;if("0.0.3"!==i&&console.warn(`Project.fromJSON: Project saved in 'v${i}', attempting to load with 'v0.0.3'`),e.object&&e.object.type===this.type){this.clear(),t&&X.fromJSON(e),this.name=e.object.name,this.uuid=e.object.uuid,this.scripts=e.scripts;for(let t=0;t<e.worlds.length;t++)if("World3D"===e.worlds[t].object.type)this.addWorld((new fe).fromJSON(e.worlds[t]));for(let t=0;t<e.scenes.length;t++)if("Scene3D"===e.scenes[t].object.type)this.addScene((new me).fromJSON(e.scenes[t],this));return this}console.error("Project.fromJSON: Save file corrupt, no 'Project' object found!")}toJSON(){const e=X.toJSON({});e.metadata={type:"Onsight",version:"0.0.3",generator:"Onsight.Project.toJSON"},e.object={name:this.name,type:this.type,uuid:this.uuid},e.scripts=this.scripts,e.scenes=[],e.worlds=[];for(const t in this.worlds){const r=this.worlds[t];e.worlds.push(r.toJSON())}for(const t in this.scenes){const r=this.scenes[t];e.scenes.push(r.toJSON())}return e}}class be{constructor(){const t=this;let r,i,s,a=this,n=new ge,o=S.STOPPED;Object.defineProperty(t,"scene",{get:function(){return s},set:function(e){s=e}}),this.width=1,this.height=1,this.wantsScreenshot=!1,r=new e.WebGLRenderer({antialias:!0}),r.setPixelRatio(1),r.shadowMap.enabled=!0,this.dom=document.createElement("div"),this.dom.appendChild(r.domElement);let l="player,renderer,scene,camera",h={init:[],update:[],keydown:[],keyup:[],pointerdown:[],pointerup:[],pointermove:[]};function c(e,t){for(let r=0,i=e.length;r<i;r++)e[r](t)}this.load=function(e,t=!0){n.fromJSON(e,t),this.scene=n.getFirstScene(),this.setCamera(B.createPerspective(500,500,!0)),i.position.x=0,i.position.y=0,document.addEventListener("keydown",b),document.addEventListener("keyup",v),document.addEventListener("pointerdown",w),document.addEventListener("pointerup",x),document.addEventListener("pointermove",M);let o="",d={};for(let e in h)o+=e+",",d[e]=e;o=o.replace(/.$/,"");let u=JSON.stringify(d).replace(/\"/g,"");function p(e){const t=n.scripts[e.uuid];if(void 0!==t&&t.length>0)for(let n=0,c=t.length;n<c;n++){let c=t[n];if(c.errors)console.warn(`Entity '${e.name}' has errors in script '${c.name}'. Script will not be loaded!`);else{let t=`${c.source} \n return ${u};`,n=new Function(l,o,t).bind(e)(a,r,s,i);for(let t in n)n[t]&&(void 0!==h[t]?h[t].push(n[t].bind(e)):console.warn(`Player: Event type not supported ('${t}')`))}}}s.traverse(p),c(h.init,arguments)};let d,u,p,m=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,f=window.cancelAnimationFrame||window.mozCancelAnimationFrame,y=null;function g(){d=performance.now();try{let e=d-u,t=d-p;o===S.PLAYING&&c(h.update,{time:e,delta:t})}catch(e){console.error(e.message||e,e.stack||"")}if(window.activeCamera=i,r.render(s,i),!0===t.wantsScreenshot){let e=n.name+" "+(new Date).toLocaleString()+".png",i="image/png",s=r.domElement.toDataURL(i);P.saveImage(s,e),t.wantsScreenshot=!1}p=d,y=m(g)}function b(e){c(h.keydown,e)}function v(e){c(h.keyup,e)}function w(e){c(h.pointerdown,e)}function x(e){c(h.pointerup,e)}function M(e){c(h.pointermove,e)}this.play=function(){u=p=performance.now(),o=S.PLAYING,y=m(g)},this.pause=function(){o===S.PLAYING?o=S.PAUSED:o===S.PAUSED&&(o=S.PLAYING)},this.stop=function(){o=S.STOPPED,document.removeEventListener("keydown",b),document.removeEventListener("keyup",v),document.removeEventListener("pointerdown",w),document.removeEventListener("pointerup",x),document.removeEventListener("pointermove",M),G.clearObject(i),G.clearObject(s);for(let e in h)h[e].length=0;y&&(f(y),y=null)},this.getRenderer=function(){return r},this.appState=function(){return o},this.setCamera=function(e){i=e},this.setPixelRatio=function(e){r.setPixelRatio(e)},this.setSize=function(e,t){this.width=e,this.height=t,i&&B.updateCamera(i,e,t),r&&r.setSize(e,t)},this.gameCoordinates=function(t){const r=this.dom.getBoundingClientRect();let s=t.clientX-r.left,a=t.clientY-r.top,n=s/r.width*(2*r.width)-r.width,o=-a/r.height*(2*r.height)+r.height,l=new e.Vector3(n,o,0);return l.unproject(i),l}}}class ve{constructor(){this.entities=[],this.expand()}getEntities(e){return e>this.entities.length&&this.expand(e-this.entities.length),this.entities.splice(0,e)}getEntity(){return this.entities.length||this.expand(),this.entities.pop()}recycle(e){e.destroy(),this.entities.push(e)}expand(e=10){for(let t=0;t<e;t++)this.entities.push(new pe)}}class we{static get NAMES(){return Qe}constructor(e=16777215,t,r,i=""){this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,r,i)}copy(e){return this.set(e)}set(e=0,t,r,i=""){if(0===arguments.length)return this.set(0);if(null==e||Number.isNaN(e))(t||r)&&console.warn(`ColorEye: Passed some valid arguments, however 'r' was ${e}`);else if(void 0===t&&void 0===r){let r=e;if("number"==typeof r||0===r)return this.setHex(r);if(r&&(void 0!==(s=r).r&&void 0!==s.g&&void 0!==s.b))return this.setRGBF(r.r,r.g,r.b);if(r&&xe(r))return this.setHSL(360*r.h,r.s,r.l);if(r&&Se(r))return this.setRYB(255*r.r,255*r.y,255*r.b);if(Array.isArray(r)&&r.length>2){let e=typeof t===number&&t>0?t:0;return this.setRGBF(r[e],r[e+1],r[e+2])}if("string"==typeof r)return this.setStyle(r)}else switch(i){case"rgb":return this.setRGB(e,t,r);case"hsl":return this.setHSL(e,t,r);case"ryb":return this.setRYB(e,t,r);default:return this.setRGBF(e,t,r)}var s;return this}setColorName(e){const t=Qe[e.toLowerCase()];return t?this.setHex(t):(console.warn(`ColorEye: Unknown color ${e}`),this)}setHex(e){((e=Math.floor(e))>16777215||e<0)&&(console.warn(`ColorEye: Given decimal outside of range, value was ${e}`),e=Me(e,0,16777215));let t=(16711680&e)>>16,r=(65280&e)>>8,i=255&e;return this.setRGB(t,r,i)}setHSL(e,t,r){e=Ee(e,0,360),t=Me(t,0,1),r=Me(r,0,1);let i=(1-Math.abs(2*r-1))*t,s=i*(1-Math.abs(e/60%2-1)),a=r-i/2,n=0,o=0,l=0;return e<60?(n=i,o=s,l=0):60<=e&&e<120?(n=s,o=i,l=0):120<=e&&e<180?(n=0,o=i,l=s):180<=e&&e<240?(n=0,o=s,l=i):240<=e&&e<300?(n=s,o=0,l=i):300<=e&&(n=i,o=0,l=s),this.setRGBF(n+a,o+a,l+a),this}setRandom(){return this.setRGBF(Math.random(),Math.random(),Math.random())}setRGB(e,t,r){return this.setRGBF(e/255,t/255,r/255)}setRGBF(e,t,r){return this.r=Me(e,0,1),this.g=Me(t,0,1),this.b=Me(r,0,1),this}setRYB(e,t,r){let i=Ie(Me(e,0,255),Me(t,0,255),Me(r,0,255),255,We.RYB_TO_RGB);return this.setHex(i)}setScalar(e){return this.setRGB(e,e,e)}setScalarF(e){return this.setRGBF(e,e,e)}setStyle(e){let t;if(t=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let e;const r=t[1],i=t[2];switch(r){case"rgb":case"rgba":if(e=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)){let t=Math.min(255,parseInt(e[1],10)),r=Math.min(255,parseInt(e[2],10)),i=Math.min(255,parseInt(e[3],10));return this.setRGB(t,r,i)}if(e=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)){let t=Math.min(100,parseInt(e[1],10))/100,r=Math.min(100,parseInt(e[2],10))/100,i=Math.min(100,parseInt(e[3],10))/100;return this.setRGBF(t,r,i)}break;case"hsl":case"hsla":if(e=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)){const t=parseFloat(e[1]),r=parseInt(e[2],10)/100,i=parseInt(e[3],10)/100;return this.setHSL(t,r,i)}}}else if(t=/^\#([A-Fa-f\d]+)$/.exec(e)){const e=t[1],r=e.length;if(3===r){let t=parseInt(e.charAt(0)+e.charAt(0),16),r=parseInt(e.charAt(1)+e.charAt(1),16),i=parseInt(e.charAt(2)+e.charAt(2),16);return this.setRGB(t,r,i)}if(6===r){let t=parseInt(e.charAt(0)+e.charAt(1),16),r=parseInt(e.charAt(2)+e.charAt(3),16),i=parseInt(e.charAt(4)+e.charAt(5),16);return this.setRGB(t,r,i)}}return e&&e.length>0?this.setColorName(e):this}cssString(e){return"rgb("+this.rgbString(e)+")"}hex(){return(this.red()<<16)+(this.green()<<8)+this.blue()}hexString(e){return void 0!==e&&"number"==typeof value||(e=this.hex()),we.hexString(e)}static hexString(e=0){return"#"+("000000"+(e>>>0).toString(16)).slice(-6)}static randomHex(){return Le.setRandom().hex()}rgbString(e){let t=this.red()+", "+this.green()+", "+this.blue();return null!=e?t+", "+e:t}toJSON(){return this.hex()}clone(){return new this.constructor(this.r,this.g,this.b)}getHSL(e){if(!e||!xe(e))return{h:ze(this.hex()),s:Pe(this.hex()),l:Oe(this.hex())};e.h=ze(this.hex()),e.s=Pe(this.hex()),e.l=Oe(this.hex())}getRGB(e){if(!e||!xe(e))return{r:this.r,g:this.g,b:this.b};e.r=this.r,e.g=this.g,e.b=this.b}getRYB(e){let t=Ie(this.r,this.g,this.b,1,We.RGB_TO_RYB);if(!e||!Se(e))return{r:ke(t),y:Ce(t),b:Te(t)};e.r=ke(t),e.y=Ce(t),e.b=Te(t)}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}red(){return Me(Math.floor(255*this.r),0,255)}green(){return Me(Math.floor(255*this.g),0,255)}blue(){return Me(Math.floor(255*this.b),0,255)}redF(){return this.r}greenF(){return this.g}blueF(){return this.b}hue(){return Be(this.hex())}saturation(){return Pe(this.hex())}lightness(){return Oe(this.hex())}hueF(){return ze(this.hex())}hueRYB(){for(let e=1;e<qe.length;e++)if(qe[e]>this.hue())return e-2}add(e){return e.isColor||console.warn("ColorEye: add() was not called with a 'Color' object"),this.setRGBF(this.r+e.r,this.g+e.g,this.b+e.b)}addScalar(e){return this.setRGB(this.red()+e,this.green()+e,this.blue()+e)}addScalarF(e){return this.setRGBF(this.r+e,this.g+e,this.b+e)}brighten(e=.5){let t=Be(this.hex()),r=Pe(this.hex()),i=Oe(this.hex());return i+=(1-i)*e,this.setHSL(t,r,i),this}darken(e=.5){let t=Be(this.hex()),r=Pe(this.hex()),i=Oe(this.hex())*e;return this.setHSL(t,r,i)}greyscale(e=1,t="luminosity"){return this.grayscale(e,t)}grayscale(e=1,t="luminosity"){let r=0;"luminosity"===t&&(r=.21*this.r+.72*this.g+.07*this.b),r=(this.r+this.g+this.b)/3,e=Me(e,0,1);let i=this.r*(1-e)+e*r,s=this.g*(1-e)+e*r,a=this.b*(1-e)+e*r;return this.setRGBF(i,s,a)}hslOffset(e,t,r){return this.setHSL(this.hue()+e,this.saturation()+t,this.lightness()+r)}mix(e,t=.5){e.isColor||console.warn("ColorEye: mix() was not called with a 'Color' object"),t=Me(t,0,1);let r=this.r*(1-t)+t*e.r,i=this.g*(1-t)+t*e.g,s=this.b*(1-t)+t*e.b;return this.setRGBF(r,i,s)}multiply(e){return e.isColor||console.warn("ColorEye: multiply() was not called with a 'Color' object"),this.setRGBF(this.r*e.r,this.g*e.g,this.b*e.b)}multiplyScalar(e){return this.setRGBF(this.r*e,this.g*e,this.b*e)}rgbComplementary(){return this.rgbRotateHue(180)}rgbRotateHue(e=90){let t=Ee(this.hue()+e);return this.setHSL(t,this.saturation(),this.lightness())}rybAdjust(){return this.setHSL(Be(Ue(this.hue(),He.RYB)),this.saturation(),this.lightness())}rybComplementary(){return this.rybRotateHue(180)}rybRotateHue(e=90){let t=Ee(this.hueRYB()+e);return this.setHSL(Be(Ue(t,He.RYB)),this.saturation(),this.lightness())}subtract(e){return e.isColor||console.warn("ColorEye: subtract() was not called with a 'Color' object"),this.setRGBF(this.r-e.r,this.g-e.g,this.b-e.b)}equals(e){return e.isColor||console.warn("ColorEye: equals() was not called with a 'Color' object"),De(this.r,e.r)&&De(this.g,e.g)&&De(this.b,e.b)}isEqual(e){return this.equals(e)}isDark(){const e=this.hue(),t=this.lightness();return t<.6&&(e>=210||e<=27)||t<=.32}isLight(){return!this.isDark()}}function xe(e){return void 0!==e.h&&void 0!==e.s&&void 0!==e.l}function Se(e){return void 0!==e.r&&void 0!==e.y&&void 0!==e.b}function Me(e,t,r){return Math.max(t,Math.min(r,e))}function ke(e){return function(e){return Me((16711680&e)>>16,0,255)}(e)/255}function Ce(e){return function(e){return Me((65280&e)>>8,0,255)}(e)/255}function Te(e){return function(e){return Me(255&e,0,255)}(e)/255}function Be(e){return Ve(e,"h")}function ze(e){return Be(e)/360}function Pe(e){return Ve(e,"s")}function Oe(e){return Ve(e,"l")}function De(e,t,r=.0015){return e<t+r&&e>t-r}function Ee(e,t=0,r=360){for(;e>=r;)e-=r-t;for(;e<t;)e+=r-t;return e}let Ae,je,Re,Fe;function Ve(e,t="h"){if(e!==Ae){if(null==e)return 0;const t=ke(e),r=Ce(e),i=Te(e),s=Math.max(t,r,i),a=Math.min(t,r,i),n=s-a;if(Fe=(s+a)/2,0===n)je=Re=0;else{switch(Re=Fe<=.5?n/(s+a):n/(2-s-a),s){case t:je=(r-i)/n+(r<i?6:0);break;case r:je=(i-t)/n+2;break;case i:je=(t-r)/n+4}je=Math.round(60*je),je<0&&(je+=360)}Ae=e}switch(t){case"h":return je;case"s":return Re;case"l":return Fe;default:console.warn(`ColorEye: Unknown channel (${t}) requested in hsl()`)}return 0}const _e=new we,Ge=new we,Le=new we;function Ue(e,t=He.RYB){let r=360/t.length,i=r,s=0;for(let a=0;a<t.length;a++){if(e<i){let a=(i-e)/r;return _e.set(t[s+1]),_e.mix(Ge.set(t[s]),a).hex()}i+=r,s+=1}}const Ne=new we;function Ie(e,t,r,i=255,s=We.RYB_TO_RGB){e=Me(e/i,0,1),t=Me(t/i,0,1),r=Me(r/i,0,1);let a=s[0],n=s[1],o=s[2],l=s[3],h=s[4],c=s[5],d=s[6],u=s[7],p=1-e,m=1-t,f=1-r,y=p*m*f,g=p*m*r,b=p*t*f,v=e*m*f,w=p*t*r,x=e*m*r,S=e*t*f,M=e*t*r,k=y*a[0]+g*n[0]+b*o[0]+v*l[0]+w*h[0]+x*c[0]+S*d[0]+M*u[0],C=y*a[1]+g*n[1]+b*o[1]+v*l[1]+w*h[1]+x*c[1]+S*d[1]+M*u[1],T=y*a[2]+g*n[2]+b*o[2]+v*l[2]+w*h[2]+x*c[2]+S*d[2]+M*u[2];return Ne.set(k,C,T,"gl").hex()}const We={RYB_TO_RGB:[[1,1,1],[.163,.373,.6],[1,1,0],[1,0,0],[0,.66,.2],[.5,0,.5],[1,.5,0],[0,0,0]],RGB_TO_RYB:[[1,1,1],[0,0,1],[0,1,.483],[1,0,0],[0,.053,.21],[.309,0,.469],[0,1,0],[0,0,0]]},He={RYB:[16711680,16730368,16741376,16749056,16755200,16760576,16765696,16771072,16776960,13432320,10481152,6808320,52224,44900,39321,745892,1196203,1776563,3740847,5443501,7408042,10879142,13434996,14942277,16711680]},qe=[0,1,2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19,19,20,21,21,22,23,23,24,25,25,26,27,27,28,28,29,29,30,30,31,31,32,32,32,33,33,34,34,35,35,35,36,36,37,37,37,38,38,38,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,59,59,59,60,60,61,61,62,63,63,64,65,65,66,67,68,68,69,70,70,71,72,72,73,73,74,75,75,76,77,77,78,79,79,80,81,82,82,83,84,85,86,87,88,88,89,90,91,92,93,95,96,98,100,102,104,105,107,109,111,113,115,116,118,120,122,125,127,129,131,134,136,138,141,143,145,147,150,152,154,156,158,159,161,163,165,166,168,170,171,173,175,177,178,180,182,184,185,187,189,191,192,194,196,198,199,201,203,205,206,207,208,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,226,227,228,229,230,232,233,234,235,236,238,239,240,241,242,243,244,245,246,247,248,249,250,251,251,252,253,254,255,256,257,257,258,259,260,260,261,262,263,264,264,265,266,267,268,268,269,270,271,272,273,274,274,275,276,277,278,279,280,282,283,284,286,287,289,290,292,293,294,296,297,299,300,302,303,305,307,309,310,312,314,316,317,319,321,323,324,326,327,328,329,330,331,332,333,334,336,337,338,339,340,341,342,343,344,345,347,348,349,350,352,353,354,355,356,358,359,999],Qe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,transparent:0,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};class Je{static absolute(e){e.x=Math.abs(e.x),e.y=Math.abs(e.y),e.z=Math.abs(e.z)}static noZero(e,t=.001){z.fuzzyFloat(e.x,0,t)&&(e.x=e.x<0?-1*t:t),z.fuzzyFloat(e.y,0,t)&&(e.y=e.y<0?-1*t:t),z.fuzzyFloat(e.z,0,t)&&(e.z=e.z<0?-1*t:t)}static printOut(e,t=""){""!==t&&(t+=" - "),console.info(`${t}X: ${e.x}, Y: ${e.y}, Z: ${e.z}`)}static round(e,t=0){const r=Math.pow(10,t);e.x=Math.round(e.x*r)/r,e.y=Math.round(e.y*r)/r,e.z=Math.round(e.z*r)/r}static sanity(e){isNaN(e.x)&&(e.x=0),isNaN(e.y)&&(e.y=0),isNaN(e.z)&&(e.z=0)}}const Ye=new e.Color,$e=new e.Vector3;class Xe{static buildFromPaths(t,i,s,a=""){let n=0,o=0;if(i.forEach((i=>{let s=i.userData.style.fill,l=i.userData.style.fillOpacity;if(l||0===l||(l=1),void 0!==s&&"none"!==s){r.createShapes(i).forEach((r=>{let i=`Fill ${o}`;""!==a&&(i=a+" "+i);const h=new pe(i),c=.001;for(let e=0;e<r.curves.length;e++){const t=r.curves[e];t.v0&&t.v0.multiplyScalar(c),t.v1&&t.v1.multiplyScalar(c),t.v2&&t.v2.multiplyScalar(c),t.v3&&t.v3.multiplyScalar(c),t.aX&&(t.aX*=c),t.aY&&(t.aY*=c),t.xRadius&&(t.xRadius*=c),t.yRadius&&(t.yRadius*=c)}const d=new e.ExtrudeGeometry(r,{depth:.256,bevelEnabled:!1,bevelThickness:.25,bevelSegments:8,curveSegments:16,steps:4});d.name=i,d.translate(0,0,-.128),d.computeBoundingBox(),d.boundingBox.getCenter($e),d.center(),d.scale(1,-1,-1),h.position.copy($e),h.addComponent("geometry",d),h.addComponent("material",{style:"standard",side:"FrontSide",color:Ye.setStyle(s).getHex(),opacity:l}),h.position.z=n,t.add(h),n+=.001,o++}))}})),t.children&&t.children.length>0){const r=new e.Vector3;G.computeCenter(t.children,r);for(let e of t.children)e.position.x-=r.x,e.position.y-=r.y}s&&"function"==typeof s&&s()}static fromFile(e,t){const i=new pe;return(new r).load(e,(function(r){Xe.buildFromPaths(i,r.paths,t,L.nameFromUrl(e))})),i}}class Ke extends e.BufferGeometry{constructor(t=1,r=1,i=2,s=12,a=1,n=5,o=5,l,h){super(),this.type="CapsuleGeometry",this.parameters={radiusTop:t,radiusBottom:r,height:i,radialSegments:s,heightSegments:a,thetaStart:l,thetaLength:h},t=void 0!==t?t:1,r=void 0!==r?r:1,i=void 0!==i?i:2,t=z.clamp(t,.001,i),r=z.clamp(r,.001,i),i<.001&&(i=.001),s=Math.floor(s)||12,a=Math.floor(a)||1,n=Math.floor(n)||5,o=Math.floor(o)||5,l=void 0!==l?l:0,h=void 0!==h?h:2*Math.PI;let c=Math.acos((r-t)/i),d=(s+1)*(a+1+o+n),u=s*(a+o+n)*2*3,p=new e.BufferAttribute(new(u>65535?Uint32Array:Uint16Array)(u),1),m=new e.BufferAttribute(new Float32Array(3*d),3),f=new e.BufferAttribute(new Float32Array(3*d),3),y=new e.BufferAttribute(new Float32Array(2*d),2),g=0,b=0,v=[],w=i/2;!function(){let d,u,x=new e.Vector3,S=new e.Vector3,M=Math.cos(c),k=Math.sin(c),C=new e.Vector2(t*k,w+t*M).sub(new e.Vector2(r*k,r*M-w)).length(),T=t*c+C+r*(Math.PI/2-c),B=0;for(u=0;u<=n;u++){let e=[],r=Math.PI/2-c*(u/n);B+=t*c/n;let i=Math.cos(r),a=Math.sin(r),o=i*t;for(d=0;d<=s;d++){let r=d/s,n=r*h+l,c=Math.sin(n),u=Math.cos(n);S.x=o*c,S.y=w+a*t,S.z=o*u,m.setXYZ(g,S.x,S.y,S.z),x.set(i*c,a,i*u),f.setXYZ(g,x.x,x.y,x.z),y.setXY(g,r,1-B/T),e.push(g),g++}v.push(e)}let z=i+M*t-M*r,P=k*(r-t)/z;for(u=1;u<=a;u++){let e=[];B+=C/a;let i=k*(u*(r-t)/a+t);for(d=0;d<=s;d++){let r=d/s,n=r*h+l,o=Math.sin(n),c=Math.cos(n);S.x=i*o,S.y=w+M*t-u*z/a,S.z=i*c,m.setXYZ(g,S.x,S.y,S.z),x.set(o,P,c).normalize(),f.setXYZ(g,x.x,x.y,x.z),y.setXY(g,r,1-B/T),e.push(g),g++}v.push(e)}for(u=1;u<=o;u++){let e=[],t=Math.PI/2-c-(Math.PI-c)*(u/o);B+=r*c/o;let i=Math.cos(t),a=Math.sin(t),n=i*r;for(d=0;d<=s;d++){let t=d/s,o=t*h+l,c=Math.sin(o),u=Math.cos(o);S.x=n*c,S.y=a*r-w,S.z=n*u,m.setXYZ(g,S.x,S.y,S.z),x.set(i*c,a,i*u),f.setXYZ(g,x.x,x.y,x.z),y.setXY(g,t,1-B/T),e.push(g),g++}v.push(e)}for(d=0;d<s;d++)for(u=0;u<n+a+o;u++){let e=v[u][d],t=v[u+1][d],r=v[u+1][d+1],i=v[u][d+1];p.setX(b,e),b++,p.setX(b,t),b++,p.setX(b,i),b++,p.setX(b,t),b++,p.setX(b,r),b++,p.setX(b,i),b++}}(),this.setIndex(p),this.setAttribute("position",m),this.setAttribute("normal",f),this.setAttribute("uv",y)}static fromPoints(t,r,i,s,a,n,o,l,h,c){let d=null,u=null,p=null,m=null;u=t,d=r,m=i,p=s;const f=d,y=u,g=p,b=m,v=new e.Vector3(f.x,f.y,f.z),w=new e.Vector3(y.x,y.y,y.z),x=g,S=b;let M=v.distanceTo(w);if(M<Math.abs(g-b)){let t=new e.SphereGeometry(b,a,l,h,c);return t.translate(b.x,b.y,b.z),t}const k=Math.acos((S-x)/M),C=Math.cos(k),T=new e.Matrix4,B=new e.Quaternion,z=new e.Vector3(0,1,0),P=new e.Vector3;P.subVectors(v,w),P.normalize(),B.setFromUnitVectors(z,P),T.makeRotationFromQuaternion(B);const O=new e.Matrix4,D=new e.Vector3;D.subVectors(v,w),D.normalize();let E=new e.Vector3;E=v,E.addScaledVector(D,C*x);let A=new e.Vector3;A=w,A.addScaledVector(D,C*S);const j=new e.Vector3;j.subVectors(A,E),j.normalize();const R=new e.Vector3;R.lerpVectors(A,E,.5),O.makeTranslation(R.x,R.y,R.z);let F=new Ke(S,x,M,a,n,o,l,h,c);return F.applyMatrix(T),F.applyMatrix(O),F}}class Ze extends e.BufferGeometry{constructor(t=1,r=1,i=1,s=8,a=1,n=!1,o=0,l=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:r,height:i,radialSegments:s,heightSegments:a,openEnded:n,thetaStart:o,thetaLength:l};const h=this;s=Math.floor(s),a=Math.floor(a);const c=[],d=[],u=[],p=[];let m=0;const f=[],y=i/2;let g=0;function b(i){const a=m,n=new e.Vector2,f=new e.Vector3;let b=0;const v=!0===i?t:r,w=!0===i?1:-1;for(let e=1;e<=s;e++)d.push(0,y*w,0),u.push(0,w,0),p.push(.5,.5),m++;const x=m;for(let e=0;e<=s;e++){const t=e/s*l+o,r=Math.cos(t),i=Math.sin(t);f.x=v*i,f.y=y*w,f.z=v*r,d.push(f.x,f.y,f.z),u.push(0,w,0),n.x=.5*r+.5,n.y=.5*i*w+.5,p.push(n.x,n.y),m++}for(let e=0;e<s;e++){const t=a+e,r=x+e;!0===i?c.push(r,r+1,t):c.push(r+1,r,t),b+=3}h.addGroup(g,b,!0===i?1:2),g+=b}!function(){const n=new e.Vector3,b=new e.Vector3;let v=0;const w=(r-t)/i;for(let e=0;e<=a;e++){const h=[],c=e/a,g=c*(r-t)+t;for(let e=0;e<=s;e++){const t=e/s,r=t*l+o,a=Math.sin(r),f=Math.cos(r);b.x=g*a,b.y=-c*i+y,b.z=g*f,d.push(b.x,b.y,b.z),n.set(a,w,f).normalize(),u.push(n.x,n.y,n.z),p.push(t,1-c),h.push(m++)}f.push(h)}for(let t=0;t<s;t++)for(let r=0;r<a;r++){const i=f[r][t],s=f[r+1][t],a=f[r+1][t+1],n=f[r][t+1],o=new e.Vector3(d[3*i+0],d[3*i+1],d[3*i+2]),l=new e.Vector3(d[3*s+0],d[3*s+1],d[3*s+2]),h=new e.Vector3(d[3*a+0],d[3*a+1],d[3*a+2]),u=new e.Vector3(d[3*n+0],d[3*n+1],d[3*n+2]),p=new e.Triangle(o,l,u),m=new e.Triangle(l,h,u);p.getArea()>1e-4&&(c.push(i,s,n),v+=3),m.getArea()>1e-4&&(c.push(s,a,n),v+=3)}h.addGroup(g,v,0),g+=v}(),n||(t>0&&b(!0),r>0&&b(!1)),this.setIndex(c),this.setAttribute("position",new e.Float32BufferAttribute(d,3)),this.setAttribute("normal",new e.Float32BufferAttribute(u,3)),this.setAttribute("uv",new e.Float32BufferAttribute(p,2))}static fromJSON(e){return new Ze(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class et extends e.ExtrudeGeometry{constructor(t,r){let i=new e.Shape;!function(e){e.moveTo(t[0].x,t[0].y);for(let r=1;r<t.length;r++)e.lineTo(t[r].x,t[r].y);e.lineTo(t[0].x,t[0].y)}(i);super(i,{steps:2,depth:r,bevelEnabled:!1}),this.vertices=t,this.height=r}clone(){return new this.constructor(this.vertices,this.height).copy(this)}}function tt(t){t.transparent=!0,t.resolution=new e.Vector2(1024,1024),t.depthTest=!0,t.depthWrite=!1,t.polygonOffset=!0,t.polygonOffsetFactor=1,t.side=e.DoubleSide,t.alphaToCoverage=!0}const rt=new e.Quaternion,it=new e.Vector3,st=new e.Vector3,at=new e.Vector3,nt=new e.Vector3,ot=new e.Box3,lt=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);class ht extends e.LineSegments{constructor(t,r,i,s,a,n,o=16777215){const l=[t,r,i,s,a,n],h=new e.BufferGeometry;h.setIndex([0,1]),h.setAttribute("position",new e.Float32BufferAttribute(l,3));const c=new e.LineBasicMaterial({color:o});tt(c),c.wireframe=!0,super(h,c)}clone(){const e=this.geometry.attributes.position.array;return e[0]=point1.x,e[1]=point1.y,e[2]=point1.z,e[3]=point2.x,e[4]=point2.y,e[5]=point2.z,new this.constructor(e[0],e[1],e[2],e[3],e[4],e[5]).copy(this,!0)}setPoints(e,t){Je.sanity(e),Je.sanity(t);const r=this.geometry.attributes.position.array;r[0]=e.x,r[1]=e.y,r[2]=e.z,r[3]=t.x,r[4]=t.y,r[5]=t.z,this.geometry.attributes.position.needsUpdate=!0,this.geometry.computeBoundingSphere()}}class ct extends i{constructor(t,r,i,n,o,l,h=1,c=16777215){const d=new s,u=new a({color:c,linewidth:h});tt(u);const p=[t,r,i,n,o,l];d.setPositions(p),super(d,u),this.computeLineDistances(),this.scale.set(1,1,1),this.point1=new e.Vector3(t,r,i),this.point2=new e.Vector3(n,o,l)}clone(){return new this.constructor(this.point1.x,this.point1.y,this.point1.z,this.point2.x,this.point2.y,this.point2.z).copy(this,!0)}setPoints(e,t){Je.sanity(e),Je.sanity(t),this.point1.copy(e),this.point2.copy(t);const r=[e.x,e.y,e.z,t.x,t.y,t.z];this.geometry.setPositions(r),this.computeLineDistances()}}class dt extends e.LineSegments{constructor(t,r=16777215,i=1,s=!1){const a=new e.WireframeGeometry,n=new e.LineBasicMaterial({color:r,opacity:i});tt(n),super(a,n),this._positions=new Float32Array(24),this.points=[];for(let t=0;t<8;t++)this.points.push(new e.Vector3);t&&this.updateFromObject(t,s),this.clone=function(){return new this.constructor(t,r,i,s).copy(this,!0)}}disableDepthTest(){this.material.depthTest=!1}updateFromObject(t,r){let i=t.clone();r&&(t.getWorldPosition(st),t.getWorldQuaternion(rt),t.getWorldScale(it),i.lookAtCamera=!1,i.position.set(0,0,0),i.rotation.set(0,0,0),i.scale.set(1,1,1),i.updateMatrixWorld(!0)),ot.setFromObject(i);const s=ot.min,a=ot.max;Je.sanity(ot.min),Je.sanity(ot.max);let n=this._positions;n[0]=a.x,n[1]=a.y,n[2]=a.z,n[3]=s.x,n[4]=a.y,n[5]=a.z,n[6]=s.x,n[7]=s.y,n[8]=a.z,n[9]=a.x,n[10]=s.y,n[11]=a.z,n[12]=a.x,n[13]=a.y,n[14]=s.z,n[15]=s.x,n[16]=a.y,n[17]=s.z,n[18]=s.x,n[19]=s.y,n[20]=s.z,n[21]=a.x,n[22]=s.y,n[23]=s.z;const o=[];for(let e=lt.length-1;e>0;e-=2){const t=3*lt[e-0],r=3*lt[e-1];o.push(n[t+0],n[t+1],n[t+2]),o.push(n[r+0],n[r+1],n[r+2])}this.geometry.setAttribute("position",new e.Float32BufferAttribute(o,3)),r&&(this.setRotationFromQuaternion(rt),this.scale.set(it.x,it.y,it.z),this.position.set(st.x,st.y,st.z)),this.updateMatrixWorld(!0),G.clearObject(i)}getPoints(){for(let e=0;e<8;e++){const t=3*e;this.points[e].x=this.geometry.attributes.position.array[t+0],this.points[e].y=this.geometry.attributes.position.array[t+1],this.points[e].z=this.geometry.attributes.position.array[t+2],this.localToWorld(this.points[e])}return this.points}getLocalPoints(){for(let e=0;e<8;e++){const t=3*e;this.points[e].x=this._positions[t+0],this.points[e].y=this._positions[t+1],this.points[e].z=this._positions[t+2]}return this.points}getBox3(t){const r=this.getLocalPoints();(t=t??new e.Box3).min.x=r[6].x,t.min.y=r[6].y,t.min.z=r[6].z,t.max.x=r[0].x,t.max.y=r[0].y,t.max.z=r[0].z}}class ut extends i{constructor(t,r=1,i=16777215,s=1,o=!1){const l=new n,h=new a({color:i,linewidth:r,opacity:s});tt(h),h.depthTest=!1,super(l,h),this._positions=new Float32Array(24),this.points=[];for(let t=0;t<8;t++)this.points.push(new e.Vector3);t&&this.updateFromObject(t,o),this.clone=function(){return new this.constructor(t,r,i,s,o).copy(this,!0)}}disableDepthTest(){this.material.depthTest=!1}updateFromObject(e,t){let r=e.clone();t&&(e.getWorldPosition(st),e.getWorldQuaternion(rt),e.getWorldScale(it),r.lookAtCamera=!1,r.position.set(0,0,0),r.rotation.set(0,0,0),r.scale.set(1,1,1),r.updateMatrixWorld(!0)),ot.setFromObject(r);const i=ot.min,s=ot.max;Je.sanity(ot.min),Je.sanity(ot.max);let a=this._positions;a[0]=s.x,a[1]=s.y,a[2]=s.z,a[3]=i.x,a[4]=s.y,a[5]=s.z,a[6]=i.x,a[7]=i.y,a[8]=s.z,a[9]=s.x,a[10]=i.y,a[11]=s.z,a[12]=s.x,a[13]=s.y,a[14]=i.z,a[15]=i.x,a[16]=s.y,a[17]=i.z,a[18]=i.x,a[19]=i.y,a[20]=i.z,a[21]=s.x,a[22]=i.y,a[23]=i.z;const n=[];for(let e=lt.length-1;e>0;e-=2){const t=3*lt[e-0],r=3*lt[e-1];n.push(a[t+0],a[t+1],a[t+2]),n.push(a[r+0],a[r+1],a[r+2])}this.geometry.setPositions(n),t&&(this.setRotationFromQuaternion(rt),this.scale.set(it.x,it.y,it.z),this.position.set(st.x,st.y,st.z)),this.updateMatrixWorld(!0),G.clearObject(r)}getPoints(){for(let e=0;e<8;e++){const t=3*e;this.points[e].x=this.geometry.attributes.position.array[t+0],this.points[e].y=this.geometry.attributes.position.array[t+1],this.points[e].z=this.geometry.attributes.position.array[t+2],this.localToWorld(this.points[e])}return this.points}getLocalPoints(){for(let e=0;e<8;e++){const t=3*e;this.points[e].x=this._positions[t+0],this.points[e].y=this._positions[t+1],this.points[e].z=this._positions[t+2]}return this.points}getAbsoluteSize(e){this.getSize(e),e.x=Math.abs(e.x),e.y=Math.abs(e.y),e.z=Math.abs(e.z)}getAverageSize(){return this.getSize(nt),(nt.x+nt.y+nt.z)/3}getBox3(t){const r=this.getLocalPoints();(t=t??new e.Box3).min.x=r[6].x,t.min.y=r[6].y,t.min.z=r[6].z,t.max.x=r[0].x,t.max.y=r[0].y,t.max.z=r[0].z}getSize(e){this.getWorldScale(at);const t=this.getLocalPoints();e.x=(t[0].x-t[6].x)*Math.abs(at.x),e.y=(t[0].y-t[6].y)*Math.abs(at.y),e.z=(t[0].z-t[6].z)*Math.abs(at.z)}getMaxSize(){return this.getSize(nt),Math.max(Math.max(nt.x,nt.y),nt.z)}}class pt extends e.LineSegments{constructor(t,r,i=1,s=!1){const a=new e.WireframeGeometry(t.geometry),n=new e.LineBasicMaterial({color:r,opacity:i});tt(n),super(a,n),s&&(this.rotation.set(t.rotation.x,t.rotation.y,t.rotation.z),this.scale.set(t.scale.x,t.scale.y,t.scale.z),this.position.set(t.position.x,t.position.y,t.position.z)),this.clone=function(){return new this.constructor(t,r,i,s).copy(this,!0)}}}class mt extends o{constructor(t,r,i,s=1,n=!1){const o=new l(t.geometry),h=new a({color:i,linewidth:r,resolution:new e.Vector2(500,500),opacity:s});tt(h),h.depthTest=!1,super(o,h),n&&(this.rotation.set(t.rotation.x,t.rotation.y,t.rotation.z),this.scale.set(t.scale.x,t.scale.y,t.scale.z),this.position.set(t.position.x,t.position.y,t.position.z)),this.clone=function(){return new this.constructor(t,r,i,s,n).copy(this,!0)}}}class ft{fromObject(e){let t,r=new THREE.SphereGeometry(2,4,2),i=new THREE.MeshBasicMaterial({color:16711680,visible:!1});if(e.isCamera)t=new THREE.CameraHelper(e);else if(e.isPointLight)t=new THREE.PointLightHelper(e,1);else if(e.isDirectionalLight)t=new THREE.DirectionalLightHelper(e,1);else if(e.isSpotLight)t=new THREE.SpotLightHelper(e);else if(e.isHemisphereLight)t=new THREE.HemisphereLightHelper(e,1);else{if(!e.isSkinnedMesh)return;t=new THREE.SkeletonHelper(e.skeleton.bones[0])}const s=new THREE.Mesh(r,i);return s.name="picker",s.userData.object=e,t.add(s),t}}class yt extends e.Mesh{constructor(){const t=yt.SkyShader;super(new e.SphereGeometry(1),new e.ShaderMaterial({name:"SkyShader",fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:e.UniformsUtils.clone(t.uniforms),side:e.BackSide,depthTest:!1,depthWrite:!1})),this.isSky=!0,this.baseScale=500,this.scale.setScalar(this.baseScale)}copy(e,t){return super.copy(e,t),this.baseScale=e.baseScale,this.scale.setScalar(this.baseScale),this}}yt.SkyShader={uniforms:{uSky:{value:new e.Color(0,.85,.8)},uHorizon:{value:new e.Color(1,.75,.5)},uGround:{value:new e.Color(.9,.7,.5)},uScale:{value:500}},vertexShader:"\n        varying vec3 \tvWorldPosition;\n\n        void main() {\n            vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n            vWorldPosition = worldPosition.xyz;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }",fragmentShader:"\n        uniform vec3    uSky;\n        uniform vec3    uHorizon;\n        uniform vec3    uGround;\n        uniform float   uScale;\n        varying vec3    vWorldPosition;\n\n        void main() {\n            float lowerGround =         0.0;\n            float h = normalize(vWorldPosition + lowerGround).y;\n\n            ///// Sky fade (brighten at horizon)\n            float skyFade = pow(vWorldPosition.y / (uScale * 0.25), 0.4);\n            skyFade = clamp(skyFade, 0.0, 1.0);\n            vec3 sky = mix(uHorizon, uSky, skyFade);\n\n            ///// Seperates ground and sky, solid horizon: clamp(h * uScale, 0.0, 1.0)\n            float blurHorizon =         0.05;\n            float compressHorizon =     5.0;\n            float skyMix = max(pow(max(h, 0.0), blurHorizon) * compressHorizon, 0.0);\n            skyMix = clamp(skyMix, 0.0, 1.0);\n            vec3 outColor = mix(uGround, sky, skyMix);\n\n            ///// Output Color\n            gl_FragColor = vec4(outColor, 1.0);\n        }"};const gt={defines:{},transparent:!0,depthTest:!1,depthWrite:!1,uniforms:{tDiffuse:{value:null},tDepth:{value:null},cameraNear:{value:.01},cameraFar:{value:1e3},weight:{value:2}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }",fragmentShader:"\n        varying vec2 vUv;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float weight;\n\n        void main() {\n            vec4  diffuse   = texture2D(tDiffuse, vUv);\n            float depth     = texture2D(tDepth, vUv).x;\n\n            if (depth >= 0.999) {\n                gl_FragColor = texture2D(tDiffuse, vUv);        // discard unwritten depth\n            } else {\n                depth = ((depth - 0.5) * weight) + 0.5;         // add weight to objects in middle of camera range\n                gl_FragColor = vec4(vec3(1.0 - depth), 1.0);\n            }\n        }\n    "};class bt extends c{constructor(t){super(),this.camera=t,this.needsSwap=!1,this.copyPass=new u(h),this.copyPass.clear=!0,this.copyPass.clearDepth=!1,this.copyPass.renderToScreen=!1,this.copyPass.material.depthWrite=!1,this.depthMaterial=new e.ShaderMaterial(gt),this.fsQuad=new d(this.depthMaterial)}dispose(){this.depthMaterial.dispose()}render(e,t,r,i){const s=e.autoClear,a=e.autoClearColor,n=e.autoClearDepth,o=e.autoClearStencil;e.autoClear=!1,e.autoClearColor=!0,e.autoClearDepth=!1,e.autoClearStencil=!1;const l=this.fsQuad.material.uniforms;l.tDiffuse.value=r.texture,l.tDepth.value=r.depthTexture,l.cameraNear.value=this.camera.near,l.cameraFar.value=this.camera.far,l.weight.value=this.camera.isPerspectiveCamera?1:7,e.setRenderTarget(this.renderToScreen?null:t),this.fsQuad.render(e),this.copyPass.render(e,r,t,i),e.autoClear=s,e.autoClearColor=a,e.autoClearDepth=n,e.autoClearStencil=o}}const vt=new e.Color(16777215),wt=[],xt=new e.Color;let St,Mt;class kt extends c{constructor(t,r){super();const i=this;function s(t){let r=t.object;if(!r||!r.isObject3D)return;if(!r.visible)return;if(!G.allowSelection(r))return;let s=r.id,a=r.material,n=r.geometry,o=0;!0===a.morphTargets&&(!0===n.isBufferGeometry?o=n.morphAttributes?.position?.length>0?1:0:!0===n.isGeometry&&(o=n.morphTargets?.length>0?1:0));let l=r.isSkinnedMesh?1:0,h=o<<0|l<<1|(!0===r.isInstancedMesh?1:0)<<2|(a.side===e.FrontSide?1:0)<<3|(a.side===e.BackSide?1:0)<<4|(a.side===e.DoubleSide?1:0)<<5,c=wt[h];c||(c=new e.ShaderMaterial({defines:{USE_MAP:"",USE_UV:"",USE_LOGDEPTHBUF:""},vertexShader:e.ShaderChunk.meshbasic_vert,fragmentShader:"\n                        #include <common>\n\n                        varying vec2 vUv;\n\n                        uniform float opacity;\n                        uniform sampler2D map;\n                        uniform vec4 objectId;\n                        uniform float useMap;\n\n                        #include <logdepthbuf_pars_fragment>\n\n                        void main() {\n                            #include <logdepthbuf_fragment>\n\n                            gl_FragColor = objectId;\n\n                            if (opacity < 0.05) discard;\n\n                            if (useMap > 0.0) {\n                                vec4 texelColor = texture2D(map, vUv);\n                                if (texelColor.a < 0.05) discard;\n\n                                ///// To just render normal texture color:\n                                // gl_FragColor = texelColor;\n                            }\n                        }\n                    ",fog:!1,lights:!1}),c.side=a.side,c.skinning=l>0,c.morphTargets=o>0,c.uniforms={opacity:{value:1},map:{value:void 0},uvTransform:{value:new e.Matrix3},objectId:{value:[1,1,1,1]},useMap:{value:0}},wt[h]=c),c.uniforms.objectId.value=[(s>>24&255)/255,(s>>16&255)/255,(s>>8&255)/255,(255&s)/255],c.uniforms.useMap.value=0,a.map&&(c.uniforms.useMap.value=1,c.uniforms.map.value=a.map),c.uniformsNeedUpdate=!0,Mt.renderBufferDirect(i.camera,null,n,c,r,null)}this.scene=t,this.camera=r,this.overrideMaterial=void 0,this.clearColor=void 0,this.clearAlpha=0,this.clear=!1,this.clearDepth=!1,this.needsSwap=!1,this.renderDebugView=!1,this.needPick=!1,this.x=0,this.y=0,this.pickedId=-1,St=new e.Scene,St.onAfterRender=function(){const e=Mt.renderLists.get(i.scene,0);e.opaque.forEach(s),e.transmissive.forEach(s),e.transparent.forEach(s)},this.pickingTarget=new e.WebGLRenderTarget(1,1,{minFilter:e.NearestFilter,magFilter:e.NearestFilter,format:e.RGBAFormat,encoding:e.LinearEncoding}),this.pixelBuffer=new Uint8Array(4*this.pickingTarget.width*this.pickingTarget.height)}dispose(){this.pickingTarget.dispose()}render(e,t,r){if(!1===this.needPick&&!1===this.renderDebugView)return;Mt=e;const i=e.domElement.width,s=e.domElement.height;this.camera.setViewOffset(i,s,this.x,this.y,1,1);const a=e.getRenderTarget(),n=e.getClearAlpha();e.getClearColor(xt),e.setRenderTarget(this.pickingTarget),e.setClearColor(vt),e.clear(),e.render(St,this.camera),e.readRenderTargetPixels(this.pickingTarget,0,0,this.pickingTarget.width,this.pickingTarget.height,this.pixelBuffer),e.setRenderTarget(a),this.camera.clearViewOffset(),this.renderDebugView&&e.render(St,this.camera),e.setClearColor(xt,n),this.needPick&&(this.pickedId=(this.pixelBuffer[0]<<24)+(this.pixelBuffer[1]<<16)+(this.pixelBuffer[2]<<8)+this.pixelBuffer[3],this.needPick=!1)}renderPickScene(e,t){Mt=e;const r=e.getClearAlpha();e.getClearColor(xt),e.setClearColor(vt),e.clear(),e.render(St,t),e.setClearColor(xt,r)}}class Ct extends c{constructor(t,r,i,s){super(),this.renderScene=r,this.renderCamera=i,this.selectedObjects=void 0!==s?s:[],this.visibleEdgeColor=new e.Color(1,1,1),this.hiddenEdgeColor=new e.Color(.1,.04,.02),this.edgeGlow=0,this.usePatternTexture=!1,this.edgeThickness=1,this.edgeStrength=3,this.downSampleRatio=2,this.pulsePeriod=0,this._visibilityCache=new Map,this._materialCache=new Map,this._castShadowCache=new Map,this._receiveShadowCache=new Map,this.resolution=void 0!==t?new e.Vector2(t.x,t.y):new e.Vector2(256,256);const a=Math.round(this.resolution.x/this.downSampleRatio),n=Math.round(this.resolution.y/this.downSampleRatio);this.renderTargetMaskBuffer=new e.WebGLRenderTarget(this.resolution.x,this.resolution.y),this.renderTargetMaskBuffer.texture.name="OutlinePass.mask",this.renderTargetMaskBuffer.texture.generateMipmaps=!1,this.depthMaterial=new e.MeshDepthMaterial,this.depthMaterial.side=e.DoubleSide,this.depthMaterial.depthPacking=e.RGBADepthPacking,this.depthMaterial.blending=e.NoBlending,this.invisibleMaterial=new e.MeshBasicMaterial({visible:!1}),this.prepareMaskMaterial=this.getPrepareMaskMaterial(),this.prepareMaskMaterial.side=e.DoubleSide,this.prepareMaskMaterial.fragmentShader=function(e,t){const r=t.isPerspectiveCamera?"perspective":"orthographic";return e.replace(/DEPTH_TO_VIEW_Z/g,r+"DepthToViewZ")}(this.prepareMaskMaterial.fragmentShader,this.renderCamera),this.renderTargetDepthBuffer=new e.WebGLRenderTarget(this.resolution.x,this.resolution.y),this.renderTargetDepthBuffer.texture.name="OutlinePass.depth",this.renderTargetDepthBuffer.texture.generateMipmaps=!1,this.renderTargetMaskDownSampleBuffer=new e.WebGLRenderTarget(a,n),this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,this.renderTargetBlurBuffer1=new e.WebGLRenderTarget(a,n),this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",this.renderTargetBlurBuffer1.texture.generateMipmaps=!1,this.renderTargetBlurBuffer2=new e.WebGLRenderTarget(Math.round(a/2),Math.round(n/2)),this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",this.renderTargetBlurBuffer2.texture.generateMipmaps=!1,this.edgeDetectionMaterial=this.getEdgeDetectionMaterial(),this.renderTargetEdgeBuffer1=new e.WebGLRenderTarget(a,n),this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",this.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,this.renderTargetEdgeBuffer2=new e.WebGLRenderTarget(Math.round(a/2),Math.round(n/2)),this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",this.renderTargetEdgeBuffer2.texture.generateMipmaps=!1;this.separableBlurMaterial1=this.getSeperableBlurMaterial(4),this.separableBlurMaterial1.uniforms.texSize.value.set(a,n),this.separableBlurMaterial1.uniforms.kernelRadius.value=1,this.separableBlurMaterial2=this.getSeperableBlurMaterial(4),this.separableBlurMaterial2.uniforms.texSize.value.set(Math.round(a/2),Math.round(n/2)),this.separableBlurMaterial2.uniforms.kernelRadius.value=4,this.overlayMaterial=this.getOverlayMaterial(),void 0===h&&console.error("THREE.OutlinePass relies on CopyShader");const o=h;this.copyUniforms=e.UniformsUtils.clone(o.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new e.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:o.vertexShader,fragmentShader:o.fragmentShader,blending:e.NoBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new e.Color,this.oldClearAlpha=1,this.fsQuad=new d(null),this.tempPulseColor1=new e.Color,this.tempPulseColor2=new e.Color,this.textureMatrix=new e.Matrix4}dispose(){this.renderTargetMaskBuffer.dispose(),this.renderTargetDepthBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose(),this.invisibleMaterial.dispose(),this.depthMaterial.dispose(),this.prepareMaskMaterial.dispose(),this.edgeDetectionMaterial.dispose(),this.separableBlurMaterial1.dispose(),this.separableBlurMaterial2.dispose(),this.overlayMaterial.dispose(),this.materialCopy.dispose(),this.fsQuad.dispose()}setSize(e,t){this.renderTargetMaskBuffer.setSize(e,t),this.renderTargetDepthBuffer.setSize(e,t);let r=Math.round(e/this.downSampleRatio),i=Math.round(t/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(r,i),this.renderTargetBlurBuffer1.setSize(r,i),this.renderTargetEdgeBuffer1.setSize(r,i),this.separableBlurMaterial1.uniforms.texSize.value.set(r,i),r=Math.round(r/2),i=Math.round(i/2),this.renderTargetBlurBuffer2.setSize(r,i),this.renderTargetEdgeBuffer2.setSize(r,i),this.separableBlurMaterial2.uniforms.texSize.value.set(r,i)}changeVisibilityOfSelectedObjects(e){const t=this._visibilityCache;function r(r){r.isMesh&&(!0===e?r.visible=t.get(r.id):(t.set(r.id,r.visible),r.visible=e))}for(let e=0;e<this.selectedObjects.length;e++){this.selectedObjects[e].traverse(r)}}changeVisibilityOfNonSelectedObjects(e){const t=this,r=this._materialCache,i=this._visibilityCache,s=[];for(let e=0;e<this.selectedObjects.length;e++)this.selectedObjects[e].traverse((e=>{e.isMesh&&s.push(e)}));this.renderScene.traverse((a=>{if(!G.containsObject(s,a))if(!0===e)a.isMesh&&(a.material=r.get(a.id)),a.visible=i.get(a.id);else{let e=!1;a.traverse((t=>{G.containsObject(s,t)&&(e=!0)})),a.isMesh&&r.set(a.id,a.material),i.set(a.id,a.visible),e?a.isMesh&&(a.material=t.invisibleMaterial):a.visible=!1}}))}disableShadows(){const e=this._castShadowCache,t=this._receiveShadowCache;this.renderScene.traverse((r=>{e.set(r.id,r.castShadow),t.set(r.id,r.receiveShadow),r.castShadow=!1,r.receiveShadow=!1}))}enableShadows(){const e=this._castShadowCache,t=this._receiveShadowCache;this.renderScene.traverse((r=>{r.castShadow=e.get(r.id),r.receiveShadow=t.get(r.id)}))}updateTextureMatrix(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.renderCamera.projectionMatrix),this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)}render(e,t,r,i,s){if(this.selectedObjects.length>0){this.disableShadows(),e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();const t=e.autoClear,i=this.renderScene.overrideMaterial;e.autoClear=!1,s&&e.state.buffers.stencil.setTest(!1),e.setClearColor(16777215,1),this.changeVisibilityOfSelectedObjects(!1);const a=this.renderScene.background;if(this.renderScene.background=null,this.renderScene.overrideMaterial=this.depthMaterial,e.setRenderTarget(this.renderTargetDepthBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.changeVisibilityOfSelectedObjects(!0),this.updateTextureMatrix(),this.changeVisibilityOfNonSelectedObjects(!1),this.renderScene.overrideMaterial=this.prepareMaskMaterial,this.prepareMaskMaterial.uniforms.cameraNearFar.value.set(this.renderCamera.near,this.renderCamera.far),this.prepareMaskMaterial.uniforms.depthTexture.value=this.renderTargetDepthBuffer.texture,this.prepareMaskMaterial.uniforms.textureMatrix.value=this.textureMatrix,e.setRenderTarget(this.renderTargetMaskBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.renderScene.overrideMaterial=i,this.changeVisibilityOfNonSelectedObjects(!0),this.renderScene.background=a,this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,e.setRenderTarget(this.renderTargetMaskDownSampleBuffer),e.clear(),this.fsQuad.render(e),this.tempPulseColor1.copy(this.visibleEdgeColor),this.tempPulseColor2.copy(this.hiddenEdgeColor),this.pulsePeriod>0){const e=.625+.75*Math.cos(.01*performance.now()/this.pulsePeriod)/2;this.tempPulseColor1.multiplyScalar(e),this.tempPulseColor2.multiplyScalar(e)}this.fsQuad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.visibleEdgeColor.value=this.tempPulseColor1,this.edgeDetectionMaterial.uniforms.hiddenEdgeColor.value=this.tempPulseColor2,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=Ct.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,e.setRenderTarget(this.renderTargetBlurBuffer1),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=Ct.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=Ct.BlurDirectionX,e.setRenderTarget(this.renderTargetBlurBuffer2),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=Ct.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer2),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.patternTexture.value=this.patternTexture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,this.overlayMaterial.uniforms.usePatternTexture.value=this.usePatternTexture,s&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(r),this.fsQuad.render(e),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=t,this.enableShadows(),this._materialCache.clear(),this._castShadowCache.clear(),this._receiveShadowCache.clear(),this._visibilityCache.clear()}this.renderToScreen&&(this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=r.texture,e.setRenderTarget(null),this.fsQuad.render(e))}getPrepareMaskMaterial(){return new e.ShaderMaterial({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new e.Vector2(.5,.5)},textureMatrix:{value:null}},vertexShader:"\n                #include <morphtarget_pars_vertex>\n                #include <skinning_pars_vertex>\n                varying vec4 projTexCoord;\n                varying vec4 vPosition;\n                uniform mat4 textureMatrix;\n                void main() {\n                    #include <skinbase_vertex>\n                    #include <begin_vertex>\n                    #include <morphtarget_vertex>\n                    #include <skinning_vertex>\n                    #include <project_vertex>\n\n                    vPosition = mvPosition;\n\n                    vec4 worldPosition = vec4( transformed, 1.0 );\n                    #ifdef USE_INSTANCING\n                        worldPosition = instanceMatrix * worldPosition;\n                    #endif\n                    worldPosition = modelMatrix * worldPosition;\n\n                    projTexCoord = textureMatrix * worldPosition;\n                }",fragmentShader:"\n                #include <packing>\n                varying vec4 vPosition;\n                varying vec4 projTexCoord;\n                uniform sampler2D depthTexture;\n                uniform vec2 cameraNearFar;\n                void main() {\n                    float depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n                    float viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n                    float depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n                    gl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n                }"})}getEdgeDetectionMaterial(){return new e.ShaderMaterial({uniforms:{maskTexture:{value:null},texSize:{value:new e.Vector2(.5,.5)},visibleEdgeColor:{value:new e.Vector3(1,1,1)},hiddenEdgeColor:{value:new e.Vector3(1,1,1)}},vertexShader:"varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }",fragmentShader:"varying vec2 vUv;\n                uniform sampler2D maskTexture;\n                uniform vec2 texSize;\n                uniform vec3 visibleEdgeColor;\n                uniform vec3 hiddenEdgeColor;\n                void main() {\n                    vec2 invSize = 1.0 / texSize;\n                    vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n                    vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n                    vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n                    vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n                    vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n                    float diff1 = (c1.r - c2.r)*0.5;\n                    float diff2 = (c3.r - c4.r)*0.5;\n                    float d = length( vec2(diff1, diff2) );\n                    float a1 = min(c1.g, c2.g);\n                    float a2 = min(c3.g, c4.g);\n                    float visibilityFactor = min(a1, a2);\n                    vec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n                    gl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n                }"})}getSeperableBlurMaterial(t){return new e.ShaderMaterial({defines:{MAX_RADIUS:t},uniforms:{colorTexture:{value:null},texSize:{value:new e.Vector2(.5,.5)},direction:{value:new e.Vector2(.5,.5)},kernelRadius:{value:1}},vertexShader:"varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }",fragmentShader:"#include <common>\n                varying vec2 vUv;\n                uniform sampler2D colorTexture;\n                uniform vec2 texSize;\n                uniform vec2 direction;\n                uniform float kernelRadius;\n                float gaussianPdf(in float x, in float sigma) {\n                    return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n                }\n                void main() {\n                    vec2 invSize = 1.0 / texSize;\n                    float weightSum = gaussianPdf(0.0, kernelRadius);\n                    vec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n                    vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n                    vec2 uvOffset = delta;\n                    for( int i = 1; i <= MAX_RADIUS; i ++ ) {\n                        float w = gaussianPdf(uvOffset.x, kernelRadius);\n                        vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n                        vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n                        diffuseSum += ((sample1 + sample2) * w);\n                        weightSum += (2.0 * w);\n                        uvOffset += delta;\n                    }\n                    gl_FragColor = diffuseSum/weightSum;\n                }"})}getOverlayMaterial(){return new e.ShaderMaterial({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:"varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }",fragmentShader:"varying vec2 vUv;\n                uniform sampler2D maskTexture;\n                uniform sampler2D edgeTexture1;\n                uniform sampler2D edgeTexture2;\n                uniform sampler2D patternTexture;\n                uniform float edgeStrength;\n                uniform float edgeGlow;\n                uniform bool usePatternTexture;\n                void main() {\n                    vec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n                    vec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n                    vec4 maskColor = texture2D(maskTexture, vUv);\n                    vec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n                    float visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n                    vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n                    vec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n                    if(usePatternTexture)\n                        finalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n                    gl_FragColor = finalColor;\n                }",blending:e.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0})}}Ct.BlurDirectionX=new e.Vector2(1,0),Ct.BlurDirectionY=new e.Vector2(0,1);const Tt=new e.Color;class Bt extends c{constructor(t,r,i=16777215,s=.25){super(),this.scene=t,this.camera=r,this.selectedObjects=[],this.clearColor=void 0,this.clearAlpha=0,this.clear=!1,this.clearDepth=!1,this.needsSwap=!1,this.enabled=!0,this._visibilityCache=new Map,this._materialMap=new Map,this.overrideMaterial=new e.MeshBasicMaterial({color:16711680,wireframe:!0,opacity:s,transparent:!0,vertexColors:!1,depthTest:!0,depthWrite:!1,polygonOffset:!0,polygonOffsetFactor:1,alphaToCoverage:!1}),this.invisibleMaterial=new e.MeshBasicMaterial({visible:!1})}dispose(){this.overrideMaterial.dispose(),this.invisibleMaterial.dispose()}render(e,t,r){if(this.selectedObjects.length<1)return;e.getClearColor(Tt);const i=e.getClearAlpha(),s=e.autoClear,a=this.scene.overrideMaterial,n=this.scene.background;e.setClearColor(0,0),e.autoClear=!1,this.scene.overrideMaterial=this.overrideMaterial,this.scene.background=null,this.changeVisibilityOfNonSelectedObjects(!1),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen||!r?null:r),e.render(this.scene,this.camera),this.changeVisibilityOfNonSelectedObjects(!0),this._visibilityCache.clear(),e.setClearColor(Tt,i),e.autoClear=s,this.scene.overrideMaterial=a,this.scene.background=n}setObjects(e){Array.isArray(e)?this.selectedObjects=e:this.selectedObjects=[e]}setWireColor(e){this.overrideMaterial.color.setHex(e)}changeVisibilityOfNonSelectedObjects(e){const t=this,r=(this._visibilityCache,this._materialMap),i=[];function s(e){e.isMesh&&i.push(e)}for(let e=0;e<this.selectedObjects.length;e++){this.selectedObjects[e].traverse(s)}this.scene.traverse((function(s){s.isMesh&&!1===G.containsObject(i,s)&&(!0===e?s.material=r.get(s.id):(r.set(s.id,s.material),s.material=t.invisibleMaterial))}))}}const zt={defines:{USE_LOGDEPTHBUF:""},transparent:!0,uniforms:{map:{value:null},opacity:{value:1}},vertexShader:"\n        #include <common>\n        #include <logdepthbuf_pars_vertex>\n\n        varying vec2 vUv;\n\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n            #include <logdepthbuf_vertex>\n        }",fragmentShader:"\n        #include <common>\n\n        uniform sampler2D map;\n        uniform float opacity;\n        varying vec2 vUv;\n\n        #include <logdepthbuf_pars_fragment>\n\n        void main() {\n            #include <logdepthbuf_fragment>\n\n            vec4 texel = texture2D(map, vUv);\n            if (texel.a < 0.01) discard;\n\n            gl_FragColor = opacity * texel;\n        }"},Pt={defines:{USE_LOGDEPTHBUF:""},side:e.DoubleSide,blending:e.AdditiveBlending,transparent:!0,depthTest:!1,depthWrite:!1,polygonOffset:!0,polygonOffsetFactor:1,uniforms:{xrayColor:{value:new e.Color(8965375)}},vertexShader:"\n        #include <common>\n        #include <logdepthbuf_pars_vertex>\n\n        varying float intensity;\n\n        void main() {\n            // Normal calculation\n            vec3  norm      = normalize(normalMatrix * normal);\n            vec3  cam       = normalize(normalMatrix * cameraPosition);     // vec3(0.0, 0.0, 1.0);\n            float angle     = dot(norm, cam);                               // brighter from the front\n            float inverse   = 1.0 - abs(angle);                             // brighter from the sides\n\n            float scaled    = 0.5 + (inverse * 0.5);                        // scaled from 0.5 to 1.0\n\n            intensity       = mix(inverse, scaled, 1.0 - inverse);\n            intensity       = clamp(intensity, 0.5, 1.0);\n\n            // Shader chunk: #include <project_vertex>\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n            #include <logdepthbuf_vertex>\n        }",fragmentShader:"\n        #include <common>\n\n        uniform vec3 xrayColor;\n        varying float intensity;\n\n        #include <logdepthbuf_pars_fragment>\n\n        void main() {\n            #include <logdepthbuf_fragment>\n\n            float inverse   = 1.0 - intensity;\n            float opacity   = intensity * sqrt(intensity);\n\n            gl_FragColor = vec4(opacity * xrayColor, opacity);\n        }"},Ot=[new e.Vector2,new e.Vector2,new e.Vector2],Dt=[new e.Vector3,new e.Vector3,new e.Vector3],Et=new e.Vector3;class At{static addAttribute(t,r="color",i=3,s=0){if(!t.getAttribute(r)){let a=new Float32Array(t.attributes.position.count*i).fill(s);const n=new e.BufferAttribute(a,i,!0).setUsage(e.DynamicDrawUsage);t.setAttribute(r,n)}return t}static coloredMesh(e){if(!e.geometry)return e;if(!e.material)return e;let t=e.material;!0!==Array.isArray(t)&&(t=[e.material]);for(let e=0;e<t.length;e++)!0!==t[e].vertexColors&&(t[e].vertexColors=!0,t[e].needsUpdate=!0);return At.addAttribute(e.geometry,"color",3,1),e}static modelSize(t,r="max"){let i=new e.Vector3;return t.computeBoundingBox(),t.boundingBox.getSize(i),"max"===r?Math.max(i.x,i.y,i.z):Math.min(i.x,i.y,i.z)}static repeatTexture(e,t,r){if(e&&e.attributes&&e.attributes.uv&&e.attributes.uv.array){for(let i=0;i<e.attributes.uv.array.length;i+=2)e.attributes.uv.array[i+0]*=t,e.attributes.uv.array[i+1]*=r;e.attributes.uv.needsUpdate=!0}}static uvMapCube(t,r,i=!1){if(i&&null!==t.index){const e=t.toNonIndexed();t.dispose(),t=e}void 0===r&&(r=new e.Matrix4);let s=At.modelSize(t),a=s/2,n=new e.Box3(new e.Vector3(-a,-a,-a),new e.Vector3(a,a,a)),o=new e.Vector3;t.boundingBox.getCenter(o);const l=(new e.Matrix4).makeTranslation(-o.x,-o.y,-o.z),h=[];h.length=2*t.attributes.position.array.length/3;const c=t.attributes.position.array;if(t.index)for(let r=0;r<t.index.array.length;r+=3){const i=t.index.array[r+0],s=t.index.array[r+1],a=t.index.array[r+2];d(new e.Vector3(c[3*i+0],c[3*i+1],c[3*i+2]),new e.Vector3(c[3*s+0],c[3*s+1],c[3*s+2]),new e.Vector3(c[3*a+0],c[3*a+1],c[3*a+2])),h[2*i+0]=Ot[0].x,h[2*i+1]=Ot[0].y,h[2*s+0]=Ot[1].x,h[2*s+1]=Ot[1].y,h[2*a+0]=Ot[2].x,h[2*a+1]=Ot[2].y}else for(let r=0;r<t.attributes.position.array.length;r+=9){d(new e.Vector3(c[r+0],c[r+1],c[r+2]),new e.Vector3(c[r+3],c[r+4],c[r+5]),new e.Vector3(c[r+6],c[r+7],c[r+8]));const t=r/3,i=t+1,s=t+2;h[2*t+0]=Ot[0].x,h[2*t+1]=Ot[0].y,h[2*i+0]=Ot[1].x,h[2*i+1]=Ot[1].y,h[2*s+0]=Ot[2].x,h[2*s+1]=Ot[2].y}return void 0===t.attributes.uv&&t.addAttribute("uv",new e.Float32BufferAttribute(h,2)),t.attributes.uv.array=new Float32Array(h),t.attributes.uv.needsUpdate=!0,t;function d(t,a,o){t.applyMatrix4(l).applyMatrix4(r),a.applyMatrix4(l).applyMatrix4(r),o.applyMatrix4(l).applyMatrix4(r);const h=new e.Vector3;var c,d,u,p;if(c=h,d=t,u=a,p=o,Et.subVectors(d,u),c.subVectors(u,p),c.cross(Et).normalize(),Je.round(c,5),Ot[0].set(0,0,0),Ot[1].set(0,0,0),Ot[2].set(0,0,0),i){let e=h.z<0;e=e&&Math.abs(h.y)<.866,e=e&&Math.abs(h.x)<.866,e&&(Ot[0].x=(t.x-n.min.x)/s,Ot[0].y=(t.y-n.min.y)/s,Ot[1].x=(a.x-n.min.x)/s,Ot[1].y=(a.y-n.min.y)/s,Ot[2].x=(o.x-n.min.x)/s,Ot[2].y=(o.y-n.min.y)/s)}else h.x=Math.abs(h.x),h.y=Math.abs(h.y),h.z=Math.abs(h.z),h.y>h.x&&h.y>h.z?(Ot[0].x=(t.x-n.min.x)/s,Ot[0].y=(n.max.z-t.z)/s,Ot[1].x=(a.x-n.min.x)/s,Ot[1].y=(n.max.z-a.z)/s,Ot[2].x=(o.x-n.min.x)/s,Ot[2].y=(n.max.z-o.z)/s):h.x>h.y&&h.x>h.z?(Ot[0].x=(t.z-n.min.z)/s,Ot[0].y=(t.y-n.min.y)/s,Ot[1].x=(a.z-n.min.z)/s,Ot[1].y=(a.y-n.min.y)/s,Ot[2].x=(o.z-n.min.z)/s,Ot[2].y=(o.y-n.min.y)/s):h.z>h.y&&h.z>h.x&&(Ot[0].x=(t.x-n.min.x)/s,Ot[0].y=(t.y-n.min.y)/s,Ot[1].x=(a.x-n.min.x)/s,Ot[1].y=(a.y-n.min.y)/s,Ot[2].x=(o.x-n.min.x)/s,Ot[2].y=(o.y-n.min.y)/s)}}static uvMapSphere(t,r="uv"){if(null!==t.index){const e=t.toNonIndexed();e.uuid=t.uuid,e.name=t.name,t.dispose(),t=e}const i=[];i.length=2*t.attributes.position.array.length/3;const s=!(void 0===t.attributes.uv);s||t.addAttribute("uv",new e.Float32BufferAttribute(i,2));const a=!s||"u"===r||"uv"===r,n=!s||"v"===r||"uv"===r,o=t.attributes.position.array;for(let e=0;e<t.attributes.position.array.length;e+=9){Dt[0].set(o[e+0],o[e+1],o[e+2]),Dt[1].set(o[e+3],o[e+4],o[e+5]),Dt[2].set(o[e+6],o[e+7],o[e+8]);let t=e/3;for(let e=0;e<3;e++){const r=h(Dt[e]);if(0===r.theta&&(0===r.phi||r.phi===Math.PI)){const e=0===r.phi?"1":"0";r.theta=h(Dt[e]).theta}l(r,t,e),t++}let r=!1;if(Math.abs(Ot[0].x-Ot[1].x)>.75&&(r=!0),Math.abs(Ot[0].x-Ot[2].x)>.75&&(r=!0),Math.abs(Ot[1].x-Ot[0].x)>.75&&(r=!0),Math.abs(Ot[1].x-Ot[2].x)>.75&&(r=!0),Math.abs(Ot[2].x-Ot[0].x)>.75&&(r=!0),Math.abs(Ot[2].x-Ot[1].x)>.75&&(r=!0),r){let t=e/3;for(let e=0;e<3;e++){i[2*t]>.75&&(i[2*t]=0),t++}}}return t.attributes.uv.array=new Float32Array(i),t.attributes.uv.needsUpdate=!0,t;function l(r,s,o){const l={x:((h=r).theta+Math.PI)/(2*Math.PI),y:h.phi/Math.PI};var h;const c=new e.Vector2(1-l.x,1-l.y),d=2*s+0,u=2*s+1;i[d]=a?c.x:t.attributes.uv.array[d],i[u]=n?c.y:t.attributes.uv.array[u],Ot[o].x=i[d],Ot[o].y=i[u]}function h(e){let t=e.x*e.x+e.y*e.y+e.z*e.z,r=Math.sqrt(t);return{r:r,theta:Math.atan2(e.z,e.x),phi:Math.acos(e.y/r)}}}}let jt;class Rt{static offscreenRenderer(t=512,r=512){return void 0===jt&&(jt=new e.WebGLRenderer({alpha:!0})),jt.setClearColor(16777215,0),jt.setSize(t,r,!1),jt}static renderGeometryToCanvas(t,r,i=16777215){const s=new e.Scene;s.add(new e.HemisphereLight(16777215,2105376,1.5));const a=new e.PerspectiveCamera(50,t.width/t.height);a.position.set(0,0,1);const n=new e.MeshStandardMaterial({color:i}),o=new e.Mesh(r,n);s.add(o),B.fitCameraToObject(a,o);const l=Rt.offscreenRenderer(t.width,t.height);l.render(s,a),n.dispose();const h=t.getContext("2d");h&&(h.clearRect(0,0,t.width,t.height),h.drawImage(l.domElement,0,0,t.width,t.height))}static renderTextureToCanvas(t,r){const i=new e.Scene,s=new e.OrthographicCamera(-1,1,1,-1,0,1),a=new e.MeshBasicMaterial({map:r,alphaTest:!0}),n=new e.PlaneGeometry(2,2),o=new e.Mesh(n,a);i.add(o);const l=r.image,h=Rt.offscreenRenderer(l.width,l.height);h.render(i,s),a.dispose();const c=t.getContext("2d");if(c){let e,r,i,s,a;l.width/l.height<t.width/t.height?(s=l.height>t.height?t.height:l.height,a=Math.min(1,t.height/l.height),i=l.width*a):(i=l.width>t.width?t.width:l.width,a=Math.min(1,t.width/l.width),s=l.height*a),e=(t.width-i)/2,r=(t.height-s)/2,c.clearRect(0,0,t.width,t.height),c.drawImage(h.domElement,0,0,l.width,l.height,e,r,i,s)}}}const Ft=new e.Vector2(1,1);class Vt{init(t){let r;switch(t.style){case"perspective":this._tanFOV=Math.tan(Math.PI/180*t.fov/2),this._windowHeight=t.fixedSize?1e3:0,r=new e.PerspectiveCamera(t.fov,1,t.nearPersp,t.farPersp);break;case"orthographic":r=new e.OrthographicCamera(t.left,t.right,t.top,t.bottom,t.nearOrtho,t.farOrtho);break;default:console.error(`Camera.init: Invalid camera type '${t.style}'`)}r&&r.isCamera?(r.position.set(0,0,5),r.lookAt(0,0,0)):console.log("Error with camera!"),this.backend=r,this.data=t,this.style=t.style}dispose(){}enable(){this.entity&&this.backend&&this.entity.add(this.backend)}disable(){this.entity&&this.backend&&this.entity.remove(this.backend)}updateProjectionMatrix(){if(window.getRenderer()&&this.backend&&this.backend.isCamera){window.getRenderer().getSize(Ft);let e=Ft.x,t=Ft.y;if(this.backend.isPerspectiveCamera)this.data.fixedSize&&(this.backend.fov=360/Math.PI*Math.atan(this._tanFOV*(t/this._windowHeight))),this.backend.aspect=e/t;else if(this.backend.isOrthographicCamera){let r=1,i=1;this.backend.left=-e/r/2,this.backend.right=e/r/2,this.backend.top=t*i/2,this.backend.bottom=-t*i/2}this.backend.updateProjectionMatrix()}}toJSON(){let e=this.defaultData("style",this.style);for(let t in e)void 0!==this.data[t]&&(e[t]=this.data[t]);if(this.backend)for(let t in e){let r=this.backend[t];void 0!==r&&(e[t]=r)}return e}}Vt.config={schema:{style:{type:"select",default:"perspective",select:["perspective","orthographic"]},nearPersp:{type:"number",default:1,if:{style:["perspective"]}},farPersp:{type:"number",default:1e5,if:{style:["perspective"]}},nearOrtho:{type:"number",default:-5e4,if:{style:["orthographic"]}},farOrtho:{type:"number",default:5e4,if:{style:["orthographic"]}},fov:{type:"number",default:58.1,if:{style:["perspective"]}},fixedSize:{type:"boolean",default:!0,if:{style:["perspective"]}},left:{type:"number",default:-1,if:{style:["orthographic"]}},right:{type:"number",default:1,if:{style:["orthographic"]}},top:{type:"number",default:1,if:{style:["orthographic"]}},bottom:{type:"number",default:-1,if:{style:["orthographic"]}}},icon:"",color:"#4B4886"},Z.register("camera",Vt);class _t{init(t){if(this.backend&&this.backend.isBufferGeometry&&(this.backend.dispose(),this.backend=void 0),t.isBufferGeometry){const e=t.uuid;X.addGeometry(t),(t=this.defaultData("style","asset")).asset=e}let i;switch(t.style){case"asset":let s=X.getGeometry(t.asset);s&&s.isBufferGeometry&&(i=s.clone());break;case"box":i=new e.BoxGeometry(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments);break;case"capsule":let a=z.clamp(t.radiusTop,.1,t.height)/1.5,n=z.clamp(t.radiusBottom,.1,t.height)/1.5,o=t.height/1.5;i=new Ke(a,n,o,t.radialSegments,t.heightSegments,t.capSegments,t.capSegments,t.thetaStart,t.thetaLength),i=At.uvMapSphere(i,"v");break;case"circle":i=new e.CircleGeometry(t.radius,t.segments,t.thetaStart,t.thetaLength);break;case"cone":i=new Ze(0,t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength);break;case"cylinder":i=new Ze(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength);break;case"lathe":let l=(new r).parse('\n                    <g transform="matrix(1,0,0,1,-62,77.5)">\n                        <path d="M125,59C151.284,141.301 106.947,164.354 84,158L83,263C100.017,285.361 110.282,295.752 143,298" style="fill:none;stroke:black;stroke-width:1px;"/>\n                    </g>\n                '),h=l.paths[Object.keys(l.paths)[0]],c=r.createShapes(h)[0].extractPoints(30);const d=[];for(let t=c.shape.length-1;t>=0;t--)d.push(new e.Vector2(.005*c.shape[t].x,-.005*c.shape[t].y));i=new e.LatheGeometry(d,t.segments,0,t.phiLength),i.center();break;case"plane":i=new e.PlaneGeometry(t.width,t.height,t.widthSegments,t.heightSegments);break;case"platonicSolid":switch(t.polyhedron){case"dodecahedron":default:i=new e.DodecahedronGeometry(t.radius,t.detail);break;case"icosahedron":i=new e.IcosahedronGeometry(t.radius,t.detail);break;case"octahedron":i=new e.OctahedronGeometry(t.radius,t.detail);break;case"tetrahedron":i=new e.TetrahedronGeometry(t.radius,t.detail)}break;case"ring":i=new e.RingGeometry(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength);break;case"roundedBox":i=new p(t.width,t.height,t.depth,t.segments,t.radius);break;case"shape":t.shapes??new e.Shape([new e.Vector2(64,8),new e.Vector2(0,64),new e.Vector2(-64,8),new e.Vector2(-32,-64),new e.Vector2(32,-64)]);const u=[];u.push(new e.Vector2(610,320)),u.push(new e.Vector2(450,300)),u.push(new e.Vector2(392,392)),u.push(new e.Vector2(266,438)),u.push(new e.Vector2(190,570)),u.push(new e.Vector2(190,600)),u.push(new e.Vector2(160,620)),u.push(new e.Vector2(160,650)),u.push(new e.Vector2(180,640)),u.push(new e.Vector2(165,680)),u.push(new e.Vector2(150,670)),u.push(new e.Vector2(90,737)),u.push(new e.Vector2(80,795)),u.push(new e.Vector2(50,835)),u.push(new e.Vector2(64,870)),u.push(new e.Vector2(60,945)),u.push(new e.Vector2(300,945)),u.push(new e.Vector2(300,743)),u.push(new e.Vector2(600,473)),u.push(new e.Vector2(626,425)),u.push(new e.Vector2(600,370)),u.push(new e.Vector2(610,320));for(let e=0;e<u.length;e++)u[e].multiplyScalar(.001);new e.Shape(u);const m=new e.Shape;m.absarc(0,0,1);let f={depth:t.depth,curveSegments:t.curveSegments,steps:t.steps,bevelEnabled:t.bevelEnabled,bevelThickness:t.bevelThickness,bevelSize:t.bevelSize,bevelSegments:t.bevelSegments};i=new e.ExtrudeGeometry(m,f),i.center();break;case"sphere":i=new e.SphereGeometry(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength);break;case"torus":i=new e.TorusGeometry(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc);break;case"torusKnot":i=new e.TorusKnotGeometry(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q);break;case"tube":const y=(new e.Shape).moveTo(25,25).bezierCurveTo(25,25,20,0,0,0).bezierCurveTo(-30,0,-30,35,-30,35).bezierCurveTo(-30,55,-10,77,25,95).bezierCurveTo(60,77,80,55,80,35).bezierCurveTo(80,35,80,0,50,0).bezierCurveTo(35,0,25,25,25,25).getPoints(256),g=[];for(let t=0;t<y.length;t+=2){const r=y[t],i=y[t+1]||r;g.push(new e.LineCurve3(new e.Vector3(.01*r.x,-.01*r.y,0),new e.Vector3(.01*i.x,-.01*i.y,0)))}const b=new e.CurvePath;b.curves.push(...g),i=new e.TubeGeometry(b,t.tubularSegments,t.radius,t.radialSegments,t.closed),i.center();break;default:console.error("Geometry: Invalid geometry type "+t.style)}if(i&&i.isBufferGeometry){const e=i.constructor.name,r={split:t.edgeSplit??!1,uvSmooth:t.uvSmooth??!1,flatOnly:t.flatOnly??!1,preserveEdges:!1,maxTriangles:5e4};if(r.split||t.subdivide>0){let e=m.modify(i,t.subdivide,r);e&&(i.dispose(),i=e)}if("cube"===t.textureMapping?i=At.uvMapCube(i):"sphere"===t.textureMapping&&(i=At.uvMapSphere(i)),1!==t.wrapS||1!==t.wrapT){const e=Math.max(t.wrapS,0),r=Math.max(t.wrapT,0);At.repeatTexture(i,e,r)}i.name=e}this.backend=i,this.data=t,this.style=t.style}dispose(){this.backend&&this.backend.dispose&&this.backend.dispose()}enable(){if(!this.entity)return;const e=this.entity.getComponent("material");void 0!==e&&e.refreshMesh()}disable(){if(!this.entity)return;const e=this.entity.getComponent("material");void 0!==e&&e.refreshMesh()}toJSON(){let e=this.defaultData("style",this.style);for(let t in e)void 0!==this.data[t]&&(e[t]=this.data[t]);return e}}_t.config={schema:{style:[{type:"select",default:"box",select:["asset","box","capsule","circle","cone","cylinder","lathe","plane","platonicSolid","ring","roundedBox","shape","sphere","torus","torusKnot","tube"]}],asset:{type:"asset",if:{style:["asset"]}},styleDivider:{type:"divider"},polyhedron:[{type:"select",default:"dodecahedron",select:["dodecahedron","icosahedron","octahedron","tetrahedron"],if:{style:["platonicSolid"]}}],points:{type:"shape",alias:"points",default:null,if:{style:["lathe"]}},shapes:{type:"shape",alias:"shape",default:null,if:{style:["shape"]}},path:{type:"shape",alias:"curve",default:null,if:{style:["tube"]}},depth:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","roundedBox"]}},{type:"number",default:.4,min:0,step:"grid",if:{style:["shape"]}}],height:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","capsule","cone","cylinder","plane","roundedBox"]}}],width:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","plane","roundedBox"]}}],widthSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box","plane"]}},{type:"int",default:24,min:4,max:1024,if:{style:["sphere"]}}],heightSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box","plane"]}},{type:"int",default:1,min:1,max:1024,if:{style:["cone","cylinder"]}},{type:"int",default:24,min:1,max:1024,if:{style:["sphere"]}}],depthSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box"]}}],radius:[{type:"number",default:.25,min:0,step:.01,if:{style:["roundedBox"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["circle","cone","platonicSolid","sphere"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["torus"]}},{type:"number",default:.4,min:0,step:.01,if:{style:["torusKnot"]}},{type:"number",default:.2,min:0,step:.01,if:{style:["tube"]}}],radiusTop:[{type:"number",default:.5,min:0,step:.01,if:{style:["capsule"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["cylinder"]}}],radiusBottom:[{type:"number",default:.5,min:0,step:.01,if:{style:["capsule"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["cylinder"]}}],segments:[{type:"int",default:36,min:3,max:64,if:{style:["circle"]}},{type:"int",default:16,min:1,max:64,if:{style:["lathe"]}},{type:"int",default:4,min:1,max:10,if:{style:["roundedBox"]}}],thetaLength:[{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["circle","ring"]}},{type:"angle",default:2*Math.PI,min:0,max:360,promode:!0,if:{style:["capsule","cone","cylinder"]}},{type:"angle",default:Math.PI,min:0,max:720,promode:!0,if:{style:["sphere"]}}],thetaStart:[{type:"angle",default:0,if:{style:["circle","ring","sphere"]}},{type:"angle",default:0,promode:!0,if:{style:["capsule","cone","cylinder"]}}],phiLength:{type:"angle",default:2*Math.PI,max:360,if:{style:["lathe","sphere"]}},phiStart:{type:"angle",default:0,if:{style:["sphere"]}},capSegments:{type:"int",default:6,min:1,max:36,if:{style:["capsule"]}},radialSegments:[{type:"int",default:24,min:2,max:64,if:{style:["capsule","cone","cylinder","torus","torusKnot","tube"]}}],openEnded:{type:"boolean",default:!1,if:{style:["cone","cylinder"]}},detail:{type:"slider",default:0,min:0,max:9,step:1,precision:0,if:{style:["platonicSolid"]}},innerRadius:{type:"number",default:.25,min:0,step:.01,if:{style:["ring"]}},outerRadius:{type:"number",default:.5,min:0,step:.01,if:{style:["ring"]}},phiSegments:{type:"int",default:10,min:1,max:64,promode:!0,if:{style:["ring"]}},thetaSegments:{type:"int",default:36,min:3,max:128,if:{style:["ring"]}},steps:{type:"int",alias:"Depth Segments",default:8,min:1,max:128,promode:!0,if:{style:["shape"]}},bevelEnabled:{type:"boolean",alias:"bevel",default:!0,if:{style:["shape"]}},bevelThickness:{type:"number",default:.2,min:0,step:.01,if:{style:["shape"],bevelEnabled:[!0]}},bevelSize:{type:"number",default:.2,min:0,step:.01,if:{style:["shape"],bevelEnabled:[!0]}},bevelSegments:{type:"int",default:4,min:0,max:64,promode:!0,if:{style:["shape"],bevelEnabled:[!0]}},curveSegments:{type:"int",default:16,min:1,max:128,promode:!0,if:{style:["shape"]}},tube:[{type:"number",default:.2,min:0,step:.01,if:{style:["torus"]}},{type:"number",default:.1,min:0,step:.01,if:{style:["torusKnot"]}}],tubularSegments:[{type:"int",default:32,min:3,max:128,if:{style:["torus"]}},{type:"int",default:64,min:3,max:128,if:{style:["torusKnot"]}},{type:"int",default:64,min:2,if:{style:["tube"]}}],arc:{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["torus"]}},p:{type:"number",default:2,min:1,max:128,if:{style:["torusKnot"]}},q:{type:"number",default:3,min:1,max:128,if:{style:["torusKnot"]}},closed:{type:"boolean",default:!0,if:{style:["tube"]}},modifierDivider:{type:"divider"},subdivide:{type:"slider",default:0,min:0,max:5,step:1,precision:0},edgeSplit:{type:"boolean",default:!1,hide:{subdivide:[0]}},uvSmooth:{type:"boolean",default:!1,promode:!0,hide:{subdivide:[0]}},flatOnly:{type:"boolean",default:!1,promode:!0,hide:{subdivide:[0]}},textureDivider:{type:"divider"},textureMapping:[{type:"select",default:"cube",select:["none","cube","sphere"],if:{style:["shape"]}},{type:"select",default:"none",select:["none","cube","sphere"],if:{style:["asset","box","capsule","circle","cone","cylinder","lathe","plane","platonicSolid","ring","roundedBox","sphere","torus","torusKnot","tube"]}}],wrapS:{type:"number",alias:"wrapX",default:1,min:0,step:.2,precision:2},wrapT:{type:"number",alias:"wrapY",default:1,min:0,step:.2,precision:2}},icon:"",color:"rgb(255, 113, 0)",dependencies:["material"]},Z.register("geometry",_t);class Gt{init(t){let r;switch(t.style){case"ambient":r=new e.AmbientLight(t.color,t.intensity);break;case"directional":r=new e.DirectionalLight(t.color,t.intensity),r.castShadow=!0,r.shadow.mapSize.width=2048,r.shadow.mapSize.height=2048;const i=5;r.shadow.camera.near=1,r.shadow.camera.far=500,r.shadow.camera.left=-i,r.shadow.camera.right=i,r.shadow.camera.top=i,r.shadow.camera.bottom=-i,r.shadow.camera.updateProjectionMatrix(),r.shadow.bias=t.shadowBias;break;case"hemisphere":r=new e.HemisphereLight(t.color,t.groundColor,t.intensity);break;case"point":r=new e.PointLight(t.color,t.intensity,t.distance,t.decay),r.castShadow=!0,r.shadow.bias=t.shadowBias;break;case"spot":r=new e.SpotLight(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay),r.castShadow=!0,r.shadow.bias=t.shadowBias;break;default:console.error(`Light: Invalid light type '${t.style}'`)}r&&r.isLight||console.log("Error with light!"),this.backend=r,this.data=t,this.style=t.style}dispose(){this.backend&&this.backend.isLight&&this.backend.dispose()}enable(){this.entity&&this.backend&&this.entity.add(this.backend)}disable(){this.entity&&this.backend&&this.entity.remove(this.backend)}toJSON(){let e=this.defaultData("style",this.style);for(let t in e)void 0!==this.data[t]&&(e[t]=this.data[t]);if(this.backend){for(let t in e){let r=this.backend[t];void 0!==r&&(r&&r.isColor?e[t]=r.getHex():e[t]=r)}this.backend.shadow&&(e.shadowBias=this.backend.shadow.bias)}return e}}Gt.config={schema:{style:{type:"select",default:"ambient",select:["ambient","directional","hemisphere","point","spot"]},styleDivider:{type:"divider"},color:[{type:"color",default:16777215,if:{style:["ambient","directional","point","spot"]}},{type:"color",alias:"skyColor",default:8454143,if:{style:["hemisphere"]}}],groundColor:{type:"color",default:8413248,if:{style:["hemisphere"]}},intensity:[{type:"slider",default:.25,step:.1,min:0,max:2,if:{style:["ambient"]}},{type:"slider",default:.5,step:.1,min:0,max:2,if:{style:["hemisphere"]}},{type:"slider",default:1,step:.1,min:0,max:2,if:{style:["directional"]}},{type:"slider",default:1,step:.1,min:0,max:2,if:{style:["point","spot"]}}],distance:{type:"number",default:0,if:{style:["point","spot"]}},decay:{type:"number",default:1,if:{style:["point","spot"]}},angle:{type:"number",default:Math.PI/3,unit:"°",if:{style:["spot"]}},penumbra:{type:"number",default:0,if:{style:["spot"]}},shadowBias:{type:"number",default:0,precision:6,promode:!0,if:{style:["directional","point","spot"]}}},icon:"",color:"#222222"},Z.register("light",Gt);const Lt=["NoBlending","NormalBlending","AdditiveBlending","SubstractiveBlending","MultiplyBlending","CustomBlending"],Ut=["FrontSide","BackSide","DoubleSide"];class Nt{init(t){this.backend&&this.backend.isMaterial&&(this.backend.dispose(),this.backend=void 0);const r={};if(t.isMaterial){const e=t.uuid;X.addMaterial(t),(t=this.defaultData("style","asset")).asset=e}else{for(const e in t){const i=t[e];r[e]=i;let s=Nt.config.schema[e];if(P.isIterable(s)&&s.length>0&&(s=s[0]),i&&s&&"map"===s.type)if(i.isTexture)X.addTexture(i);else{const t=X.getTexture(i);t&&!0===t.isTexture?r[e]=t:r[e]=null}}delete r.base,delete r.style,delete r.edgeSize,delete r.gradientSize,delete r.premultiplyAlpha,"string"==typeof r.blending&&(r.blending=Lt.indexOf(r.blending)),"string"==typeof r.side&&(r.side=Ut.indexOf(r.side)),"BasicDepthPacking"===r.depthPacking&&(r.depthPacking=e.BasicDepthPacking),"RGBADepthPacking"===r.depthPacking&&(r.depthPacking=e.RGBADepthPacking)}let i;switch(t.style){case"asset":let s=X.getMaterial(t.asset);s&&s.isMaterial&&(i=s.clone());break;case"basic":i=new e.MeshBasicMaterial(r);break;case"depth":i=new e.MeshDepthMaterial(r);break;case"lambert":i=new e.MeshLambertMaterial(r);break;case"matcap":i=new e.MeshMatcapMaterial(r);break;case"normal":i=new e.MeshNormalMaterial(r);break;case"phong":i=new e.MeshPhongMaterial(r);break;case"physical":i=new e.MeshPhysicalMaterial(r);break;case"points":i=new e.PointsMaterial(r);break;case"shader":i=new e.ShaderMaterial(r);break;case"standard":i=new e.MeshStandardMaterial(r);break;case"toon":i=new e.MeshToonMaterial(r),t.gradientSize=Math.min(Math.max(t.gradientSize,1),16);const a=getRenderer().capabilities.isWebGL2?e.RedFormat:e.LuminanceFormat,n=new Uint8Array(t.gradientSize+2);for(let e=0;e<=n.length;e++)n[e]=e/n.length*256;i.gradientMap=new e.DataTexture(n,n.length,1,a),i.gradientMap.needsUpdate=!0;break;default:console.error(`Material: Invalid material type '${t.style}'`)}i&&i.isMaterial||console.log("Error with material!"),this.backend=i,this.data=t,this.style=t.style}dispose(){this.backend&&this.backend.dispose&&this.backend.dispose()}enable(){this.refreshMesh()}disable(){this.refreshMesh()}refreshMesh(){if(this.entity&&this.mesh&&this.entity.remove(this.mesh),!0!==this.enabled)return;if(!this.backend||!this.backend.isMaterial)return;const t=this.backend.clone();!function(t,r={style:"basic",premultiplyAlpha:!0}){if(!t||!t.isMaterial)return;let i=r&&1===r.opacity&&void 0===r.map;t.transparent=!i,t.alphaTest=.01,t.polygonOffset=!0,t.polygonOffsetFactor=1,t.onBeforeCompile=function(i){"toon"===r.style&&(i.uniforms=e.UniformsUtils.merge([i.uniforms,{uBitDepth:{value:r.gradientSize??4},uEdgeSize:{value:r.edgeSize??6},uTextureWidth:{value:100},uTextureHeight:{value:100}}]),t.map&&t.map.isTexture&&(i.uniforms.uTextureWidth.value=t.map.image.width,i.uniforms.uTextureHeight.value=t.map.image.height),i.fragmentShader=i.fragmentShader.replace("#include <common>",["#include <common>","","uniform float uBitDepth;","uniform float uEdgeSize;","uniform float uTextureWidth;","uniform float uTextureHeight;","","vec3 rgbToHsv(vec3 c) {","   vec4  K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);","   vec4  p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));","   vec4  q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));","   float d = q.x - min(q.w, q.y);","   float e = 1.0e-10;","   return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);","}","vec3 hsvToRgb(vec3 c) {","   vec4  K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);","   vec3  p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);","   return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","","float avgIntensity(vec4 pix) {","   return (pix.r + pix.g + pix.b) / 3.0;","}"].join("\n")),i.fragmentShader=i.fragmentShader.replace("#include <color_fragment>",["#include <color_fragment>","vec3 original_color = diffuseColor.rgb;","vec3 v_hsv = rgbToHsv(original_color.rgb);","float amt = 1.0 / (uBitDepth + 8.0);","float hueIncrease = 1.05;","float satIncrease = 1.10;","float vibIncrease = 1.75;","v_hsv.x = clamp(amt * (floor(v_hsv.x / amt) * hueIncrease), 0.0, 1.0);","v_hsv.y = clamp(amt * (floor(v_hsv.y / amt) * satIncrease), 0.0, 1.0);","v_hsv.z = clamp(amt * (floor(v_hsv.z / amt) * vibIncrease), 0.0, 1.0);","#ifdef USE_MAP","   vec2 coords = vUv;","   float dxtex = 1.0 / uTextureWidth;","   float dytex = 1.0 / uTextureHeight;","   float edge_thres  = 0.15;","   float edge_thres2 = uEdgeSize;","   float pix[9];","   int   k = -1;","   float delta;","   for (int i = -1; i < 2; i++) {","       for (int j = -1; j < 2; j++) {","           k++;","           vec2 sampleCoords = vec2(coords.x + (float(i) * dxtex), coords.y + (float(j) * dytex));","           vec4 texSample = texture2D(map, sampleCoords);","           pix[k] = avgIntensity(texSample);","       }","   }","   delta = (abs(pix[1] - pix[7]) + abs(pix[5] - pix[3]) + abs(pix[0] - pix[8]) + abs(pix[2] - pix[6]) ) / 4.0;","   float edg = clamp(edge_thres2 * delta, 0.0, 1.0);","   vec3 v_rgb = (edg >= edge_thres) ? vec3(0.0) : hsvToRgb(v_hsv.xyz);","#else","   vec3 v_rgb = hsvToRgb(v_hsv.xyz);","#endif","diffuseColor.rgb = vec3(v_rgb.x, v_rgb.y, v_rgb.z);","float bit_depth = uBitDepth;","float bitR = floor(diffuseColor.r * bit_depth);","float bitG = floor(diffuseColor.g * bit_depth);","float bitB = floor(diffuseColor.b * bit_depth);","diffuseColor.rgb = vec3(bitR, bitG, bitB) / bit_depth;"].join("\n"))),r.premultiplyAlpha&&i.fragmentShader&&(i.fragmentShader=i.fragmentShader.replace("#include <premultiplied_alpha_fragment>","gl_FragColor.rgba *= gl_FragColor.a;"))},r.premultiplyAlpha&&(t.blending=e.CustomBlending,t.blendEquation=e.AddEquation,t.blendSrc=e.OneFactor,t.blendDst=e.OneMinusSrcAlphaFactor,t.blendEquationAlpha=e.AddEquation,t.blendSrcAlpha=e.OneFactor,t.blendDstAlpha=e.OneMinusSrcAlphaFactor);t.needsUpdate=!0}(t,this.toJSON());const r=this.entity.getComponent("geometry");if(!r)return;if(!r.enabled)return;const i=r.backend;if(!i)return;"points"===this.style?this.mesh=new e.Points(i,t):(this.mesh=new e.Mesh(i,t),this.mesh.castShadow=this.entity.castShadow,this.mesh.receiveShadow=this.entity.receiveShadow),this.mesh.name=`Backend Object3D for ${this.entity.name}`;!0===this.backend.isMeshPhysicalMaterial&&this.backend.transmission>0&&(this.backend.envMap=hdrEquirect),this.backend.opacity<.05&&window.activeCamera&&window.editor&&window.editor.viewport&&activeCamera.uuid===editor.viewport.camera.uuid&&(t.map=null,t.opacity=.25,t.wireframe=!0,this.mesh.castShadow=!1),this.entity&&this.mesh&&this.entity.add(this.mesh)}toJSON(){let e=this.defaultData("style",this.style);for(let t in e)void 0!==this.data[t]&&(this.data[t]&&this.data[t].isTexture?e[t]=this.data[t].uuid:e[t]=this.data[t]);return e}}Nt.config={schema:{style:[{type:"select",default:"standard",promode:!0,select:["asset","basic","depth","lambert","matcap","normal","phong","physical","points","shader","standard","toon"]},{type:"select",default:"standard",select:["basic","points","standard","toon"]}],styleDivider:{type:"divider"},asset:{type:"asset",if:{style:["asset"]}},color:{type:"color",if:{style:["basic","lambert","matcap","phong","physical","points","standard","toon"]}},emissive:{type:"color",default:0,if:{style:["lambert","phong","physical","standard","toon"]}},emissiveIntensity:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["lambert","phong","physical","standard","toon"]}},opacity:{type:"slider",default:1,min:0,max:1,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","points","standard","toon"]}},depthTest:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard","toon"]}},depthWrite:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard","toon"]}},flatShading:{type:"boolean",default:!1,if:{style:["phong","physical","standard","normal","matcap"]}},premultiplyAlpha:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","points","standard","toon"]}},wireframe:{type:"boolean",default:!1,if:{style:["basic","depth","lambert","normal","phong","physical","standard","toon"]}},vertexColors:{type:"boolean",default:!1,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard","toon"]}},size:{type:"slider",default:.05,min:0,max:1,if:{style:["points"]}},sizeAttenuation:{type:"boolean",default:!0,if:{style:["points"]}},edgeSize:{type:"slider",default:6,min:0,max:10,step:1,precision:0,if:{style:["toon"]}},gradientSize:{type:"slider",default:4,min:1,max:16,step:1,precision:0,if:{style:["toon"]}},metalness:{type:"slider",default:.1,min:0,max:1,if:{style:["physical","standard"]}},roughness:{type:"slider",default:1,min:0,max:1,if:{style:["physical","standard"]}},specular:{type:"color",default:1118481,if:{style:["phong"]}},shininess:{type:"number",default:30,if:{style:["phong"]}},clearcoat:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},clearcoatRoughness:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},ior:{type:"slider",default:1.5,min:1,max:2,if:{style:["physical"]}},sheen:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},sheenRoughness:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},sheenColor:{type:"color",if:{style:["physical"]}},specularColor:{type:"color",promode:!0,if:{style:["physical"]}},specularIntensity:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["physical"]}},thickness:{type:"slider",default:0,min:0,max:5,if:{style:["physical"]}},transmission:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},depthPacking:{type:"select",default:"BasicDepthPacking",select:["BasicDepthPacking","RGBADepthPacking"],if:{style:["depth"]}},map:[{type:"map",if:{style:["basic","depth","lambert","matcap","phong","physical","standard","toon"]}},{type:"map",if:{style:["points"]}}],matcap:{type:"map",if:{style:["matcap"]}},alphaMap:{type:"map",promode:!0,if:{style:["basic","depth","lambert","matcap","phong","physical","points","standard","toon"]}},bumpMap:{type:"map",promode:!0,if:{style:["matcap","normal","phong","physical","standard","toon"]}},bumpScale:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["matcap","normal","phong","physical","standard","toon"]}},clearcoatNormalMap:{type:"map",promode:!0,if:{style:["physical"]}},clearcoatNormalScale:{type:"vector2",default:[1,1],promode:!0,if:{style:["physical"]}},displacementMap:{type:"map",promode:!0,if:{style:["depth","matcap","normal","phong","physical","standard","toon"]}},displacementScale:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["depth","matcap","normal","phong","physical","standard","toon"]}},emissiveMap:{type:"map",promode:!0,if:{style:["lambert","phong","physical","standard","toon"]}},metalnessMap:{type:"map",promode:!0,if:{style:["physical","standard"]}},roughnessMap:{type:"map",promode:!0,if:{style:["physical","standard"]}},specularMap:{type:"map",promode:!0,if:{style:["basic","lambert","phong"]}},thicknessMap:{type:"map",promode:!0,if:{style:["physical"]}},transmissionMap:{type:"map",promode:!0,if:{style:["physical"]}},aoMap:{type:"map",promode:!0,if:{style:["basic","lambert","phong","physical","standard","toon"]}},envMap:{type:"map",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},lightMap:{type:"map",promode:!0,if:{style:["basic","lambert","phong","physical","standard","toon"]}},normalMap:{type:"map",if:{style:["matcap","normal","phong","physical","standard","toon"]}},side:{type:"select",default:"FrontSide",select:Ut,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard","toon"]}}},icon:"",color:"rgb(165, 243, 0)",dependencies:["geometry"]},Z.register("material",Nt);class It{init(t){this.backend=t.isObject3D?t:new e.Object3D,this.backend.traverse((e=>{e.castShadow=this.entity.castShadow})),this.backend.traverse((e=>{e.receiveShadow=this.entity.receiveShadow}))}dispose(){}enable(){this.entity&&this.backend&&this.entity.add(this.backend)}disable(){this.entity&&this.backend&&this.entity.remove(this.backend)}toJSON(){}}It.config={multiple:!0,icon:"",color:"#F7DB63"},Z.register("mesh",It),"undefined"!=typeof window&&(window.__ONSIGHT__?console.warn("Multiple instances of Onsight being imported"):window.__ONSIGHT__="0.0.3");export{S as APP_STATES,be as App,X as AssetManager,g as BACKEND3D,ht as BasicLine,dt as BasicWireBox,pt as BasicWireframe,M as CAMERA_SCALE,k as CAMERA_START_DISTANCE,C as CAMERA_START_HEIGHT,B as CameraUtils,Ke as CapsuleGeometry,we as ColorEye,Z as ComponentManager,Ze as CylinderGeometry,bt as DepthPass,gt as DepthShader,x as ENTITY_FLAGS,b as ENTITY_TYPES,pe as Entity3D,ve as EntityPool,ye as EntityUtils,ct as FatLine,ut as FatWireBox,mt as FatWireframe,At as GeometryUtils,kt as GpuPickerPass,ft as HelperObject,z as Maths,f as NAME,ue as Object3D,G as ObjectUtils,Ct as OutlinePass,et as PrismGeometry,ge as Project,y as REVISION,Rt as RenderUtils,v as SCENE_TYPES,Xe as SVGBuilder,me as Scene3D,yt as SkyObject,L as Strings,P as System,zt as TexturedShader,Je as Vectors,w as WORLD_TYPES,Bt as WireframePass,fe as World3D,Pt as XRayShader};
