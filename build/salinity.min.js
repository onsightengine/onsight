/**
 * @description Salinity Engine
 * @about       Easy to use JavaScript game engine.
 * @author      Stephens Nunnally <@stevinz>
 * @version     v0.0.3
 * @license     MIT - Copyright (c) 2024 Stephens Nunnally
 * @source      https://github.com/salinityengine/engine
 */
var name="@salinity/engine",version="0.0.3",description="Easy to use JavaScript game engine.",module="src/Salinity.js",main="build/salinity.module.js",type="module",scripts={build:"rollup -c",prepublishOnly:"npm run build"},files=["build/*","src/*"],keywords=["salinity","game","engine","webgl","javascript","graphics"],repository={type:"git",url:"git+https://github.com/salinityengine/engine.git"},author="Stephens Nunnally <stephens@scidian.com>",license="MIT",bugs={url:"https://github.com/salinityengine/engine/issues"},homepage="https://github.com/salinityengine",publishConfig={access:"public",registry:"https://registry.npmjs.org/"},devDependencies={"@rollup/plugin-json":"^6.1.0","@rollup/plugin-terser":"^0.4.4","rollup-plugin-cleanup":"^3.2.1","rollup-plugin-visualizer":"^5.12.0"},pkg={name:name,version:version,description:description,module:module,main:main,type:type,scripts:scripts,files:files,keywords:keywords,repository:repository,author:author,license:license,bugs:bugs,homepage:homepage,private:!1,publishConfig:publishConfig,devDependencies:devDependencies};const VERSION=pkg.version,APP_SIZE=1e3,APP_EVENTS=["init","update","destroy","keydown","keyup","pointerdown","pointerup","pointermove"],APP_ORIENTATION={PORTRAIT:"portrait",LANDSCAPE:"landscape"},WORLD_TYPES={World2D:"World2D",World3D:"World3D",WorldUI:"WorldUI"},SCRIPT_FORMAT={JAVASCRIPT:"js",PYTHON:"python"};class Iris{static get NAMES(){return COLOR_KEYWORDS}constructor(t=16777215,e,i,s=""){this.isColor=!0,this.isIris=!0,this.type="Color",this.r=1,this.g=1,this.b=1,this.set(t,e,i,s)}copy(t){return this.set(t)}clone(){return new this.constructor(this.r,this.g,this.b)}set(t=0,e,i,s=""){if(0===arguments.length)return this.set(0);if(null==t||Number.isNaN(t))(e||i)&&console.warn(`Iris.set(): Invalid 'r' value ${t}`);else if(void 0===e&&void 0===i){let i=t;if("number"==typeof i||0===i)return this.setHex(i);if(i&&isRGB(i))return this.setRGBF(i.r,i.g,i.b);if(i&&isHSL(i))return this.setHSL(360*i.h,i.s,i.l);if(i&&isRYB(i))return this.setRYB(255*i.r,255*i.y,255*i.b);if(Array.isArray(i)&&i.length>2){let t=null!=e&&!Number.isNaN(e)&&e>0?e:0;return this.setRGBF(i[t],i[t+1],i[t+2])}if("string"==typeof i)return this.setStyle(i)}else switch(s){case"rgb":return this.setRGB(t,e,i);case"hsl":return this.setHSL(t,e,i);case"ryb":return this.setRYB(t,e,i);default:return this.setRGBF(t,e,i)}return this}setColorName(t){const e=COLOR_KEYWORDS[t.toLowerCase()];return e?this.setHex(e):(console.warn(`Iris.setColorName(): Unknown color ${t}`),this)}setHex(t){((t=Math.floor(t))>16777215||t<0)&&(console.warn(`Iris.setHex(): Given decimal outside of range, value was ${t}`),t=clamp(t,0,16777215));const e=(16711680&t)>>16,i=(65280&t)>>8,s=255&t;return this.setRGB(e,i,s)}setHSL(t,e,i){t=keepInRange(t,0,360),e=clamp(e,0,1),i=clamp(i,0,1);let s=(1-Math.abs(2*i-1))*e,n=s*(1-Math.abs(t/60%2-1)),r=i-s/2,o=0,a=0,l=0;return t<60?(o=s,a=n,l=0):60<=t&&t<120?(o=n,a=s,l=0):120<=t&&t<180?(o=0,a=s,l=n):180<=t&&t<240?(o=0,a=n,l=s):240<=t&&t<300?(o=n,a=0,l=s):300<=t&&(o=s,a=0,l=n),this.setRGBF(o+r,a+r,l+r),this}setRandom(){return this.setRGBF(Math.random(),Math.random(),Math.random())}setRGB(t,e,i){return this.setRGBF(t/255,e/255,i/255)}setRGBF(t,e,i){return this.r=clamp(t,0,1),this.g=clamp(e,0,1),this.b=clamp(i,0,1),this}setRYB(t,e,i){const s=cubicInterpolation(clamp(t,0,255),clamp(e,0,255),clamp(i,0,255),255,CUBE.RYB_TO_RGB);return this.setHex(s)}setScalar(t){return this.setRGB(t,t,t)}setScalarF(t){return this.setRGBF(t,t,t)}setStyle(t){let e;if(e=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const i=e[1],s=e[2];switch(i){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const e=Math.min(255,parseInt(t[1],10)),i=Math.min(255,parseInt(t[2],10)),s=Math.min(255,parseInt(t[3],10));return this.setRGB(e,i,s)}if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const e=Math.min(100,parseInt(t[1],10))/100,i=Math.min(100,parseInt(t[2],10))/100,s=Math.min(100,parseInt(t[3],10))/100;return this.setRGBF(e,i,s)}break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const e=parseFloat(t[1]),i=parseInt(t[2],10)/100,s=parseInt(t[3],10)/100;return this.setHSL(e,i,s)}}}else if(e=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=e[1],i=t.length;if(3===i){const e=parseInt(t.charAt(0)+t.charAt(0),16),i=parseInt(t.charAt(1)+t.charAt(1),16),s=parseInt(t.charAt(2)+t.charAt(2),16);return this.setRGB(e,i,s)}if(6===i){const e=parseInt(t.charAt(0)+t.charAt(1),16),i=parseInt(t.charAt(2)+t.charAt(3),16),s=parseInt(t.charAt(4)+t.charAt(5),16);return this.setRGB(e,i,s)}}return t&&t.length>0?this.setColorName(t):this}cssString(t){return"rgb("+this.rgbString(t)+")"}hex(){return(this.red()<<16)+(this.green()<<8)+this.blue()}hexString(t){return t&&this.set(t),Iris.hexString(this.hex())}static hexString(t=0){return _temp.set(t),"#"+("000000"+(_temp.hex()>>>0).toString(16)).slice(-6)}static randomHex(){return _random.setRandom().hex()}rgbString(t){const e=this.red()+", "+this.green()+", "+this.blue();return null!=t?String(e+", "+t):e}toJSON(){return this.hex()}getHSL(t){if(!t||!isHSL(t))return{h:hueF(this.hex()),s:saturation(this.hex()),l:lightness(this.hex())};t.h=hueF(this.hex()),t.s=saturation(this.hex()),t.l=lightness(this.hex())}getRGB(t){if(!t||!isHSL(t))return{r:this.r,g:this.g,b:this.b};t.r=this.r,t.g=this.g,t.b=this.b}getRYB(t){let e=cubicInterpolation(this.r,this.g,this.b,1,CUBE.RGB_TO_RYB);return t&&isRYB(t)?(t.r=redF(e),t.y=greenF(e),t.b=blueF(e),t):{r:redF(e),y:greenF(e),b:blueF(e)}}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}red(){return clamp(Math.floor(255*this.r),0,255)}green(){return clamp(Math.floor(255*this.g),0,255)}blue(){return clamp(Math.floor(255*this.b),0,255)}redF(){return this.r}greenF(){return this.g}blueF(){return this.b}hue(){return hue(this.hex())}saturation(){return saturation(this.hex())}lightness(){return lightness(this.hex())}hueF(){return hueF(this.hex())}hueRYB(){for(let t=1;t<RYB_OFFSET.length;t++)if(RYB_OFFSET[t]>this.hue())return t-2}add(t){return t.isColor||console.warn("Iris.add(): Missing 'color' object"),this.setRGBF(this.r+t.r,this.g+t.g,this.b+t.b)}addScalar(t){return this.setRGB(this.red()+t,this.green()+t,this.blue()+t)}addScalarF(t){return this.setRGBF(this.r+t,this.g+t,this.b+t)}brighten(t=.5){let e=hue(this.hex()),i=saturation(this.hex()),s=lightness(this.hex());return s+=(1-s)*t,this.setHSL(e,i,s),this}darken(t=.5){let e=hue(this.hex()),i=saturation(this.hex()),s=lightness(this.hex())*t;return this.setHSL(e,i,s)}greyscale(t=1,e="luminosity"){return this.grayscale(t,e)}grayscale(t=1,e="luminosity"){let i=0;"luminosity"===e&&(i=.21*this.r+.72*this.g+.07*this.b),i=(this.r+this.g+this.b)/3,t=clamp(t,0,1);const s=this.r*(1-t)+t*i,n=this.g*(1-t)+t*i,r=this.b*(1-t)+t*i;return this.setRGBF(s,n,r)}hslOffset(t,e,i){return this.setHSL(this.hue()+t,this.saturation()+e,this.lightness()+i)}mix(t,e=.5){t.isColor||console.warn("Iris.mix(): Missing 'color' object"),e=clamp(e,0,1);const i=this.r*(1-e)+e*t.r,s=this.g*(1-e)+e*t.g,n=this.b*(1-e)+e*t.b;return this.setRGBF(i,s,n)}multiply(t){return t.isColor||console.warn("Iris.multiply(): Missing 'color' object"),this.setRGBF(this.r*t.r,this.g*t.g,this.b*t.b)}multiplyScalar(t){return this.setRGBF(this.r*t,this.g*t,this.b*t)}rgbComplementary(){return this.rgbRotateHue(180)}rgbRotateHue(t=90){const e=keepInRange(this.hue()+t);return this.setHSL(e,this.saturation(),this.lightness())}rybAdjust(){return this.setHSL(hue(matchSpectrum(this.hue(),SPECTRUM.RYB)),this.saturation(),this.lightness())}rybComplementary(){return this.rybRotateHue(180)}rybRotateHue(t=90){const e=keepInRange(this.hueRYB()+t);return this.setHSL(hue(matchSpectrum(e,SPECTRUM.RYB)),this.saturation(),this.lightness())}subtract(t){return t.isColor||console.warn("Iris: subtract() was not called with a 'Color' object"),this.setRGBF(this.r-t.r,this.g-t.g,this.b-t.b)}equals(t){return t.isColor||console.warn("Iris: equals() was not called with a 'Color' object"),fuzzy(this.r,t.r)&&fuzzy(this.g,t.g)&&fuzzy(this.b,t.b)}isEqual(t){return this.equals(t)}isDark(){const t=this.hue(),e=this.lightness();return e<.6&&(t>=210||t<=27)||e<=.32}isLight(){return!this.isDark()}}function isRGB(t){return void 0!==t.r&&void 0!==t.g&&void 0!==t.b}function isHSL(t){return void 0!==t.h&&void 0!==t.s&&void 0!==t.l}function isRYB(t){return void 0!==t.r&&void 0!==t.y&&void 0!==t.b}function clamp(t,e,i){return Math.max(e,Math.min(i,t))}function red(t){return clamp((16711680&t)>>16,0,255)}function green(t){return clamp((65280&t)>>8,0,255)}function blue(t){return clamp(255&t,0,255)}function redF(t){return red(t)/255}function greenF(t){return green(t)/255}function blueF(t){return blue(t)/255}function hue(t){return hsl(t,"h")}function hueF(t){return hue(t)/360}function saturation(t){return hsl(t,"s")}function lightness(t){return hsl(t,"l")}function fuzzy(t,e,i=.0015){return t<e+i&&t>e-i}function keepInRange(t,e=0,i=360){for(;t>=i;)t-=i-e;for(;t<e;)t+=i-e;return t}let _hslHex,_hslH,_hslS,_hslL;function hsl(t,e="h"){if(t!==_hslHex){if(null==t)return 0;const e=redF(t),i=greenF(t),s=blueF(t),n=Math.max(e,i,s),r=Math.min(e,i,s),o=n-r;if(_hslL=(n+r)/2,0===o)_hslH=_hslS=0;else{switch(_hslS=_hslL<=.5?o/(n+r):o/(2-n-r),n){case e:_hslH=(i-s)/o+(i<s?6:0);break;case i:_hslH=(s-e)/o+2;break;case s:_hslH=(e-i)/o+4}_hslH=Math.round(60*_hslH),_hslH<0&&(_hslH+=360)}_hslHex=t}switch(e){case"h":return _hslH;case"s":return _hslS;case"l":return _hslL;default:console.warn(`Iris.hsl(): Unknown channel (${e}) requested`)}return 0}const _interpolate=new Iris,_mix1=new Iris,_mix2=new Iris,_random=new Iris,_temp=new Iris;function matchSpectrum(t,e=SPECTRUM.RYB){let i=360/e.length,s=i,n=0;for(let r=0;r<e.length;r++){if(t<s){let r=(s-t)/i;return _mix1.set(e[n+1]),_mix1.mix(_mix2.set(e[n]),r).hex()}s+=i,n+=1}}function cubicInterpolation(t,e,i,s=255,n=CUBE.RYB_TO_RGB){t=clamp(t/s,0,1),e=clamp(e/s,0,1),i=clamp(i/s,0,1);const r=n[0],o=n[1],a=n[2],l=n[3],c=n[4],p=n[5],d=n[6],h=n[7],u=1-t,y=1-e,f=1-i,m=u*y*f,g=u*y*i,b=u*e*f,v=t*y*f,S=u*e*i,w=t*y*i,x=t*e*f,k=t*e*i,C=m*r[0]+g*o[0]+b*a[0]+v*l[0]+S*c[0]+w*p[0]+x*d[0]+k*h[0],E=m*r[1]+g*o[1]+b*a[1]+v*l[1]+S*c[1]+w*p[1]+x*d[1]+k*h[1],P=m*r[2]+g*o[2]+b*a[2]+v*l[2]+S*c[2]+w*p[2]+x*d[2]+k*h[2];return _interpolate.set(C,E,P,"gl").hex()}const CUBE={RYB_TO_RGB:[[1,1,1],[.163,.373,.6],[1,1,0],[1,0,0],[0,.66,.2],[.5,0,.5],[1,.5,0],[0,0,0]],RGB_TO_RYB:[[1,1,1],[0,0,1],[0,1,.483],[1,0,0],[0,.053,.21],[.309,0,.469],[0,1,0],[0,0,0]]},SPECTRUM={RYB:[16711680,16730368,16741376,16749056,16755200,16760576,16765696,16771072,16776960,13432320,10481152,6808320,52224,44900,39321,745892,1196203,1776563,3740847,5443501,7408042,10879142,13434996,14942277,16711680]},RYB_OFFSET=[0,1,2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19,19,20,21,21,22,23,23,24,25,25,26,27,27,28,28,29,29,30,30,31,31,32,32,32,33,33,34,34,35,35,35,36,36,37,37,37,38,38,38,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,59,59,59,60,60,61,61,62,63,63,64,65,65,66,67,68,68,69,70,70,71,72,72,73,73,74,75,75,76,77,77,78,79,79,80,81,82,82,83,84,85,86,87,88,88,89,90,91,92,93,95,96,98,100,102,104,105,107,109,111,113,115,116,118,120,122,125,127,129,131,134,136,138,141,143,145,147,150,152,154,156,158,159,161,163,165,166,168,170,171,173,175,177,178,180,182,184,185,187,189,191,192,194,196,198,199,201,203,205,206,207,208,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,226,227,228,229,230,232,233,234,235,236,238,239,240,241,242,243,244,245,246,247,248,249,250,251,251,252,253,254,255,256,257,257,258,259,260,260,261,262,263,264,264,265,266,267,268,268,269,270,271,272,273,274,274,275,276,277,278,279,280,282,283,284,286,287,289,290,292,293,294,296,297,299,300,302,303,305,307,309,310,312,314,316,317,319,321,323,324,326,327,328,329,330,331,332,333,334,336,337,338,339,340,341,342,343,344,345,347,348,349,350,352,353,354,355,356,358,359,999],COLOR_KEYWORDS={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,transparent:0,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},_lut=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],v0=[0,0,0],v1=[0,0,0],vc=[0,0,0];class Maths{static radiansToDegrees(t){return t*(180/Math.PI)}static degreesToRadians(t){return Math.PI/180*t}static clamp(t,e,i){return(t=Number(t))<e&&(t=e),t>i&&(t=i),t}static damp(t,e,i,s){return Maths.lerp(t,e,1-Math.exp(-i*s))}static lerp(t,e,i){return(1-i)*t+i*e}static roundTo(t,e=0){const i=Math.pow(10,e);return Math.round(t*i)/i}static fuzzyFloat(t,e,i=.001){return t<e+i&&t>e-i}static fuzzyVector(t,e,i=.001){return!1!==Maths.fuzzyFloat(t.x,e.x,i)&&(!1!==Maths.fuzzyFloat(t.y,e.y,i)&&!1!==Maths.fuzzyFloat(t.z,e.z,i))}static fuzzyQuaternion(t,e,i=.001){return!1!==Maths.fuzzyVector(t,e,i)&&!1!==Maths.fuzzyFloat(t.w,e.w,i)}static isPowerOfTwo(t){return!(t&t-1)&&0!==t}static addCommas(t){return t.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,")}static countDecimals(t){return Math.floor(t.valueOf())===t.valueOf()?0:t.toString().split(".")[1].length||0}static isNumber(t){return null!=t&&"number"==typeof t&&!Number.isNaN(t)&&Number.isFinite(t)}static noZero(t,e=1e-5){return e=Math.abs(e),(t=Maths.sanity(t))>=0&&t<e&&(t=e),t<0&&t>-1*e&&(t=-1*e),t}static sanity(t){return isNaN(t)&&(t=0),t}static lineCollision(t,e,i,s,n,r,o,a){let l=(a-r)*(i-t)-(o-n)*(s-e);if(Maths.fuzzyFloat(l,0,1e-7))return!1;let c=((o-n)*(e-r)-(a-r)*(t-n))/l,p=((i-t)*(e-r)-(s-e)*(t-n))/l;return c>=0&&c<=1&&p>=0&&p<=1}static lineRectCollision(t,e,i,s,n,r,o,a){const l=Maths.lineCollision(t,e,i,s,n,r,n,a),c=Maths.lineCollision(t,e,i,s,o,r,o,a),p=Maths.lineCollision(t,e,i,s,n,r,o,r),d=Maths.lineCollision(t,e,i,s,n,a,o,a);return l||c||p||d}static triangleArea(t,e,i){return Vec3Func.subtract(v0,i,e),Vec3Func.subtract(v1,t,e),Vec3Func.cross(vc,v0,v1),.5*Vec3Func.length(vc)}static randomFloat(t,e){return t+Math.random()*(e-t)}static randomInt(t=0,e=1){return t+Math.floor(Math.random()*(e-t))}static uuid(){if(window.crypto&&window.crypto.randomUUID)return crypto.randomUUID();const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,s=4294967295*Math.random()|0;return(_lut[255&t]+_lut[t>>8&255]+_lut[t>>16&255]+_lut[t>>24&255]+"-"+_lut[255&e]+_lut[e>>8&255]+"-"+_lut[e>>16&15|64]+_lut[e>>24&255]+"-"+_lut[63&i|128]+_lut[i>>8&255]+"-"+_lut[i>>16&255]+_lut[i>>24&255]+_lut[255&s]+_lut[s>>8&255]+_lut[s>>16&255]+_lut[s>>24&255]).toLowerCase()}}class Palette{constructor(){this.isPalette=!0,this.type="Palette",this.name="New Palette",this.uuid=Maths.uuid(),this.colors=[]}default16(){return this.colors=[0,8421504,12632256,16777215,65535,255,128,8388736,16711935,16711680,8388608,8421376,16776960,65280,32768,32896],this}purpleGold(){return this.colors=[0,16777215,13893887,16762880],this}fromJSON(t){const e=t.object;return void 0!==e.name&&(this.name=e.name),void 0!==e.uuid&&(this.uuid=e.uuid),void 0!==e.colors&&(this.colors=JSON.parse(e.colors)),this}toJSON(){const t={object:{type:this.type,name:this.name,uuid:this.uuid}};return t.object.colors=JSON.stringify(this.colors),t}}const _assets={},_types={Palette:Palette};let AssetManager$1=class t{static checkType(t){if(t)return t.isBufferGeometry?"geometry":"Shape"===t.type?"shape":t.isMaterial?"material":t.isPalette?"palette":t.isScript?"script":t.isTexture?"texture":t.isEntity?"prefab":"asset"}static get(t){return t&&t.uuid&&(t=t.uuid),_assets[t]}static library(e,i){const s=[];for(const[n,r]of Object.entries(_assets))e&&t.checkType(r)!==e||(null==i||r.category&&r.category===i)&&s.push(r);return s}static add(t){const e=Array.isArray(t)?t:[...arguments];let i;for(let t=0;t<e.length;t++){let s=e[t];s&&s.uuid&&(s.name&&""!==s.name||(s.name=s.constructor.name),_assets[s.uuid]=s,void 0===i&&(i=s))}return i}static clear(){for(const e in _assets){_assets[e].isBuiltIn||t.remove(_assets[e],!0)}}static remove(t,e=!0){const i=Array.isArray(t)?t:[t];for(const t of i)t&&t.uuid&&_assets[t.uuid]&&(e&&"function"==typeof t.dispose&&t.dispose(),delete _assets[t.uuid])}static fromJSON(e,i=(()=>{})){t.clear();for(const i of Object.keys(_types))if(e[i])for(const s of e[i]){const e=new(0,_types[i]);e.fromJSON(s),t.add(e)}"function"==typeof i&&i()}static toJSON(e){const i={};e||(e={});for(const i of Object.keys(_types)){const s=t.library(i);if(0!==s.length){e[i]={};for(const t of s)t.uuid&&!e[i][t.uuid]&&(e[i][t.uuid]=t.toJSON())}}for(const t in e){const s=[];for(const i in e[t]){const n=e[t][i];delete n.metadata,s.push(n)}i[t]=s}return i}};const _timer=null==performance||"undefined"==typeof performance?Date:performance;class Clock{#t=!1;#e=0;#i=0;#s=0;#n=0;#r=0;#o=0;#a=0;constructor(t=!0,e=0){t&&this.start(),this.#e-=e,this.#s-=e}start(t=!1){t&&this.reset(),this.#e=_timer.now(),this.#s=this.#e,this.#t=!0}stop(){this.getDeltaTime(),this.#t=!1}toggle(){this.#t?this.stop():this.start()}reset(){this.#e=_timer.now(),this.#s=this.#e,this.#i=0,this.#n=0}getElapsedTime(){return this.#i}getDeltaTime(){if(!this.#t)return this.#a=0,0;const t=_timer.now(),e=(t-this.#s)/1e3;return this.#s=t,this.#i+=e,this.#n++,this.#r+=e,this.#o++,this.#r>1&&(this.#a=this.#o,this.#r=0,this.#o=0),e}isRunning(){return this.#t}isStopped(){return!this.#t}count(){return this.#n}averageDelta(){const t=1/this.#a;return Math.min(1,t)}fps(){return this.#a}}class EntityUtils{static clearObject(t,e=!0){}static combineEntityArrays(t,e){for(const i of e)!1===EntityUtils.containsEntity(t,i)&&t.push(i)}static commonEntity(t,e){t=Array.isArray(t)?t:[t],e=Array.isArray(e)?e:[e];for(let i=0;i<t.length;i++)if(!0===EntityUtils.containsEntity(e,t[i]))return!0;for(let i=0;i<e.length;i++)if(!0===EntityUtils.containsEntity(t,e[i]))return!0;return!1}static compareArrayOfEntities(t,e){t=Array.isArray(t)?t:[t],e=Array.isArray(e)?e:[e];for(let i=0;i<t.length;i++)if(!1===EntityUtils.containsEntity(e,t[i]))return!1;for(let i=0;i<e.length;i++)if(!1===EntityUtils.containsEntity(t,e[i]))return!1;return!0}static containsEntity(t,e){if(!Array.isArray(t))return!1;if(!e||!e.isEntity)return!1;for(const i of t)if(i.isEntity&&i.uuid===e.uuid)return!0;return!1}static copyTransform(t,e){e.position.copy(t.position),e.rotation.order=t.rotation.order,e.quaternion.copy(t.quaternion),e.scale.copy(t.scale),e.matrix.copy(t.matrix),e.matrixWorld.copy(t.matrixWorld)}static parentEntity(t,e=!1){for(;t&&t.parent;){if(t.parent.isStage)return t;if(t.parent.isWorld)return t;if(t=t.parent,e){let e=t.isEntity;if(e=e||t.userData.flagIgnore,e=e||t.userData.flagHelper,e)return t}}return t}static removeEntityFromArray(t,e){if(e&&e.isEntity&&Array.isArray(t)){for(let i=t.length-1;i>=0;--i)t[i].uuid===e.uuid&&t.splice(i,1);return t}}static uuidArray(t){t=Array.isArray(t)?t:[...arguments];const e=[];for(const i of t)"object"==typeof i&&i.uuid&&e.push(i.uuid);return e}}class System{static isIterable(t){return t&&"function"==typeof t[Symbol.iterator]}static isObject(t){return t&&"object"==typeof t&&!Array.isArray(t)}static swapArrayItems(t,e,i){return t[e]=t.splice(i,1,t[e])[0],t}static save(t,e){try{const i=document.createElement("a");i.href=t,i.download=e||"data.json",i.click(),setTimeout((function(){window.URL.revokeObjectURL(t)}),0)}catch(t){return void console.warn(t)}}static saveBuffer(t,e,i={type:"application/octet-stream"}){const s=URL.createObjectURL(new Blob([t],{type:i}));System.save(s,e)}static saveImage(t,e){System.save(t,e)}static saveString(t,e){const i=URL.createObjectURL(new Blob([t],{type:"text/plain"}));System.save(i,e)}static detectOS(){const t={Android:["android"],iOS:["iphone","ipad","ipod","ios"],Linux:["linux","x11","wayland"],MacOS:["mac","darwin","osx","os x"],Windows:["win"]},e=window.navigator.userAgent,i=window.navigator.userAgentData,s=(i?i.platform:e).toLowerCase();for(const e in t)for(const i of t[e])if(-1!==s.indexOf(i))return e;return"Unknown OS"}static fullscreen(t){if(document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement){const t=document;(t.cancelFullScreen||t.exitFullscreen||t.webkitCancelFullScreen||t.webkitExitFullscreen||t.mozCancelFullScreen).call(t)}else{const e=t??document.body;(e.requestFullScreen||e.webkitRequestFullScreen||e.mozRequestFullScreen||e.msRequestFullScreen).call(e)}}static metaKeyOS(){return"Mac"===System.detectOS()?"⌘":"⌃"}static sleep(t){const e=Date.now();let i=e;for(;i-e<t;)i=Date.now()}static waitForObject(t="",e,i,s=100,n=-1,r=5e3){let o=Date.now(),a=Date.now();!function l(){n>0&&Date.now()-o>n?console.info(`Operation: ${t} timed out`):(r>0&&Date.now()-a>r&&(console.info(`Still waiting on operation: ${t}`),a=Date.now()),e&&"function"==typeof e&&!e()?setTimeout(l,s):i&&"function"==typeof i&&i())}()}}const _registered={};class ComponentManager{static defaultValue(t){switch(t){case"select":case"asset":case"divider":return null;case"number":case"int":case"angle":case"slider":return 0;case"variable":return[0,0];case"vector":return[0];case"option":return[!1];case"boolean":return!1;case"color":return 16777215;case"string":case"key":return"";case"object":return{};default:console.warn(`ComponentManager.defaultValue(): Unknown property type '${t}'`)}return null}static registered(t=""){const e=_registered[t];return e||console.warn(`ComponentManager.registered(): Component '${t}' not registered'`),e}static registeredTypes(){return Object.keys(_registered)}static register(t="",e){if(t=t.toLowerCase(),_registered[t])return console.warn(`ComponentManager.register(): Component '${t}' already registered`);System.isObject(e.config)||(e.config={}),System.isObject(e.config.schema)||(e.config.schema={});const i=e.config.schema;for(const t in i){const e=Array.isArray(i[t])?i[t]:[i[t]];for(const t of e){if(void 0===t.type)console.warn("ComponentManager.register(): All schema properties require a 'type' value");else if("divider"===t.type)continue;void 0===t.default&&(t.default=ComponentManager.defaultValue(t.type)),void 0!==t.proMode&&(t.promode=t.proMode)}}_registered[t]=class extends e{constructor(){super(),this.isComponent=!0,this.type=t,this.attached=!0,this.expanded=!0,this.order=0,this.tag="",this.entity=null,this.backend=void 0,this.data={}}init(t={}){this.dispose(),"function"==typeof super.init&&super.init(t)}dispose(){"function"==typeof super.dispose&&super.dispose(),"object"==typeof this.backend&&"function"==typeof this.backend.dispose&&this.backend.dispose(),this.backend=void 0}attach(){this.attached=!0,"function"==typeof super.attach&&super.attach()}detach(){this.attached=!1,"function"==typeof super.detach&&super.detach()}defaultData(){const t={};for(let e=0,i=arguments.length;e<i;e+=2)t[arguments[e]]=arguments[e+1];return ComponentManager.sanitizeData(this.type,t),t.base={isComponent:!0,attached:this.attached,expanded:this.expanded,order:this.order,tag:this.tag,type:this.type},t}toJSON(){let t;t=this.data&&this.data.style?this.defaultData("style",this.data.style):this.defaultData();for(const e in t)void 0!==this.data[e]&&(this.data[e]&&this.data[e].isTexture?t[e]=this.data[e].uuid:t[e]=structuredClone(this.data[e]));return t}}}static includeData(t,e,i=void 0){for(const s in t.if){const n=Array.isArray(t.if[s])?t.if[s]:[t.if[s]];let r=!1,o=!1;for(const t of n)r=r||e[s]===t,o=!(!o&&void 0!==i)||i[s]===t;if(!r||!o)return!1}for(const s in t.not){const n=Array.isArray(t.not[s])?t.not[s]:[t.not[s]];let r=!1,o=!1;for(const t of n)r=r||e[s]===t,o=!o&&void 0!==i&&i[s]===t;if(r||o)return!1}return!0}static sanitizeData(t,e){e&&"object"==typeof e||(e={});const i=ComponentManager.registered(t);if(!i||!i.config||!i.config.schema)return;const s=i.config.schema;if(System.isObject(s))for(const t in s){const i=Array.isArray(s[t])?s[t]:[s[t]];let n;for(const t of i)if("divider"!==t.type&&ComponentManager.includeData(t,e)){n=t;break}if(void 0!==n){if(void 0===e[t]&&(Array.isArray(n.default)?e[t]=[...n.default]:"object"==typeof n.default?e[t]=structuredClone(n.default):e[t]=n.default),Maths.isNumber(e[t])){const i=n.min??-1/0,s=n.max??1/0;e[t]<i&&(e[t]=i),e[t]>s&&(e[t]=s)}}else delete e[t]}}static stripData(t,e,i){const s=ComponentManager.registered(t);if(!s||!s.config||!s.config.schema)return;const n=s.config.schema;if(System.isObject(n))for(const t in n){let s=!1;const r=Array.isArray(n[t])?n[t]:[n[t]];for(const t of r)if("divider"!==t.type&&ComponentManager.includeData(t,e,i)){s=!0;break}!0!==s&&delete i[t]}}}class Entity3D{constructor(t="Entity"){this.name=t,this.castShadow=!0,this.receiveShadow=!0,this.isEntity=!0,this.isEntity3D=!0,this.type="Entity3D",this.locked=!1,this.lookAtCamera=!1,this.lookAtYOnly=!1,this.bloom=!1,this.category=null,this.components=[]}componentFamily(){return"Entity3D"}addComponent(t,e={},i=!0){const s=ComponentManager.registered(t);if(void 0===s)return;const n=s.config;let r=this.getComponent(t);if(r&&!s.config.multiple||(r=new s,this.components.push(r)),n.dependencies&&i)for(const t of n.dependencies)null==this.getComponent(t)&&this.addComponent(t,{},!1);return ComponentManager.sanitizeData(t,e),r.detach(),r.entity=this,r.init(e),r.attach(),r}attachComponent(t){return this.components.push(t),t.detach(),t.entity=this,t.init(t.toJSON()),t.attach(),t}updateComponent(t,e={},i=0){const s=this.getComponentsWithProperties("type",t)[i];if(!s||!s.isComponent)return;const n=s.data??{};return Object.assign(n,e),ComponentManager.sanitizeData(t,n),this.detach(),this.init(n),this.attach(),s}replaceComponent(t,e={},i=0){const s=this.getComponentsWithProperties("type",t)[i];if(s&&s.isComponent)return ComponentManager.sanitizeData(t,e),s.detach(),s.init(e),s.attach(),s}getComponent(t,e){if(void 0===e)return this.getComponentByProperty("type",t);const i=this.getComponentsWithProperties("type",t,"tag",e);return i.length>0?i[0]:void 0}getComponentByTag(t){return this.getComponentByProperty("tag",t)}getComponentByType(t){return this.getComponentByProperty("type",t)}getComponentsByType(t){return this.getComponentsWithProperties("type",t)}getComponentByProperty(t,e){for(const i of this.components)if(i[t]===e)return i}getComponentsWithProperties(){const t=[];for(const e of this.components){let i=!0;for(let t=0;t<arguments.length;t+=2){const s=arguments[t+1];if(e[arguments[t]]!==s){i=!1;break}}i&&t.push(e)}return t}removeComponent(t){if(!t)return;const e=this.components.indexOf(t);if(-1!==e)return this.components.splice(e,1),t.detach(),t;console.warn(`Entity3D.removeComponent(): Component ${t.uuid}, type '${t.type}' not found`)}rebuildComponents(){for(const t of this.components)t.detach(),t.init(t.toJSON()),t.attach();return this}traverseComponents(t){for(const e of this.components)if("function"==typeof t&&t(e))return}addEntity(t,e=-1,i=!1){return t&&t.isEntity3D?(-1!==this.children.indexOf(t)||(i&&t.parent?this.attach(t):this.add(t),-1!==e&&(this.children.splice(e,0,t),this.children.pop())),this):this}getEntities(){const t=[];for(const e of this.children)e&&e.isEntity3D&&(e.userData.flagIgnore||e.userData.flagHelper||t.push(e));return t}getEntityById(t){return this.getEntityByProperty("id",parseInt(t))}getEntityByName(t){return this.getEntityByProperty("name",t)}getEntityByUUID(t){return this.getEntityByProperty("uuid",t)}getEntityByProperty(t,e){if(this[t]===e)return this;for(const i of this.getEntities()){const s=i.getEntityByProperty(t,e);if(s)return s}}removeEntity(t,e=!1){if(t){if(!e){if(t.locked)return;if(t.userData.flagHelper)return}return this.remove(t),t}}traverse(t,e=!0){if("function"!=typeof t||!t(this))for(const i of this.children)i.traverse(t,e)}traverseEntities(t,e=!0){if("function"!=typeof t||!t(this))for(const i of this.getEntities())i.traverseEntities(t,e)}changeParent(t=void 0,e=-1){if(t||(t=this.parent),!t||!t.isObject3D)return;const i=this.parent;return-1===e&&i&&(e=i.children.indexOf(this)),t.safeAttach(this),-1!==e&&(t.children.splice(e,0,this),t.children.pop()),this}parentStage(){return this.isStage||this.isWorld?this:this.parent&&this.parent.isEntity3D?this.parent.parentStage():null}parentWorld(){return this.isWorld?this:this.parent&&this.parent.isEntity3D?this.parent.parentWorld():null}updateMatrix(){const t=this.rotation._onChangeCallback,e=this.rotation._onChangeCallback;this.rotation._onChange((()=>{})),this.quaternion._onChange((()=>{}));const i=window.activeCamera;let s=Boolean(this.lookAtCamera&&i);s&&this.parent&&this.parent.isObject3D&&this.traverseAncestors((t=>{t.lookAtCamera&&(s=!1)})),s?(this.parent&&this.parent.isObject3D?(this.parent.getWorldQuaternion(_parentQuaternion,!1),_parentQuaternionInv.copy(_parentQuaternion).invert(),this.quaternion.copy(_parentQuaternionInv)):this.quaternion.identity(),_rotationQuaternion.setFromEuler(this.rotation,!1),this.matrixWorld.decompose(_worldPosition,_worldQuaternion,_worldScale),i.matrixWorld.decompose(_camPosition,_camQuaternion,_camScale),this.lookAtYOnly?(_camRotation.set(0,Math.atan2(_camPosition.x-_worldPosition.x,_camPosition.z-_worldPosition.z),0),_lookQuaternion.setFromEuler(_camRotation,!1)):_lookQuaternion.copy(_camQuaternion),this.quaternion.copy(_lookQuaternion),this.quaternion.multiply(_rotationQuaternion)):this.quaternion.setFromEuler(this.rotation,!1),this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0,this.rotation._onChange(t),this.quaternion._onChange(e)}getWorldQuaternion(t,e=!0){let i=this.lookAtCamera;return e&&i&&(this.lookAtCamera=!1),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_objPosition,t,_objScale),e&&i&&(this.lookAtCamera=!0,this.updateWorldMatrix(!0,!1)),t}safeAttach(t){if(t&&t.isObject3D)return t.getWorldQuaternion(_worldQuaternion),t.getWorldScale(_worldScale),t.getWorldPosition(_worldPosition),t.removeFromParent(),t.rotation.copy(_worldRotation.setFromQuaternion(_worldQuaternion,void 0,!1)),t.scale.copy(_worldScale),t.position.copy(_worldPosition),this.attach(t),this}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(super.copy(t,!1),this.position.copy(t.position),this.rotation.copy(t.rotation),this.scale.copy(t.scale),t.locked&&(this.locked=!0),t.lookAtCamera&&(this.lookAtCamera=!0),t.lookAtYOnly&&(this.lookAtYOnly=!0),this.updateMatrix(),e)for(const e of t.children)e.userData.flagIgnore||e.userData.flagHelper||this.add(e.clone());return this}cloneEntity(t=!0){return(new this.constructor).copyEntity(this,t)}copyEntity(t,e=!0){this.dispose(),this.copy(t,!1),this.locked=t.locked,this.lookAtCamera=t.lookAtCamera,this.lookAtYOnly=t.lookAtYOnly,this.bloom=t.bloom,this.category=t.category;for(const e of t.components){this.addComponent(e.type,e.toJSON(),!1).tag=e.tag}if(e)for(const e of t.getEntities())this.add(e.cloneEntity());return this}dispose(){for(;this.components.length>0;){const t=this.components[0];this.removeComponent(t),"function"==typeof t.dispose&&t.dispose()}for(;this.children.length>0;)EntityUtils.clearObject(this.children[0],!0);this.dispatchEvent({type:"destroy"})}fromJSON(t){const e=t.object;void 0!==e.name&&(this.name=e.name),void 0!==e.uuid&&(this.uuid=e.uuid),void 0!==e.position&&this.position.fromArray(e.position),void 0!==e.rotation&&this.rotation.fromArray(e.rotation),void 0!==e.scale&&this.scale.fromArray(e.scale),void 0!==e.castShadow&&(this.castShadow=e.castShadow),void 0!==e.receiveShadow&&(this.receiveShadow=e.receiveShadow),void 0!==e.visible&&(this.visible=e.visible),void 0!==e.frustumCulled&&(this.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(this.renderOrder=e.renderOrder),void 0!==e.layers&&(this.layers.mask=e.layers),void 0!==e.up&&this.up.fromArray(e.up),void 0!==e.matrixAutoUpdate&&(this.matrixAutoUpdate=e.matrixAutoUpdate),"object"==typeof e.userData&&(this.userData=structuredClone(e.userData)),void 0!==e.locked&&(this.locked=e.locked),void 0!==e.lookAtCamera&&(this.lookAtCamera=e.lookAtCamera),void 0!==e.lookAtYOnly&&(this.lookAtYOnly=e.lookAtYOnly),void 0!==e.bloom&&(this.bloom=e.bloom),void 0!==e.category&&(this.category=e.category);for(const e of t.object.components)if(e&&e.base&&e.base.type){this.addComponent(e.base.type,e,!1).tag=e.base.tag}return this.loadChildren(e.entities),this.updateMatrix(),this}loadChildren(jsonEntities=[]){for(const entityData of jsonEntities){const entity=new(eval(entityData.object.type));this.add(entity.fromJSON(entityData))}}toJSON(){const t={object:{type:this.type,name:this.name,uuid:this.uuid,components:[],entities:[]}};t.object.position=this.position.toArray(),t.object.rotation=this.rotation.toArray(),t.object.scale=this.scale.toArray(),t.object.castShadow=this.castShadow,t.object.receiveShadow=this.receiveShadow,t.object.visible=this.visible,t.object.frustumCulled=this.frustumCulled,t.object.renderOrder=this.renderOrder,t.object.layers=this.layers.mask,t.object.up=this.up.toArray(),t.object.matrixAutoUpdate=this.matrixAutoUpdate,Object.keys(this.userData).length>0&&(t.object.userData=structuredClone(this.userData)),t.object.locked=this.locked,t.object.lookAtCamera=this.lookAtCamera,t.object.lookAtYOnly=this.lookAtYOnly,t.object.bloom=this.bloom,t.object.category=this.category;for(const e of this.components)t.object.components.push(e.toJSON());for(const e of this.getEntities())t.object.entities.push(e.toJSON());return t}}class Camera3D extends Entity3D{constructor({name:t,type:e="PerspectiveCamera",width:i=APP_SIZE,height:s=APP_SIZE,fit:n,near:r,far:o,fieldOfView:a}={}){super(t??"Camera"),"OrthographicCamera"!==e&&"PerspectiveCamera"!==e&&(e="PerspectiveCamera"),this.isCamera=!0,this.isCamera3D=!0,this.type=e,"width"!==n&&"height"!==n&&(n="none"),this.fit=n,this.near=r??("PerspectiveCamera"===e?.01:-1e3),this.far=o??1e3,this.fieldOfView=a??58.1,this.isPerspectiveCamera="PerspectiveCamera"===e,this.isOrthographicCamera="OrthographicCamera"===e,this.aspect=1,this.rotateLock=!1,this.view=null,this.zoom=1,this.fov=58.1,this.setSize(i,s)}updateMatrix(){}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}changeType(t){if(!t||"string"!=typeof t)return this;if("orthographic"===(t=t.toLowerCase().replace("camera","")))this.type="OrthographicCamera";else{if("perspective"!==t)return this;this.type="PerspectiveCamera"}return this.isPerspectiveCamera="PerspectiveCamera"===this.type,this.isOrthographicCamera="OrthographicCamera"===this.type,this.isPerspectiveCamera&&(this.near=10/this.far),this.isOrthographicCamera&&(this.near=-1*this.far),this.updateProjectionMatrix(),this}changeFit(t){return"landscape"===t&&(t="width"),"portrait"===t&&(t="height"),"width"!==t&&"height"!==t&&(t="none"),this.fit=t,this}setSize(t=APP_SIZE,e=APP_SIZE){if(this.lastWidth=t,this.lastHeight=e,this.aspect=t/e,"height"===this.fit)this.fov=this.fieldOfView;else{const t=Math.tan(Math.PI/180*this.fieldOfView/2);"width"===this.fit?this.fov=360/Math.PI*Math.atan(t/this.aspect):this.fov=360/Math.PI*Math.atan(t*(e/APP_SIZE))}return"width"===this.fit?e=(t=APP_SIZE)/this.aspect:"height"===this.fit&&(t=(e=APP_SIZE)*this.aspect),this.left=-t/2,this.right=t/2,this.top=e/2,this.bottom=-e/2,this.updateProjectionMatrix(),this}updateProjectionMatrix(t){t&&(t.isObject3D&&(t=t.position),this.target.copy(t));const e=this.position.distanceTo(this.target),i=Maths.noZero(1e3/e);if(this.zoom=i,this.isPerspectiveCamera){let t=this.near*Math.tan(Math.PI/180*.5*this.fov),e=2*t,i=this.aspect*e,s=-.5*i;const n=this.view;if(n&&n.enabled){const r=n.fullWidth,o=n.fullHeight;s+=n.offsetX*i/r,t-=n.offsetY*e/o,i*=n.width/r,e*=n.height/o}this.projectionMatrix.makePerspective(s,s+i,t,t-e,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}if(this.isOrthographicCamera){const t=(this.right-this.left)/(2*i),e=(this.top-this.bottom)/(2*i),s=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let r=s-t,o=s+t,a=n+e,l=n-e;const c=this.view;if(c&&c.enabled){const t=(this.right-this.left)/c.fullWidth/i,e=(this.top-this.bottom)/c.fullHeight/i;r+=t*c.offsetX,o=r+t*c.width,a-=e*c.offsetY,l=a-e*c.height}this.projectionMatrix.makeOrthographic(r,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}}setViewOffset(t,e,i,s,n,r){this.view||(this.view={}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=s,this.view.width=n,this.view.height=r,this.setSize(t,e)}clearViewOffset(){this.view&&this.view.enabled&&(this.view.enabled=!1,this.setSize(this.view.fullWidth,this.view.fullHeight))}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){return super.copy(t,e),this.changeType(t.type),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this.fit=t.fit,this.near=t.near,this.far=t.far,this.fieldOfView=t.fieldOfView,this.setSize(t.lastWidth,t.lastHeight),this}cloneEntity(t=!0){return(new this.constructor).copyEntity(this,t)}copyEntity(t,e=!0){return super.copyEntity(t,e),this}fromJSON(t){const e=t.object;return super.fromJSON(t,this),void 0!==e.cameraType&&(this.type=e.cameraType,this.changeType(this.type)),void 0!==e.fit&&(this.fit=e.fit),void 0!==e.near&&(this.near=e.near),void 0!==e.far&&(this.far=e.far),void 0!==e.fieldOfView&&(this.fieldOfView=e.fieldOfView),this.updateProjectionMatrix(),this}toJSON(){const t=super.toJSON();return t.object.cameraType=this.type,t.object.type="Camera3D",t.object.fit=this.fit,t.object.near=this.near,t.object.far=this.far,t.object.fieldOfView=this.fieldOfView,t}}class Stage3D extends Entity3D{constructor(t="Start"){super(t),this.isStage=!0,this.isStage3D=!0,this.type="Stage3D",this.enabled=!0,this.start=0,this.finish=-1}componentFamily(){return"Stage3D"}cloneEntity(t=!0){return(new this.constructor).copyEntity(this,t)}copyEntity(t,e=!0){return super.copyEntity(t,e),this.enabled=t.enabled,this.start=t.start,this.finish=t.finish,this.beginPosition.copy(t.beginPosition),this.endPosition.copy(t.endPosition),this}dispose(){super.dispose()}fromJSON(t){const e=t.object;return super.fromJSON(t),void 0!==e.enabled&&(this.enabled=e.enabled),void 0!==e.start&&(this.start=e.start),void 0!==e.finish&&(this.finish=e.finish),void 0!==e.beginPosition&&this.beginPosition.fromArray(e.beginPosition),void 0!==e.endPosition&&this.endPosition.fromArray(e.endPosition),this}loadChildren(jsonEntities=[]){for(const entityData of jsonEntities){const entity=new(eval(entityData.object.type));this.add(entity.fromJSON(entityData))}}toJSON(){const t=super.toJSON();return t.object.enabled=this.enabled,t.object.start=this.start,t.object.finish=this.finish,t.object.beginPosition=this.beginPosition.toArray(),t.object.endPosition=this.endPosition.toArray(),t}}class World3D extends Entity3D{constructor(t="World 1"){super(t),this.isScene=!0,this.isWorld=!0,this.isWorld3D=!0,this.type="World3D",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,this.xPos=0,this.yPos=0,this.activeStageUUID=null,this.loadDistance=0}componentFamily(){return"World3D"}activeStage(){return this.getStageByUUID(this.activeStageUUID)??this}setActiveStage(t){return t&&t.isEntity&&this.getStageByUUID(t.uuid)?this.activeStageUUID=t.uuid:this.activeStageUUID=null,this}addEntity(t,e=-1,i=!1){return t&&t.isEntity3D?(-1!==this.children.indexOf(t)||t.isWorld||(t.isStage&&(i=!1),super.addEntity(t,e,i),t.isStage&&1===this.getStages().length&&this.setActiveStage(t)),this):this}getEntities(t=!0){const e=[];for(const i of super.getEntities())!t&&i.isStage||e.push(i);return e}getFirstStage(){const t=this.getStages();if(t.length>0)return t[0]}getStages(){const t=[];for(const e of super.getEntities())e.isStage&&t.push(e);return t}getStageByName(t){const e=this.getEntityByProperty("name",t);if(e&&e.isStage)return e}getStageByUUID(t){const e=this.getEntityByProperty("uuid",t);if(e&&e.isStage)return e}getStageByProperty(t,e){for(const i of this.getStages())if(i[t]===e)return i}traverseStages(t,e=!0){if(!("function"==typeof t&&t(this)))for(const i of this.getStages())i.traverseEntities(t,e)}cloneEntity(t=!0){return(new this.constructor).copyEntity(this,t)}copyEntity(t,e=!0){super.copyEntity(t,e),t.background&&(t.background.isColor?this.background=t.background.clone():this.background=t.background),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.xPos=t.xPos,this.yPos=t.yPos;const i=t.getStages().indexOf(t.activeStage());return this.activeStageUUID=-1!==i?this.getStages()[i].uuid:null,this.loadPosition.copy(t.loadPosition),this.loadDistance=t.loadDistance,this}dispose(){super.dispose(),this.background&&"function"==typeof this.background.dispose&&this.background.dispose(),this.environment&&"function"==typeof this.environment.dispose&&this.environment.dispose(),this.fog&&"function"==typeof this.fog.dispose&&this.fog.dispose(),this.overrideMaterial&&"function"==typeof this.overrideMaterial.dispose&&this.overrideMaterial.dispose()}fromJSON(t){const e=t.object;if(super.fromJSON(t),void 0!==e.background&&(Number.isInteger(e.background)?this.background=new THREE.Color(e.background):this.background=e.background),void 0!==e.environment){const t=AssetManager.get(e.background);t&&t.isTexture&&(this.environment=t)}return void 0!==e.fog&&("Fog"===e.fog.type?this.fog=new THREE.Fog(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(this.fog=new THREE.FogExp2(e.fog.color,e.fog.density))),void 0!==e.backgroundBlurriness&&(this.backgroundBlurriness=e.backgroundBlurriness),void 0!==e.backgroundIntensity&&(this.backgroundIntensity=e.backgroundIntensity),void 0!==e.xPos&&(this.xPos=e.xPos),void 0!==e.yPos&&(this.yPos=e.yPos),void 0!==e.activeStageUUID&&(this.activeStageUUID=e.activeStageUUID),void 0!==e.loadPosition&&this.loadPosition.fromArray(e.loadPosition),void 0!==e.loadDistance&&(this.loadDistance=e.loadDistance),this}loadChildren(jsonEntities=[]){for(const entityData of jsonEntities){const entity=new(eval(entityData.object.type));this.add(entity.fromJSON(entityData))}}toJSON(){const t=super.toJSON();return this.background&&(this.background.isColor?t.object.background=this.background.toJSON():t.object.background=this.background),this.environment,this.fog&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.xPos=this.xPos,t.object.yPos=this.yPos,t.object.activeStageUUID=this.activeStageUUID,t.object.loadPosition=this.loadPosition.toArray(),t.object.loadDistance=this.loadDistance,t}}class Project{constructor(t="My Project"){this.isProject=!0,this.type="Project",this.name=t,this.uuid=Maths.uuid(),this.activeWorldUUID=null,this.settings={orientation:APP_ORIENTATION.PORTRAIT,preload:10,unload:10},this.worlds={}}setting(t){switch("object"!=typeof this.settings&&(this.settings={}),t){case"orientation":case"orient":return this.settings.orientation??APP_ORIENTATION.PORTRAIT;case"preload":case"add":return this.settings.preload??10;case"unload":case"remove":return this.settings.unload??10}}activeWorld(){let t=this.getWorldByUUID(this.activeWorldUUID);if(!t||!t.isWorld){const e=Object.keys(this.worlds);e.length>0&&(t=this.worlds[e[0]])}return t}setActiveWorld(t){return t&&t.isWorld?(this.worlds[t.uuid]&&(this.activeWorldUUID=t.uuid),this):this}addWorld(t){return t&&t.isWorld?(WORLD_TYPES[t.type]?(this.worlds[t.uuid]=t,null==this.activeWorldUUID&&(this.activeWorldUUID=t.uuid)):console.error(`Project.addWorld(): Invalid world type '${t.type}'`,t),this):this}getWorldByName(t){return this.getWorldByProperty("name",t)}getWorldByUUID(t){if(t)return this.worlds[t]}getWorldByProperty(t,e){for(const i in this.worlds){const s=this.worlds[i];if(s[t]===e)return s}}removeWorld(t){t&&t.isWorld&&delete this.worlds[t.uuid]}traverseWorlds(t,e=!0){for(const i in this.worlds){const s=this.worlds[i];"function"==typeof t&&t(s),e&&s.traverseStages(t,e)}}worldCount(){return Object.keys(this.worlds).length}findEntityByUUID(t,e=!1){let i=[];e&&(i=[...this.worlds]);for(const e of i){if(t&&e.uuid&&t===e.uuid)return e;const i=e.getEntityByProperty("uuid",t);if(i)return i}}clear(){for(const t in this.worlds){const e=this.worlds[t];this.removeWorld(e),"function"==typeof e.dispose&&e.dispose()}this.name="My Project",this.uuid=Maths.uuid(),this.activeWorldUUID=null}fromJSON(t,e=!0,i=(()=>{})){const s=t.metadata?t.metadata.type:"Undefined";if("Salinity"!==s)return void console.error(`Project.fromJSON(): Unknown project type ('${s}'), expected 'Salinity'`);const n=t.metadata.version;if(n!==VERSION&&console.warn(`Project.fromJSON(): Project saved in 'v${n}', attempting to load with 'v${VERSION}'`),t.object&&t.object.type===this.type){this.clear(),e&&AssetManager$1.fromJSON(t,i),this.name=t.object.name,this.uuid=t.object.uuid,this.activeWorldUUID=t.object.activeWorldUUID,this.settings=structuredClone(t.settings);for(const e of t.worlds){let t;if("World3D"===e.object.type)t=(new World3D).fromJSON(e);t&&t.isWorld&&this.addWorld(t)}return this}console.error("Project.fromJSON(): Save file corrupt, no 'Project' object found!")}toJSON(){const t=AssetManager$1.toJSON({});t.metadata={type:"Salinity",version:VERSION,generator:"Salinity.Project.toJSON"},t.object={type:this.type,name:this.name,uuid:this.uuid,activeWorldUUID:this.activeWorldUUID},t.settings=structuredClone(this.settings),t.worlds=[];for(const e in this.worlds){const i=this.worlds[e];t.worlds.push(i.toJSON())}return t}}const scriptFunctions=APP_EVENTS.toString(),scriptReturnObject={};for(const t of APP_EVENTS)scriptReturnObject[t]=t;const scriptParameters="app,"+scriptFunctions,scriptReturnString=JSON.stringify(scriptReturnObject).replace(/\"/g,"");class SceneManager{static app=void 0;static cloneChildren(t,e){for(const i of e.getEntities()){const s=i.cloneEntity(!1);if(SceneManager.loadScriptsFromComponents(s,i),i.isStage||SceneManager.cloneChildren(s,i),e.isStage&&t.isWorld){const e=t.loadDistance+Math.abs(s.position.length());s.traverse((t=>{t.userData.loadedDistance=e}))}t.add(s);for(const t of s.components)"function"==typeof t.onLoad&&t.onLoad()}}static loadScriptsFromComponents(t,e){if(t&&t.isEntity&&e&&e.isEntity&&e.components)for(const i of e.components){if("script"!==i.type||!i.data)continue;const s=i.data.script,n=AssetManager$1.get(s);if(!n||!n.isScript)continue;if(n.errors){console.warn(`Entity '${e.name}' has errors in script '${n.name}'. Script will not be loaded!`);continue}let r=`${n.source}\n`;for(const t in i.data.variables){const e=i.data.variables[t];if(e&&"object"==typeof e)if(void 0!==e.value){let i=JSON.stringify(e.value);i=i.replace(/[.*+`'"?^${}()|[\]\\]/g,"\\$&"),r+=`let ${t} = JSON.parse('${i}');\n`}else r+=`let ${t} = undefined;\n`}r+=`return ${scriptReturnString};`;const o=new Function(scriptParameters,r).bind(t)(SceneManager.app);for(const e in o){if("function"!=typeof o[e])continue;const i=o[e].bind(t);SceneManager.app.addEvent(e,t,i)}}}static removeEntity(t,e){t&&t.isWorld3D&&e&&e.isObject3D&&(SceneManager.app.dispatch("destroy",{},[e.uuid]),t.removeEntity(e,!0),"function"==typeof e.dispose&&e.dispose())}static cloneStage(t,e,i=!0){t&&t.isWorld3D&&e&&e.isStage3D&&SceneManager.cloneChildren(t,e)}static loadStages(t,e,i=10){if(!t||!t.isWorld3D)return;if(!e||!e.isWorld3D)return;if(i<0)return;const s=t.loadDistance;let n=0;for(;t.loadDistance-s<i;){const s=[];for(const i of e.getStages())i.enabled&&(i.start>=0&&i.start>t.loadDistance||i.finish>=0&&i.finish<t.loadDistance||s.push(i));if(!(s.length>0)){t.loadDistance+=i;break}SceneManager.cloneStage(t,s[Math.floor(Math.random()*s.length)]),n++}n>0&&SceneManager.app.dispatch("init")}static loadWorld(t,e){if(!t||!t.isWorld3D)return;if(!e||!e.isWorld3D)return;if(null!=e.background)if(e.background.isColor)t.background=e.background.clone();else{const i=AssetManager$1.get(e.background);i&&i.isTexture&&(t.background=i.clone())}const i=e.getComponentByType("physics");if(i){const e=t.addComponent(i.type,i.toJSON(),!1);e.onLoad(),t.physics=e}SceneManager.cloneChildren(t,e)}static renderWorld(t){t&&t.isWorld3D}static setCamera(t,e){SceneManager.app.camera=e}static setSize(t,e){SceneManager.app}static dispose(){}}let _animationID=null;class App{constructor(){this.project=new Project,this.dom=document.createElement("div"),this.events={},this.world=null,this.scene=null,this.gameClock=new Clock(!1),this.keys={},this.pointer={x:0,y:0},this.isPlaying=!1}addEvent(t,e,i){-1!==APP_EVENTS.indexOf(t)&&e&&e.uuid&&"function"==typeof i&&(this.events[t]||(this.events[t]={}),this.events[t][e.uuid]||(this.events[t][e.uuid]=[]),this.events[t][e.uuid].push(i))}clearEvents(t=[],e=[]){0===t.length&&(t=[...APP_EVENTS]);const i=[...e];for(const s of t){const t=this.events[s];if("object"!=typeof t)return;e=0===i.length?Object.keys(t):[...i];for(const i of e)delete t[i]}}dispatch(t,e={},i=[]){const s=this.events[t];if("object"==typeof s){0===i.length&&(i=Object.keys(s));for(const t of i){const i=s[t];if(Array.isArray(i))for(const t of i)if("function"==typeof t)try{t(e)}catch(t){console.error(t.message||t,t.stack||"")}}"init"===t?this.clearEvents([t],i):"destroy"===t&&this.clearEvents([],i)}}load(t,e=!0){SceneManager.app=this,this.project.fromJSON(t,e),this.world=this.project.activeWorld();const i=this.project.setting("preload");this.scene=new World3D,SceneManager.loadWorld(this.scene,this.world),SceneManager.loadStages(this.scene,this.world,i)}animate(){if(this.gameClock.isRunning()){const t=this.gameClock.getDeltaTime(),e=this.gameClock.getElapsedTime();if(this.dispatch("update",{delta:t,total:e}),this.scene.physics){this.scene.physics.onUpdate(t);for(const e of this.scene.getEntities())for(const i of e.components)"function"==typeof i.onUpdate&&i.onUpdate(t)}this.camera&&this.camera.target&&this.camera.target.isVector3}SceneManager.renderWorld(this.world),this.isPlaying&&(_animationID=requestAnimationFrame(function(){this.animate()}.bind(this)))}start(){this.isPlaying||(this.isPlaying=!0,this._appKeyDown=appKeyDown.bind(this),this._appKeyUp=appKeyUp.bind(this),this._appPointerDown=appPointerDown.bind(this),this._appPointerUp=appPointerUp.bind(this),this._appPointerMove=appPointerMove.bind(this),document.addEventListener("keydown",this._appKeyDown),document.addEventListener("keyup",this._appKeyUp),document.addEventListener("pointerdown",this._appPointerDown),document.addEventListener("pointerup",this._appPointerUp),document.addEventListener("pointermove",this._appPointerMove),this.gameClock.start(!0),SceneManager.renderWorld(this.world),cancelAnimationFrame(_animationID),_animationID=requestAnimationFrame(function(){this.animate()}.bind(this)))}pause(){this.isPlaying&&this.gameClock.toggle()}stop(){this.isPlaying&&(this.isPlaying=!1,document.removeEventListener("keydown",this._appKeyDown),document.removeEventListener("keyup",this._appKeyUp),document.removeEventListener("pointerdown",this._appPointerDown),document.removeEventListener("pointerup",this._appPointerUp),document.removeEventListener("pointermove",this._appPointerMove),cancelAnimationFrame(_animationID),_animationID=null,this.renderer&&this.renderer.clear(),this.gameClock.stop(),SceneManager.dispose(),EntityUtils.clearObject(this.camera),EntityUtils.clearObject(this.scene),this.project.clear(),this.clearEvents())}setSize(t,e){t=Math.ceil(Math.max(1,t)),e=Math.ceil(Math.max(1,e)),this.camera&&this.camera.setSize(t,e),this.renderer&&this.renderer.setSize(t,e),SceneManager.setSize(t,e)}gameCoordinates(t){this.updatePointer(t);return{x:0,y:0}}updatePointer(t){const e=this.dom.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top;this.pointer.x=i/e.width*2-1,this.pointer.y=-s/e.height*2+1}}function appKeyDown(t){this.isPlaying&&(this.keys[t.key]=!0,this.dispatch("keydown",t))}function appKeyUp(t){this.isPlaying&&(this.keys[t.key]=!1,this.dispatch("keyup",t))}function appPointerDown(t){this.isPlaying&&this.dispatch("pointerdown",t)}function appPointerUp(t){this.isPlaying&&this.dispatch("pointerup",t)}function appPointerMove(t){this.isPlaying&&this.dispatch("pointermove",t)}let Script$1=class{constructor(t=SCRIPT_FORMAT.JAVASCRIPT,e=!1){this.isScript=!0,this.type="Script",this.name="New Script",this.uuid=Maths.uuid(),this.format=t,this.category="unknown",this.line=0,this.char=0,this.errors=!1,t===SCRIPT_FORMAT.JAVASCRIPT&&(this.source=`//\n// Lifecycle Events:    init, update, destroy\n// Input Events:        keydown, keyup, pointerdown, pointerup, pointermove\n// Within Events:\n//      'this'          represents entity this script is attached to\n//      'app'           access .renderer, .project, .scene, .camera, .keys\n// Pointer Events:\n//      'event.entity'  entity under pointer (if there is one)\n// Update Event:\n//      'event.delta'   time since last frame (in seconds)\n//      'event.total'   total elapsed time (in seconds)\n//\n${variableTemplate(e)}\n// ...script scope variable declarations allowed here...\n\n// "init()" is executed when an entity is loaded\nfunction init() {\n\n}\n\n// "update()" is executed once each frame\nfunction update(event) {\n\n}\n\n// "destroy()" is executed right before an entity is removed\nfunction destroy() {\n\n}\n\n// Example Input Event\nfunction keydown(event) {\n\n}\n`)}fromJSON(t){const e=t.object;return void 0!==e.name&&(this.name=e.name),void 0!==e.uuid&&(this.uuid=e.uuid),void 0!==e.format&&(this.format=e.format),void 0!==e.category&&(this.category=e.category),void 0!==e.line&&(this.line=e.line),void 0!==e.char&&(this.char=e.char),void 0!==e.errors&&(this.errors=e.errors),void 0!==e.source&&(this.source=e.source),this}toJSON(){const t={object:{type:this.type,name:this.name,uuid:this.uuid,format:this.format,category:this.category}};return t.object.line=this.line,t.object.char=this.char,t.object.errors=structuredClone(this.errors),t.object.source=this.source,t}};function variableTemplate(t=!1){return t?"\n//\n// Example Script Properties\n//      - 'info' property text will appear in Advisor\n//      - see 'ComponentManager.js' for more information\n//\nlet variables = {\n\n    // The following 'asset' types are saved as asset UUID values\n    geometry: { type: 'asset', class: 'geometry', info: 'Geometry Asset' },\n    material: { type: 'asset', class: 'material', info: 'Material Asset' },\n    script: { type: 'asset', class: 'script', info: 'Script Asset' },\n    shape: { type: 'asset', class: 'shape', info: 'Shape Asset' },\n    texture: { type: 'asset', class: 'texture', info: 'Texture Asset' },\n    divider1: { type: 'divider' },\n    prefab: { type: 'asset', class: 'prefab', info: 'Prefab Asset' },\n    divider2: { type: 'divider' },\n\n    // Dropdown selection box, saved as 'string' value\n    select: { type: 'select', default: 'Banana', select: [ 'Apple', 'Banana', 'Cherry' ], info: 'Selection Box' },\n\n    // Numeric values, saved as 'number' values\n    number: { type: 'number', default: 0.05, min: 0, max: 1, step: 0.05, label: 'test', info: 'Floating Point' },\n    int: { type: 'int', default: 5, min: 3, max: 10, info: 'Integer' },\n\n    // Angle, saved as 'number' value in radians\n    angle: { type: 'angle', default: 2 * Math.PI, min: 0, max: 360, info: 'Angle' },\n\n    // Numeric value +/- a range value, saved as Array\n    variable: { type: 'variable', default: [ 0, 0 ], min: 0, max: 100, info: 'Ranged Value' },\n    slider: { type: 'slider', default: 0, min: 0, max: 9, step: 1, precision: 0, info: 'Numeric Slider' },\n\n    // Boolean\n    boolean: { type: 'boolean', default: true, info: 'true || false' },\n\n    // Color returns integer value at runtime\n    color: { type: 'color', default: 0xff0000, info: 'Color Value' },\n\n    // Strings\n    string: { type: 'string', info: 'String Value' },\n    multiline: { type: 'string', rows: 4, info: 'Multiline String' },\n    keyboard: { type: 'key', default: 'Escape' },\n\n    // Vectors returned as Array types at runtime\n    numberArray: { type: 'vector', size: 1, info: 'Numeric Array' },\n    vector2: { type: 'vector', size: 2, tint: true, label: [ 'x', 'y' ], info: 'Vector 2' },\n    vector3: { type: 'vector', size: 3, tint: true, min: [ 1, 1, 1 ], max: [ 2, 2, 2 ], step: 0.1, precision: 2, info: 'Vector 3' },\n    vector4: { type: 'vector', size: 4, tint: true, info: 'Vector 4' },\n}\n":"\n// Script Properties:\nlet variables = {\n//  myNumber: { type: 'number', default: 10 },\n//  myString: { type: 'string', default: '' },\n//  myColor: { type: 'color', default: 0x0000ff },\n};\n"}class MoveCamera extends Script$1{constructor(){super(),this.name="Move Camera",this.category="camera",this.source="\n// Properties\nlet variables = {\n    // Rotation in degress per second\n    moveX: { type: 'number', default: 0 },\n    moveY: { type: 'number', default: 2 },\n    moveZ: { type: 'number', default: 0 },\n};\n\nfunction update(event) {\n    app.camera.position.x += moveX * event.delta;\n    app.camera.position.y += moveY * event.delta;\n    app.camera.position.z += moveZ * event.delta;\n}\n"}}class OrbitEntity extends Script$1{constructor(){super(),this.name="Orbit Entity",this.category="camera",this.source="\n// Properties\nlet variables = {\n    distance: { type: 'number', default: 10 },\n    orbit: { type: 'boolean', default: true },\n    pan: { type: 'boolean', default: false },\n    rotate: { type: 'boolean', default: false },\n    smooth: { type: 'boolean', default: true },\n};\n\n// Locals\nlet controls;\nlet direction;\nlet quaternion;\nlet up;\nlet rotation;\n\nfunction init() {\n    // Init Orbit Controls\n    app.camera.position.x = this.position.x;\n    app.camera.position.y = this.position.y;\n    app.camera.position.z = this.position.z + distance;\n    controls = new SALT.OrbitControls(app.camera, app.renderer.domElement, this);\n    controls.enablePan = pan;\n    controls.enableRotate = rotate;\n    controls.smoothAnimate = smooth;\n\n    // Initialize Temp Variables\n    direction = new THREE.Vector3();\n    quaternion = new THREE.Quaternion();\n    up = new THREE.Vector3(0, 1, 0);\n    rotation = new THREE.Vector3().copy(this.rotation)\n}\n\nfunction update(event) {\n    if (orbit) {\n        // Maintain World Up\n        this.getWorldQuaternion(quaternion);\n        direction.copy(up).applyQuaternion(quaternion);\n        app.camera.up.lerp(direction, event.delta * 10);\n\n        // Rotate to Match Entity\n        const angleDiff = (rotation.y - this.rotation.y);\n        controls.applyRotation(angleDiff);\n        rotation.copy(this.rotation);\n    }\n\n    // Update Orbit Controls\n    controls.centerOnTarget(this);\n    controls.update(event.delta);\n}\n"}}class DragControls extends Script$1{constructor(){super(),this.name="Drag Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    updateSpeed: { type: 'slider', default: 10, min: 0, max: 50 },\n};\n\n// Locals\nlet downOnEntity = false;\nlet position;\nlet pointer;\nlet camera;\n\nfunction init() {\n    position = new THREE.Vector3();\n    pointer = new THREE.Vector3();\n    camera = new THREE.Vector3();\n\n    // Starting Position\n    position.copy(this.position);\n}\n\nfunction pointerdown(event) {\n    if (event.entity === this && event.button !== 2) {\n        const coords = app.gameCoordinates(event);\n        pointer.copy(coords ? coords : this.position);\n        camera.copy(app.camera.position);\n        downOnEntity = true;\n    }\n}\n\nfunction pointermove(event) {\n    if (downOnEntity) {\n        const coords = app.gameCoordinates(event);\n        if (coords) pointer.copy(coords);\n    }\n}\n\nfunction pointerup(event) {\n    downOnEntity = false;\n}\n\nfunction update(event) {\n    if (downOnEntity) {\n        // Update Pointer\n        if (downOnEntity) position.lerp(pointer, event.delta * updateSpeed);\n\n        // Camera Moved?\n        pointer.x += app.camera.position.x - camera.x;\n        pointer.y += app.camera.position.y - camera.y;\n        pointer.z += app.camera.position.z - camera.z;\n        camera.copy(app.camera.position);\n    } else {\n        // Dissipate Target\n        position.lerp(this.position, event.delta * updateSpeed);\n    }\n\n    // Update Position\n    this.position.lerp(position, event.delta * updateSpeed);\n}\n\n"}}class DrivingControls extends Script$1{constructor(){super(),this.name="Driving Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    axis: { type: 'select', default: 'XY (2D)', select: [ 'XY (2D)', 'XZ (3D)' ] },\n    moveSpeed: { type: 'number', default: 5 },\n    turnSpeed: { type: 'number', default: 5 },\n    keyLeft: { type: 'key', default: 'ArrowLeft' },\n    keyRight: { type: 'key', default: 'ArrowRight' },\n    keyUp: { type: 'key', default: 'ArrowUp' },\n    keyDown: { type: 'key', default: 'ArrowDown' },\n};\n\n// Locals\nlet position, rotation;\nlet direction;\nlet quaternion;\nlet up;\nlet spin;\n\nfunction init() {\n    // Prep Variables\n    moveSpeed /= 100;\n    turnSpeed /= 100;\n\n    // Initialize Temp Variables\n    position = new THREE.Vector3();\n    rotation = new THREE.Vector3();\n    direction = new THREE.Vector3();\n    quaternion = new THREE.Quaternion();\n    up = new THREE.Vector3();\n    spin = new THREE.Vector3();\n\n    // Movement Type\n    if (axis === 'XY (2D)') {\n        spin.z = turnSpeed;\n        up.y = 1;\n    }\n    if (axis === 'XZ (3D)') {\n        spin.y = turnSpeed;\n        moveSpeed *= -1;\n        up.z = 1;\n    }\n\n    // Starting Position\n    position.copy(this.position);\n}\n\nfunction update(event) {\n    // Rotate\n    if (app.keys[keyLeft] || app.keys[keyRight]) {\n        rotation.setFromEuler(this.rotation);\n        if (app.keys[keyLeft]) rotation.add(spin);\n        if (app.keys[keyRight]) rotation.sub(spin);\n        this.rotation.setFromVector3(rotation);\n    }\n\n    // Movement\n    if (app.keys[keyUp] || app.keys[keyDown]) {\n        this.getWorldQuaternion(quaternion);\n        direction.copy(up).applyQuaternion(quaternion);\n        direction.multiplyScalar(moveSpeed);\n        if (app.keys[keyUp]) position.add(direction);\n        if (app.keys[keyDown]) position.sub(direction);\n    } else {\n        // Dissipate Movement\n        position.lerp(this.position, event.delta * 10);\n    }\n\n    // Update Position\n    this.position.lerp(position, event.delta * 10);\n}\n"}}class KeyControls extends Script$1{constructor(){super(),this.name="Key Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    moveSpeed: { type: 'number', default: 5 },\n    pixels: { type: 'number', default: 1 },\n    keyLeft: { type: 'key', default: 'ArrowLeft' },\n    keyRight: { type: 'key', default: 'ArrowRight' },\n    keyUp: { type: 'key', default: 'ArrowUp' },\n    keyDown: { type: 'key', default: 'ArrowDown' },\n};\n\n// Locals\nlet position;\n\nfunction init() {\n    // Starting Position\n    position = new THREE.Vector3().copy(this.position);\n\n    // \"Target\" Position (for smooth scrolling OrbitControls)\n    this.target = new THREE.Vector3().copy(position);\n}\n\nfunction update(event) {\n    // Movement\n    if (app.keys[keyLeft] || app.keys[keyRight] || app.keys[keyUp] || app.keys[keyDown]) {\n        if (app.keys[keyLeft]) position.x -= moveSpeed / 100;\n        if (app.keys[keyRight]) position.x += moveSpeed / 100;\n        if (app.keys[keyUp]) position.y += moveSpeed / 100;\n        if (app.keys[keyDown]) position.y -= moveSpeed / 100;\n    } else {\n        // Dissipate Movement\n        position.lerp(this.target, event.delta * moveSpeed);\n    }\n\n    this.target.lerp(position, event.delta * moveSpeed);\n\n    // Update Position\n    this.position.x = ((this.target.x * 100) - (this.target.x * 100) % pixels) / 100;\n    this.position.y = ((this.target.y * 100) - (this.target.y * 100) % pixels) / 100;\n    this.position.z = ((this.target.z * 100) - (this.target.z * 100) % pixels) / 100;\n}\n"}}class ZigZagControls extends Script$1{constructor(){super(),this.name="Zig Zag Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    forward: { type: 'number', default: 2 },\n    sideways: { type: 'number', default: 4 },\n    keySwitch: { type: 'key', default: ' ' },\n};\n\nfunction update(event) {\n    this.position.x += sideways * event.delta;\n    this.position.y += forward * event.delta;\n}\n\nfunction keydown(event) {\n    if (event.key === keySwitch) sideways *= -1;\n}\n"}}class ColorChange extends Script$1{constructor(){super(),this.name="Color Change",this.category="entity",this.source="\n// Properties\nlet variables = {\n    color: { type: 'color', default: 0xff0000 },\n};\n\nfunction init() {\n    this.updateComponent('material', { color: Number(color) });\n}\n\nfunction pointerdown(event) {\n    if (event.entity === this) {\n        const clr = new THREE.Color(Math.random(), Math.random(), Math.random());\n        this.replaceComponent('material', { color: clr });\n    }\n}\n"}}class FollowCamera extends Script$1{constructor(){super(),this.name="Follow Camera",this.category="entity",this.source="\n// Properties\nlet variables = {\n    offsetX: { type: 'number', default: 0 },\n\toffsetY: { type: 'number', default: 0 },\n    offsetZ: { type: 'number', default: 0 },\n};\n\nlet offset;\n\nfunction init() {\n    offset = new THREE.Vector3();\n    if (this.target) {\n    \toffset.copy(this.position).sub(this.target.position);\n    }\n}\n\nfunction update(event) {\n    if (app.camera && app.camera.target) {\n    \tthis.position.x = app.camera.target.x + offsetX;\n    \tthis.position.y = app.camera.target.y + offsetY;\n        this.position.z = app.camera.target.z + offsetZ;\n\n        if (this.target) {\n        \tthis.target.position.copy(this.position).sub(offset);\n        }\n    }\n}\n"}}class RotateEntity extends Script$1{constructor(){super(),this.name="Rotate Entity",this.category="entity",this.source="\n// Properties\nlet variables = {\n    // Rotation in degress per second\n    rotateX: { type: 'number', default: 0 },\n    rotateY: { type: 'number', default: 0 },\n    rotateZ: { type: 'number', default: 180 },\n};\n\nfunction update(event) {\n    this.rotation.x += (rotateX * (Math.PI / 180) * event.delta);\n    this.rotation.y += (rotateY * (Math.PI / 180) * event.delta);\n    this.rotation.z += (rotateZ * (Math.PI / 180) * event.delta);\n}\n"}}class Vectors{static absolute(t){return t.x=Math.abs(t.x),t.y=Math.abs(t.y),t.z=Math.abs(t.z),t}static isNaN(t){return!!isNaN(t.x)||(!!isNaN(t.y)||(!!isNaN(t.z)||!(null==t.w||!isNaN(t.w))))}static noZero(t,e=.001){return e=Math.abs(e),Vectors.sanity(t),t.x>=0&&t.x<e&&(t.x=e),t.y>=0&&t.y<e&&(t.y=e),t.z>=0&&t.z<e&&(t.z=e),t.x<0&&t.x>-1*e&&(t.x=-1*e),t.y<0&&t.y>-1*e&&(t.y=-1*e),t.z<0&&t.z>-1*e&&(t.z=-1*e),t}static printOut(t,e=""){return""!==e&&(e+=" - "),console.info(`${e}X: ${t.x}, Y: ${t.y}, Z: ${t.z}`),t}static round(t,e=0){const i=Math.pow(10,e);return t.x=Math.round(t.x*i)/i,t.y=Math.round(t.y*i)/i,t.z=Math.round(t.z*i)/i,t}static sanity(t){return isNaN(t.x)&&(t.x=0),isNaN(t.y)&&(t.y=0),isNaN(t.z)&&(t.z=0),null!=t.w&&isNaN(t.w)&&(t.w=1),t}}class Geometry{init(t={}){if(t.isBufferGeometry){const e=t.uuid;AssetManager$1.add(t),(t=this.defaultData("style","asset")).asset=e}let e;switch(t.style){case"asset":const i=AssetManager$1.get(t.asset);i&&i.isBufferGeometry&&(e=i);break;case"box":case"capsule":case"circle":case"cone":case"cylinder":case"lathe":case"plane":case"platonicSolid":case"ring":case"roundedBox":case"shape":case"sphere":case"torus":case"torusKnot":case"tube":break;default:console.error(`GeometryComponent.init(): Invalid style '${t.style}'`)}if(e&&e.isBufferGeometry){const t=e.constructor.name;e.name=t}this.backend=e,this.data=t}dispose(){}attach(){if(this.entity){const t=this.entity.getComponent("material");t&&t.attach()}}detach(){if(this.entity){const t=this.entity.getComponent("material");t&&t.detach()}}}Geometry.config={schema:{style:[{type:"select",default:"box",select:["asset","box","capsule","circle","cone","cylinder","lathe","plane","platonicSolid","ring","roundedBox","shape","sphere","torus","torusKnot","tube"]}],asset:{type:"asset",class:"geometry",if:{style:["asset"]}},shape:{type:"asset",class:"shape",if:{style:["lathe","shape","tube"]}},styleDivider:{type:"divider"},polyhedron:[{type:"select",default:"dodecahedron",select:["dodecahedron","icosahedron","octahedron","tetrahedron"],if:{style:["platonicSolid"]}}],points:{type:"shape",alias:"points",default:null,if:{style:["lathe"]}},shapes:{type:"shape",alias:"shape",default:null,if:{style:["shape"]}},path:{type:"shape",alias:"curve",default:null,if:{style:["tube"]}},depth:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","roundedBox"]}},{type:"number",default:.5,min:0,step:"grid",if:{style:["shape"]}}],height:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","capsule","cone","cylinder","plane","roundedBox"]}}],width:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","plane","roundedBox"]}}],widthSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box","plane"]}},{type:"int",default:24,min:4,max:1024,if:{style:["sphere"]}}],heightSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box","plane"]}},{type:"int",default:1,min:1,max:1024,if:{style:["cone","cylinder"]}},{type:"int",default:24,min:1,max:1024,if:{style:["sphere"]}}],depthSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box"]}}],radius:[{type:"number",default:.25,min:0,step:.01,if:{style:["roundedBox"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["circle","cone","platonicSolid","sphere"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["torus"]}},{type:"number",default:.4,min:0,step:.01,if:{style:["torusKnot"]}},{type:"number",default:.1,min:0,step:.01,if:{style:["tube"]}}],radiusTop:[{type:"number",default:.5,min:0,step:.01,if:{style:["capsule"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["cylinder"]}}],radiusBottom:[{type:"number",default:.5,min:0,step:.01,if:{style:["capsule"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["cylinder"]}}],segments:[{type:"int",default:36,min:3,max:64,if:{style:["circle"]}},{type:"int",default:16,min:1,max:64,if:{style:["lathe"]}},{type:"int",default:4,min:1,max:10,if:{style:["roundedBox"]}}],thetaLength:[{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["circle","ring"]}},{type:"angle",default:2*Math.PI,min:0,max:360,promode:!0,if:{style:["capsule","cone","cylinder"]}},{type:"angle",default:Math.PI,min:0,max:720,promode:!0,if:{style:["sphere"]}}],thetaStart:[{type:"angle",default:0,if:{style:["circle","ring","sphere"]}},{type:"angle",default:0,promode:!0,if:{style:["capsule","cone","cylinder"]}}],phiLength:{type:"angle",default:2*Math.PI,max:360,if:{style:["lathe","sphere"]}},phiStart:{type:"angle",default:0,if:{style:["sphere"]}},capSegments:{type:"int",default:6,min:1,max:36,if:{style:["capsule"]}},radialSegments:[{type:"int",default:24,min:2,max:64,if:{style:["capsule","cone","cylinder","torus","torusKnot","tube"]}}],openEnded:{type:"boolean",default:!1,if:{style:["cone","cylinder"]}},detail:{type:"slider",default:0,min:0,max:9,step:1,precision:0,if:{style:["platonicSolid"]}},innerRadius:{type:"number",default:.25,min:0,step:.01,if:{style:["ring"]}},outerRadius:{type:"number",default:.5,min:0,step:.01,if:{style:["ring"]}},phiSegments:{type:"int",default:10,min:1,max:64,promode:!0,if:{style:["ring"]}},thetaSegments:{type:"int",default:36,min:3,max:128,if:{style:["ring"]}},steps:{type:"int",alias:"Depth Segments",default:3,min:1,max:128,promode:!0,if:{style:["shape"]}},bevelEnabled:{type:"boolean",alias:"bevel",default:!1,if:{style:["shape"]},rebuild:!0},bevelThickness:{type:"number",default:.1,min:0,step:.01,if:{style:["shape"],bevelEnabled:[!0]}},bevelSize:{type:"number",default:.1,min:0,step:.01,if:{style:["shape"],bevelEnabled:[!0]}},bevelSegments:{type:"int",default:4,min:0,max:64,promode:!0,if:{style:["shape"],bevelEnabled:[!0]}},curveSegments:{type:"int",default:16,min:1,max:128,promode:!0,if:{style:["shape"]}},tube:[{type:"number",default:.2,min:0,step:.01,if:{style:["torus"]}},{type:"number",default:.1,min:0,step:.01,if:{style:["torusKnot"]}}],tubularSegments:[{type:"int",default:32,min:3,max:128,if:{style:["torus"]}},{type:"int",default:64,min:3,max:128,if:{style:["torusKnot"]}},{type:"int",default:128,min:2,if:{style:["tube"]}}],arc:{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["torus"]}},p:{type:"number",default:2,min:1,max:128,if:{style:["torusKnot"]}},q:{type:"number",default:3,min:1,max:128,if:{style:["torusKnot"]}},closed:{type:"boolean",default:!0,if:{style:["tube"]}}},icon:"",color:"rgb(255, 113, 0)",multiple:!1,dependencies:["material"],family:["Entity3D"]},ComponentManager.register("geometry",Geometry);const blendingModes=["NoBlending","NormalBlending","AdditiveBlending","SubstractiveBlending","MultiplyBlending","CustomBlending"],sides=["FrontSide","BackSide","DoubleSide"],depthPacking=["BasicDepthPacking","RGBADepthPacking"];class Material{init(t={}){const e={};if(t.isMaterial){const e=t.uuid;AssetManager$1.add(t),(t=this.defaultData("style","asset")).asset=e}else{for(const i in t){const s=t[i];e[i]=s;let n=Material.config.schema[i];if(Array.isArray(n)&&n.length>0&&(n=n[0]),s&&n&&"asset"===n.type)if(s.isTexture)AssetManager$1.add(s);else{const t=AssetManager$1.get(s);t&&t.isTexture?e[i]=t:e[i]=null}}delete e.base,delete e.style,delete e.edgeSize,delete e.gradientSize,delete e.premultiplyAlpha,delete e.useUv,"string"==typeof e.blending&&(e.blending=blendingModes.indexOf(e.blending)),"string"==typeof e.side&&(e.side=sides.indexOf(e.side)),"BasicDepthPacking"===e.depthPacking&&(e.depthPacking=THREE.BasicDepthPacking),"RGBADepthPacking"===e.depthPacking&&(e.depthPacking=THREE.RGBADepthPacking)}let i;if("asset"===t.style){const e=AssetManager$1.get(t.asset);e&&e.isMaterial&&(i=e.clone())}else console.error(`MaterialComponent.init(): Invalid style '${t.style}'`);i&&i.isMaterial,this.backend=i,this.data=t}dispose(){}attach(){refreshMesh(this)}detach(){refreshMesh(this)}}Material.config={schema:{style:[{type:"select",default:"standard",promode:!0,select:["asset","basic","depth","lambert","matcap","normal","phong","physical","points","shader","standard"]},{type:"select",default:"standard",select:["asset","basic","points","standard"]}],styleDivider:{type:"divider"},asset:{type:"asset",class:"material",if:{style:["asset"]}},color:{type:"color",if:{style:["basic","lambert","matcap","phong","physical","points","standard"]}},emissive:{type:"color",default:0,promode:!0,if:{style:["lambert","phong","physical","standard"]}},emissiveIntensity:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["lambert","phong","physical","standard"]}},opacity:{type:"slider",default:1,min:0,max:1,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","points","standard"]}},depthTest:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}},depthWrite:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}},flatShading:{type:"boolean",default:!1,if:{style:["phong","physical","standard","normal","matcap"]}},premultiplyAlpha:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","points","standard"]}},wireframe:{type:"boolean",default:!1,if:{style:["basic","depth","lambert","normal","phong","physical","standard"]}},vertexColors:{type:"boolean",default:!1,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}},size:{type:"slider",default:.05,min:0,max:1,if:{style:["points"]}},sizeAttenuation:{type:"boolean",default:!0,if:{style:["points"]}},useUv:{type:"boolean",default:!1,if:{style:["points"]}},metalness:{type:"slider",default:.1,min:0,max:1,if:{style:["physical","standard"]}},roughness:{type:"slider",default:1,min:0,max:1,if:{style:["physical","standard"]}},specular:{type:"color",default:1118481,if:{style:["phong"]}},shininess:{type:"number",default:30,if:{style:["phong"]}},clearcoat:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},clearcoatRoughness:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},ior:{type:"slider",default:1.5,min:1,max:2,if:{style:["physical"]}},sheen:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},sheenRoughness:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},sheenColor:{type:"color",if:{style:["physical"]}},specularColor:{type:"color",promode:!0,if:{style:["physical"]}},specularIntensity:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["physical"]}},thickness:{type:"slider",default:0,min:0,max:5,if:{style:["physical"]}},transmission:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},depthPacking:{type:"select",default:"BasicDepthPacking",select:depthPacking,if:{style:["depth"]}},map:[{type:"asset",class:"texture",alias:"texture",if:{style:["basic","depth","lambert","matcap","phong","points","physical","standard"]}}],matcap:{type:"asset",class:"texture",if:{style:["matcap"]}},alphaMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","depth","lambert","matcap","phong","physical","points","standard"]}},bumpMap:{type:"asset",class:"texture",promode:!0,if:{style:["matcap","normal","phong","physical","standard"]}},bumpScale:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["matcap","normal","phong","physical","standard"]}},clearcoatNormalMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical"]}},clearcoatNormalScale:{type:"vector2",default:[1,1],promode:!0,if:{style:["physical"]}},displacementMap:{type:"asset",class:"texture",promode:!0,if:{style:["depth","matcap","normal","phong","physical","standard"]}},displacementScale:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["depth","matcap","normal","phong","physical","standard"]}},emissiveMap:{type:"asset",class:"texture",promode:!0,if:{style:["lambert","phong","physical","standard"]}},metalnessMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical","standard"]}},roughnessMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical","standard"]}},specularMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong"]}},thicknessMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical"]}},transmissionMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical"]}},aoMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},envMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},lightMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},normalMap:{type:"asset",class:"texture",if:{style:["matcap","normal","phong","physical","standard"]}},side:{type:"select",default:"FrontSide",select:sides,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}}},icon:"",color:"rgb(165, 243, 0)",multiple:!1,dependencies:["geometry"],family:["Entity3D"]},ComponentManager.register("material",Material);class Mesh{init(t={}){this.backed=mesh,this.data=t}dispose(){}attach(){this.entity&&this.backend&&this.entity.add(this.backend)}detach(){this.entity&&this.backend&&this.entity.remove(this.backend)}}Mesh.config={icon:"",color:"#F7DB63",multiple:!0,family:["Entity3D"]},ComponentManager.register("mesh",Mesh);class Script{init(t={}){if(t.isScript){const e=t.uuid;AssetManager$1.add(t),(t=this.defaultData()).script=e}const e=AssetManager$1.get(t.script);if(e&&e.isScript){t.variables||(t.variables={});let i={};if(e.source)try{const t=`${e.source}\nreturn variables;`;i=new Function("",t)()}catch(t){}for(const e in i){const s=i[e];s.type?(e in t.variables&&(s.value=t.variables[e].value),void 0===s.value&&(s.value=s.default),void 0===s.value&&(s.value=ComponentManager.defaultValue(s.type))):s.value=null}t.variables=structuredClone(i)}this.backend=void 0,this.data=t}}Script.config={schema:{script:{type:"asset",class:"script",rebuild:!0},divider:{type:"divider"},variables:{type:"object",default:{}}},icon:"",color:"#090B11",width:"40%",multiple:!0,dependencies:[],family:["Entity3D"]},ComponentManager.register("script",Script);const exampleSelect=["Apple","Banana","Cherry","Zebra","Red"];class Test{init(t={}){let e;this.backend=e,this.data=t}dispose(){}attach(){this.entity&&this.backend&&this.entity.add(this.backend)}detach(){this.entity&&this.backend&&this.entity.remove(this.backend)}}Test.config={schema:{style:[{type:"select",default:"basic",select:["asset","basic","array"]}],divider:{type:"divider"},asset:{type:"asset",if:{style:["asset"]}},assetDivider:{type:"divider"},geometry:{type:"asset",class:"geometry",if:{style:["asset"]}},material:{type:"asset",class:"material",if:{style:["asset"]}},script:{type:"asset",class:"script",if:{style:["asset"]}},shape:{type:"asset",class:"shape",if:{style:["asset"]}},texture:{type:"asset",class:"texture",if:{style:["asset"]}},prefabDivider:{type:"divider"},prefab:{type:"asset",class:"prefab",if:{style:["asset"]}},select:{type:"select",default:"Zebra",select:exampleSelect,if:{style:["basic"]}},number:{type:"number",default:.05,min:0,max:1,label:"test",if:{style:["basic"]}},int:{type:"int",default:5,min:3,max:10,if:{style:["basic"]}},angle:{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["basic"]}},variable:{type:"variable",default:[0,0],min:0,max:100,if:{style:["basic"]}},slider:{type:"slider",default:0,min:0,max:9,step:1,precision:0,if:{style:["basic"]}},boolean:{type:"boolean",default:!0,if:{style:["basic"]}},color:{type:"color",default:16711680,if:{style:["basic"]}},string:{type:"string",if:{style:["basic"]}},multiline:{type:"string",rows:4,if:{style:["basic"]}},numberArray:{type:"vector",size:1,if:{style:["array"]}},vector2:{type:"vector",size:2,tint:!0,label:["x","y"],if:{style:["array"]}},vector3:{type:"vector",size:3,tint:!0,min:[1,1,1],max:[2,2,2],step:.1,precision:2,if:{style:["array"]}},vector4:{type:"vector",size:4,tint:!0,if:{style:["array"]}}},icon:"",color:"rgb(128, 128, 128)",multiple:!1,dependencies:[],family:["Entity3D"]},ComponentManager.register("test",Test);const _gravity={x:0,y:9.81,z:0};class Physics{init(t={}){let e;this.backend=e,this.data=t}dispose(){const t=this.backend;t&&t.free()}attach(){}detach(){}onLoad(){_gravity.set(0,0,0),this.data.gravity&&_gravity.fromArray(this.data.gravity);this.backend=null}onUpdate(t=0){const e=this.backend;e&&t>.01&&(e.timestep=t,e.step())}}Physics.config={schema:{gravity:{type:"vector",default:[0,-9.807,0],size:3,tint:!0,step:.1,precision:2}},icon:"",color:"#0F4F94",multiple:!1,dependencies:[],family:["World3D"]},ComponentManager.register("physics",Physics);class Post{init(t={}){let e;switch(t.style){case"ascii":case"bloom":case"cartoon":case"dither":case"edge":case"levels":case"pixel":case"tint":break;default:console.error(`PostComponent.init(): Invalid style '${t.style}'`)}this.backend=e,this.data=t}dispose(){const t=this.backend;if(t&&t.uniforms)for(const e in t.uniforms){const i=t.uniforms[e];i&&i.value&&i.value.isTexture&&"function"==typeof i.value.dispose&&i.value.dispose()}}}Post.config={schema:{style:[{type:"select",default:"levels",select:["ascii","bloom","cartoon","dither","edge","levels","pixel","tint"]}],divider:{type:"divider"},textSize:{type:"slider",default:16,min:4,max:64,step:1,precision:0,if:{style:["ascii"]}},textColor:{type:"color",default:16777215,if:{style:["ascii"]}},characters:{type:"string",default:" .,•:-+=*!?%X0#@",if:{style:["ascii"]}},threshold:{type:"slider",default:0,min:0,max:1,step:.05,precision:2,if:{style:["bloom"]}},strength:{type:"slider",default:1,min:0,max:3,step:.1,precision:2,if:{style:["bloom"]}},radius:{type:"slider",default:0,min:0,max:1,step:.05,precision:2,if:{style:["bloom"]}},edgeColor:{type:"color",default:0,if:{style:["cartoon"]}},edgeStrength:{type:"slider",default:0,min:0,max:1,precision:2,if:{style:["cartoon"]}},gradient:{type:"slider",default:5,min:2,max:32,step:1,precision:0,if:{style:["cartoon"]}},palette:{type:"asset",class:"palette",if:{style:["dither"]}},bias:{type:"slider",default:.25,min:-1,max:1,precision:2,step:.05,if:{style:["dither"]}},scale:{type:"slider",default:1,min:1,max:9,precision:2,step:1,if:{style:["dither"]}},bitrate:{type:"slider",promode:!0,default:8,min:0,max:8,step:1,precision:0,if:{style:["levels"]}},hue:{type:"angle",default:0,min:-360,max:360,if:{style:["levels"]}},saturation:{type:"slider",default:0,min:-1,max:1,step:.1,precision:2,if:{style:["levels"]}},brightness:{type:"slider",default:0,min:-1,max:1,step:.1,precision:2,if:{style:["levels"]}},contrast:{type:"slider",default:0,min:-1,max:1,step:.1,precision:2,if:{style:["levels"]}},grayscale:{type:"slider",default:0,min:0,max:1,step:.1,precision:2,if:{style:["levels"]}},negative:{type:"boolean",default:!1,if:{style:["levels"]}},cellStyle:{type:"select",default:"none",select:["none","brick","cross","knit","tile","woven"],if:{style:["pixel"]}},cellSize:{type:"vector",default:[8,8],size:2,tint:!0,aspect:!0,label:["x","y"],min:[1,1],max:[1e3,1e3],precision:[2,2],if:{style:["pixel"]}},cutOff:{type:"slider",promode:!0,default:0,min:0,max:1,step:.05,precision:2,if:{style:["pixel"]}},color:{type:"color",default:16711680,if:{style:["tint"]}}},icon:"",color:"rgb(64, 64, 64)",multiple:!0,dependencies:[],family:["World3D"]},ComponentManager.register("post",Post),"undefined"!=typeof window&&(window.__SALINITY__?console.warn(`Salinity v${window.__SALINITY__} already imported, now importing v${VERSION}!`):window.__SALINITY__=VERSION);export{APP_EVENTS,APP_ORIENTATION,APP_SIZE,App,AssetManager$1 as AssetManager,Camera3D,Clock,ColorChange,ComponentManager,DragControls,DrivingControls,Entity3D,EntityUtils,FollowCamera,Iris,KeyControls,Maths,MoveCamera,OrbitEntity,Palette,Project,RotateEntity,SCRIPT_FORMAT,SceneManager,Script$1 as Script,Stage3D,System,VERSION,Vectors,WORLD_TYPES,World3D,ZigZagControls};
