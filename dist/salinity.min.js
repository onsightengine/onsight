/**
 * @description Salinity Engine
 * @about       Easy to use JavaScript game engine.
 * @author      Stephens Nunnally <@stevinz>
 * @version     v0.0.5
 * @license     MIT - Copyright (c) 2024 Stephens Nunnally
 * @source      https://github.com/salinityengine/core
 */
const t="0.0.5",e=1e3,i=["init","update","destroy","keydown","keyup","pointerdown","pointerup","pointermove"],s={PORTRAIT:"portrait",LANDSCAPE:"landscape"},n={STAGE_2D:"Stage2D",STAGE_3D:"Stage3D",STAGE_UI:"StageUI"},o={WORLD_2D:"World2D",WORLD_3D:"World3D",WORLD_UI:"WorldUI"},r={JAVASCRIPT:"javascript",PYTHON:"python"},a={};class l{static get(t){return t&&t.uuid&&(t=t.uuid),a[t]}static library(t,e){const i=[];t&&"string"==typeof t&&(t=t.toLowerCase()),e&&"string"==typeof e&&(e=e.toLowerCase());for(const[s,n]of Object.entries(a))t&&"string"==typeof n.type&&n.type.toLowerCase()!==t||(null==e||"string"==typeof n.category&&n.category.toLowerCase()===e)&&i.push(n);return i}static add(...t){let e;t.length>0&&Array.isArray(t[0])&&(t=t[0]);for(const i of t)i&&i.uuid&&(i.name&&""!==i.name||(i.name=i.constructor.name),a[i.uuid]=i,e=e??i);return e}static clear(){for(const t in a){a[t].isBuiltIn||l.remove(a[t],!0)}}static remove(t,e=!0){const i=Array.isArray(t)?t:[t];for(const t of i)t&&t.uuid&&a[t.uuid]&&(e&&"function"==typeof t.dispose&&t.dispose(),delete a[t.uuid])}static toJSON(){const t={};for(const e of Object.keys(c)){const i=l.library(e);if(i.length>0){t[e]=[];for(const s of i)t[e].push(s.toJSON())}}return t}static fromJSON(t,e=(()=>{})){l.clear();for(const e of Object.keys(c))if(t[e])for(const i of t[e]){const t=c[e];if(t){const e=(new t).fromJSON(i);l.add(e)}else console.warn(`AssetManager.fromJSON(): Unknown asset type '${i.type}'`)}"function"==typeof e&&e()}static register(t,e){c[t]||(c[t]=e)}}const c={},p=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];class d{static generate(){if(window.crypto&&window.crypto.randomUUID)return crypto.randomUUID();const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,s=4294967295*Math.random()|0;return(p[255&t]+p[t>>8&255]+p[t>>16&255]+p[t>>24&255]+"-"+p[255&e]+p[e>>8&255]+"-"+p[e>>16&15|64]+p[e>>24&255]+"-"+p[63&i|128]+p[i>>8&255]+"-"+p[i>>16&255]+p[i>>24&255]+p[255&s]+p[s>>8&255]+p[s>>16&255]+p[s>>24&255]).toLowerCase()}static arrayFromObjects(...t){t.length>0&&Array.isArray(t[0])&&(t=t[0]);const e=[];for(const i of t)"object"==typeof i&&i.uuid&&e.push(i.uuid);return e}}function h(t){let e=t[0],i=t[1],s=t[2];return Math.sqrt(e*e+i*i+s*s)}function u(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function y(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function f(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function m(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function g(t){let e=t[0],i=t[1],s=t[2];return e*e+i*i+s*s}function v(t,e){let i=e[0],s=e[1],n=e[2],o=i*i+s*s+n*n;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function b(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function S(t,e,i){let s=e[0],n=e[1],o=e[2],r=i[0],a=i[1],l=i[2];return t[0]=n*l-o*a,t[1]=o*r-s*l,t[2]=s*a-n*r,t}const w=function(){const t=[0,0,0],e=[0,0,0];return function(i,s){u(t,i),u(e,s),v(t,t),v(e,e);let n=b(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();!function(){const t=[0,0,0]}();function x(t,e,i=.001){return t<e+i&&t>e-i}const k=[0,0,0],E=[0,0,0],C=[0,0,0];class O{static radiansToDegrees(t){return t*(180/Math.PI)}static degreesToRadians(t){return Math.PI/180*t}static clamp(t,e,i){return(t=Number(t))<e&&(t=e),t>i&&(t=i),t}static damp(t,e,i,s){return O.lerp(t,e,1-Math.exp(-i*s))}static lerp(t,e,i){return(1-i)*t+i*e}static roundTo(t,e=0){const i=Math.pow(10,e);return Math.round(t*i)/i}static fuzzyFloat(t,e,i=.001){return t<e+i&&t>e-i}static fuzzyVector(t,e,i=.001){return!1!==O.fuzzyFloat(t.x,e.x,i)&&(!1!==O.fuzzyFloat(t.y,e.y,i)&&!1!==O.fuzzyFloat(t.z,e.z,i))}static fuzzyQuaternion(t,e,i=.001){return!1!==O.fuzzyVector(t,e,i)&&!1!==O.fuzzyFloat(t.w,e.w,i)}static isPowerOfTwo(t){return!(t&t-1)&&0!==t}static addCommas(t){return t.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,")}static countDecimals(t){return Math.floor(t.valueOf())===t.valueOf()?0:t.toString().split(".")[1].length||0}static isNumber(t){return null!=t&&"number"==typeof t&&!Number.isNaN(t)&&Number.isFinite(t)}static noZero(t,e=1e-5){return e=Math.abs(e),(t=O.sanity(t))>=0&&t<e&&(t=e),t<0&&t>-1*e&&(t=-1*e),t}static sanity(t){return isNaN(t)&&(t=0),t}static lineCollision(t,e,i,s,n,o,r,a){let l=(a-o)*(i-t)-(r-n)*(s-e);if(O.fuzzyFloat(l,0,1e-7))return!1;let c=((r-n)*(e-o)-(a-o)*(t-n))/l,p=((i-t)*(e-o)-(s-e)*(t-n))/l;return c>=0&&c<=1&&p>=0&&p<=1}static lineRectCollision(t,e,i,s,n,o,r,a){const l=O.lineCollision(t,e,i,s,n,o,n,a),c=O.lineCollision(t,e,i,s,r,o,r,a),p=O.lineCollision(t,e,i,s,n,o,r,o),d=O.lineCollision(t,e,i,s,n,a,r,a);return l||c||p||d}static triangleArea(t,e,i){return f(k,i,e),f(E,t,e),S(C,k,E),.5*h(C)}static randomFloat(t,e){return t+Math.random()*(e-t)}static randomInt(t=0,e=1){return t+Math.floor(Math.random()*(e-t))}}class P{static isObject(t){return t&&"object"==typeof t&&!Array.isArray(t)}static save(t,e){try{const i=document.createElement("a");i.href=t,i.download=e||"data.json",i.click(),setTimeout((function(){window.URL.revokeObjectURL(t)}),0)}catch(t){return void console.warn(t)}}static saveBuffer(t,e,i={type:"application/octet-stream"}){const s=URL.createObjectURL(new Blob([t],{type:i}));P.save(s,e)}static saveImage(t,e){P.save(t,e)}static saveString(t,e){const i=URL.createObjectURL(new Blob([t],{type:"text/plain"}));P.save(i,e)}static detectOS(){const t={Android:["android"],iOS:["iphone","ipad","ipod","ios"],Linux:["linux","x11","wayland"],MacOS:["mac","darwin","osx","os x"],Windows:["win"]},e=window.navigator.userAgent,i=window.navigator.userAgentData,s=(i?i.platform:e).toLowerCase();for(const e in t)for(const i of t[e])if(-1!==s.indexOf(i))return e;return"Unknown OS"}static fullscreen(t){if(document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement){const t=document;(t.cancelFullScreen||t.exitFullscreen||t.webkitCancelFullScreen||t.webkitExitFullscreen||t.mozCancelFullScreen).call(t)}else{const e=t??document.body;(e.requestFullScreen||e.webkitRequestFullScreen||e.mozRequestFullScreen||e.msRequestFullScreen).call(e)}}static metaKeyOS(){return"Mac"===P.detectOS()?"⌘":"⌃"}static sleep(t){const e=performance.now();let i=e;for(;i-e<t;)i=performance.now()}static waitForObject(t="",e,i,s=100,n=-1,o=5e3){let r=performance.now(),a=performance.now();!function l(){n>0&&performance.now()-r>n?console.info(`Operation: ${t} timed out`):(o>0&&performance.now()-a>o&&(console.info(`Still waiting on operation: ${t}`),a=performance.now()),e&&"function"==typeof e&&!e()?setTimeout(l,s):i&&"function"==typeof i&&i())}()}}const D={};class A{static defaultValue(t){switch(t){case"select":case"asset":case"divider":return null;case"number":case"int":case"angle":case"slider":return 0;case"variable":return[0,0];case"vector":return[0];case"option":return[!1];case"boolean":return!1;case"color":return 16777215;case"string":case"key":return"";case"object":return{};default:console.warn(`ComponentManager.defaultValue(): Unknown property type '${t}'`)}return null}static registered(t=""){const e=D[t];return e||console.warn(`ComponentManager.registered(): Component '${t}' not registered'`),e}static registeredTypes(){return Object.keys(D)}static register(t="",e){if(t=t.toLowerCase(),D[t])return console.warn(`ComponentManager.register(): Component '${t}' already registered`);P.isObject(e.config)||(e.config={}),P.isObject(e.config.schema)||(e.config.schema={});const i=e.config.schema;for(const t in i){const e=Array.isArray(i[t])?i[t]:[i[t]];for(const t of e){if(void 0===t.type)console.warn("ComponentManager.register(): All schema properties require a 'type' value");else if("divider"===t.type)continue;void 0===t.default&&(t.default=A.defaultValue(t.type)),void 0!==t.proMode&&(t.promode=t.proMode)}}D[t]=class extends e{constructor(){super(),this.isComponent=!0,this.type=t,this.attached=!0,this.expanded=!0,this.order=0,this.tag="",this.entity=null,this.backend=void 0,this.data={}}init(t={}){this.dispose(),"function"==typeof super.init&&super.init(t)}dispose(){"function"==typeof super.dispose&&super.dispose(),"object"==typeof this.backend&&"function"==typeof this.backend.dispose&&this.backend.dispose(),this.backend=void 0}attach(){this.attached=!0,"function"==typeof super.attach&&super.attach()}detach(){this.attached=!1,"function"==typeof super.detach&&super.detach()}defaultData(){const t={};for(let e=0,i=arguments.length;e<i;e+=2)t[arguments[e]]=arguments[e+1];return A.sanitizeData(this.type,t),t.base={isComponent:!0,attached:this.attached,expanded:this.expanded,order:this.order,tag:this.tag,type:this.type},t}toJSON(){const t=this.data?.style?this.defaultData("style",this.data.style):this.defaultData();for(const e in t)void 0!==this.data[e]&&(this.data[e]&&this.data[e].isTexture?t[e]=this.data[e].uuid:t[e]=structuredClone(this.data[e]));return t}}}static includeData(t,e,i=void 0){for(const s in t.if){const n=Array.isArray(t.if[s])?t.if[s]:[t.if[s]];let o=!1,r=!1;for(const t of n)o=o||e[s]===t,r=!(!r&&void 0!==i)||i[s]===t;if(!o||!r)return!1}for(const s in t.not){const n=Array.isArray(t.not[s])?t.not[s]:[t.not[s]];let o=!1,r=!1;for(const t of n)o=o||e[s]===t,r=!r&&void 0!==i&&i[s]===t;if(o||r)return!1}return!0}static sanitizeData(t,e){e&&"object"==typeof e||(e={});const i=A.registered(t);if(!i||!i.config||!i.config.schema)return;const s=i.config.schema;if(P.isObject(s))for(const t in s){const i=Array.isArray(s[t])?s[t]:[s[t]];let n;for(const t of i)if("divider"!==t.type&&A.includeData(t,e)){n=t;break}if(void 0!==n){if(void 0===e[t]&&(Array.isArray(n.default)?e[t]=[...n.default]:"object"==typeof n.default?e[t]=structuredClone(n.default):e[t]=n.default),O.isNumber(e[t])){const i=n.min??-1/0,s=n.max??1/0;e[t]<i&&(e[t]=i),e[t]>s&&(e[t]=s)}}else delete e[t]}}static stripData(t,e,i){const s=A.registered(t);if(!s||!s.config||!s.config.schema)return;const n=s.config.schema;if(P.isObject(n))for(const t in n){let s=!1;const o=Array.isArray(n[t])?n[t]:[n[t]];for(const t of o)if("divider"!==t.type&&A.includeData(t,e,i)){s=!0;break}!0!==s&&delete i[t]}}}class M{constructor(t="Entity"){this.isEntity=!0,this.type="Entity",this.name=t,this.uuid=d.generate(),this.category=null,this.locked=!1,this.visible=!0,this.components=[],this.children=[],this.parent=null,this.loadedDistance=0}componentFamily(){return["Entity"]}addComponent(t,e={},i=!0){const s=A.registered(t);if(void 0===s)return;const n=s.config;let o=this.getComponent(t);if(o&&!s.config.multiple||(o=new s,this.components.push(o)),n.dependencies&&i)for(const t of n.dependencies)null==this.getComponent(t)&&this.addComponent(t,{},!1);return A.sanitizeData(t,e),o.detach(),o.entity=this,o.init(e),o.attach(),o}attachComponent(t){return this.components.push(t),t.detach(),t.entity=this,t.init(t.toJSON()),t.attach(),t}updateComponent(t,e={},i=0){const s=this.getComponentsWithProperties("type",t)[i];if(!s||!s.isComponent)return;const n=s.data??{};return Object.assign(n,e),A.sanitizeData(t,n),this.detach(),this.init(n),this.attach(),s}replaceComponent(t,e={},i=0){const s=this.getComponentsWithProperties("type",t)[i];if(s&&s.isComponent)return A.sanitizeData(t,e),s.detach(),s.init(e),s.attach(),s}getComponent(t,e){if(void 0===e)return this.getComponentByProperty("type",t);const i=this.getComponentsWithProperties("type",t,"tag",e);return i.length>0?i[0]:void 0}getComponentByTag(t){return this.getComponentByProperty("tag",t)}getComponentByType(t){return this.getComponentByProperty("type",t)}getComponentsByType(t){return this.getComponentsWithProperties("type",t)}getComponentByProperty(t,e){for(const i of this.components)if(i[t]===e)return i}getComponentsWithProperties(){const t=[];for(const e of this.components){let i=!0;for(let t=0;t<arguments.length;t+=2){const s=arguments[t+1];if(e[arguments[t]]!==s){i=!1;break}}i&&t.push(e)}return t}removeComponent(t){if(!t)return;const e=this.components.indexOf(t);if(-1!==e)return this.components.splice(e,1),t.detach(),t;console.warn(`Entity.removeComponent(): Component ${t.uuid}, type '${t.type}' not found`)}rebuildComponents(){for(const t of this.components)t.detach(),t.init(t.toJSON()),t.attach();return this}traverseComponents(t){for(const e of this.components)if("function"==typeof t&&t(e))return}addEntity(...t){for(const e of t)e&&e.isEntity&&-1===this.children.indexOf(e)&&e!==this&&(e.removeFromParent(),e.parent=this,this.children.push(e));return this}getEntities(){return[...this.children]}getEntityById(t){return this.getEntityByProperty("id",parseInt(t))}getEntityByName(t){return this.getEntityByProperty("name",t)}getEntityByUUID(t){return this.getEntityByProperty("uuid",t)}getEntityByProperty(t,e){if(this[t]===e)return this;for(const i of this.getEntities()){const s=i.getEntityByProperty(t,e);if(s)return s}}removeEntity(t,e=!1){if(!t)return;if(!e&&t.locked)return;const i=this.children.indexOf(t);return-1!==i&&(t.parent=null,this.children.splice(i,1)),t}traverse(t,e=!0){if("function"!=typeof t||!t(this))for(const i of this.children)i.traverse(t,e)}changeParent(t=void 0,e=-1){if(t||(t=this.parent),!t||!t.isEntity)return;const i=this.parent;return-1===e&&i&&(e=i.children.indexOf(this)),t.addEntity(this),-1!==e&&(t.children.splice(e,0,this),t.children.pop()),this}parentEntity(){let t=this;for(;t&&t.parent;){if(t.parent.isStage)return t;if(t.parent.isWorld)return t;t=t.parent}return t}parentStage(){return this.isStage||this.isWorld?this:this.parent&&this.parent.isEntity?this.parent.parentStage():null}parentWorld(){return this.isWorld?this:this.parent&&this.parent.isEntity?this.parent.parentWorld():null}removeFromParent(){const t=this.parent;return t&&t.removeEntity(this),this}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){this.dispose(),this.name=t.name,this.category=t.category,this.locked=t.locked,this.visible=t.visible;for(const e of t.components){this.addComponent(e.type,e.toJSON(),!1).tag=e.tag}if(e)for(const e of t.getEntities())this.addEntity(e.clone());return this}dispose(){for(;this.components.length>0;){const t=this.components[0];this.removeComponent(t),"function"==typeof t.dispose&&t.dispose()}for(;this.children.length>0;)this.children[0].dispose();return this.removeFromParent(),this}toJSON(e=!0){const i={type:this.type,name:this.name,uuid:this.uuid,category:this.category,locked:this.locked,visible:this.visible,components:[],children:[]};!1===e&&(i.meta={type:this.type,version:t});for(const t of this.components)i.components.push(t.toJSON());if(e)for(const t of this.getEntities())i.children.push(t.toJSON(e));return i}fromJSON(t){if(void 0!==t.type&&(this.type=t.type),void 0!==t.name&&(this.name=t.name),void 0!==t.uuid&&(this.uuid=t.uuid),void 0!==t.category&&(this.category=t.category),void 0!==t.locked&&(this.locked=t.locked),void 0!==t.visible&&(this.visible=t.visible),t.components)for(const e of t.components)if(e&&e.base&&e.base.type){this.addComponent(e.base.type,e,!1).tag=e.base.tag}if(t.children)for(const e of t.children){const t=M.type(e.type);if(t){const i=(new t).fromJSON(e);this.addEntity(i)}else console.warn(`Entity.fromJSON(): Unknown entity type '${e.type}'`)}return this}static register(t,e){U[t]||(U[t]=e)}static type(t){return U[t]}}const U={Entity:M};function N(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t}function T(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t}function I(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t}function z(t){var e=t[0],i=t[1];return Math.sqrt(e*e+i*i)}function W(t,e){return t[0]*e[1]-t[1]*e[0]}class R extends Array{constructor(t=0,e=t){return super(t,e),this}get x(){return this[0]}get y(){return this[1]}set x(t){this[0]=t}set y(t){this[1]=t}set(t,e=t){return t.length?this.copy(t):(function(t,e,i){t[0]=e,t[1]=i}(this,t,e),this)}copy(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],this}add(t,e){return e?N(this,t,e):N(this,this,t),this}sub(t,e){return e?T(this,t,e):T(this,this,t),this}multiply(t){var e,i,s;return t.length?(i=this,s=t,(e=this)[0]=i[0]*s[0],e[1]=i[1]*s[1]):I(this,this,t),this}divide(t){var e,i,s;return t.length?(i=this,s=t,(e=this)[0]=i[0]/s[0],e[1]=i[1]/s[1]):I(this,this,1/t),this}inverse(t=this){var e,i;return i=t,(e=this)[0]=1/i[0],e[1]=1/i[1],this}len(){return z(this)}distance(t){return t?(e=this,s=(i=t)[0]-e[0],n=i[1]-e[1],Math.sqrt(s*s+n*n)):z(this);var e,i,s,n}squaredLen(){return this.squaredDistance()}squaredDistance(t){return t?(e=this,s=(i=t)[0]-e[0],n=i[1]-e[1],s*s+n*n):function(t){var e=t[0],i=t[1];return e*e+i*i}(this);var e,i,s,n}negate(t=this){var e,i;return i=t,(e=this)[0]=-i[0],e[1]=-i[1],this}cross(t,e){return e?W(t,e):W(this,t)}scale(t){return I(this,this,t),this}normalize(){var t,e,i,s,n;return t=this,i=(e=this)[0],s=e[1],(n=i*i+s*s)>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,this}dot(t){return i=t,(e=this)[0]*i[0]+e[1]*i[1];var e,i}equals(t){return i=t,(e=this)[0]===i[0]&&e[1]===i[1];var e,i}applyMatrix3(t){var e,i,s,n,o;return e=this,s=t,n=(i=this)[0],o=i[1],e[0]=s[0]*n+s[3]*o+s[6],e[1]=s[1]*n+s[4]*o+s[7],this}applyMatrix4(t){return function(t,e,i){let s=e[0],n=e[1];t[0]=i[0]*s+i[4]*n+i[12],t[1]=i[1]*s+i[5]*n+i[13]}(this,this,t),this}lerp(t,e){return function(t,e,i,s){var n=e[0],o=e[1];t[0]=n+s*(i[0]-n),t[1]=o+s*(i[1]-o)}(this,this,t,e),this}clone(){return new R(this[0],this[1])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t}log(t=""){""!==t&&(t+=" - "),console.log(`${t}X: ${this.x}, Y: ${this.y}`)}}class L extends Array{constructor(t=0,e=t,i=t){return super(t,e,i),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,i=t){return t.length?this.copy(t):(function(t,e,i,s){t[0]=e,t[1]=i,t[2]=s}(this,t,e,i),this)}copy(t){return u(this,t),this}add(t,e){return e?y(this,t,e):y(this,this,t),this}sub(t,e){return e?f(this,t,e):f(this,this,t),this}multiply(t){var e,i,s;return t.length?(i=this,s=t,(e=this)[0]=i[0]*s[0],e[1]=i[1]*s[1],e[2]=i[2]*s[2]):m(this,this,t),this}divide(t){var e,i,s;return t.length?(i=this,s=t,(e=this)[0]=i[0]/s[0],e[1]=i[1]/s[1],e[2]=i[2]/s[2]):m(this,this,1/t),this}inverse(t=this){var e,i;return i=t,(e=this)[0]=1/i[0],e[1]=1/i[1],e[2]=1/i[2],this}len(){return h(this)}distance(t){return t?function(t,e){let i=e[0]-t[0],s=e[1]-t[1],n=e[2]-t[2];return Math.sqrt(i*i+s*s+n*n)}(this,t):h(this)}squaredLen(){return g(this)}squaredDistance(t){return t?function(t,e){let i=e[0]-t[0],s=e[1]-t[1],n=e[2]-t[2];return i*i+s*s+n*n}(this,t):g(this)}negate(t=this){var e,i;return i=t,(e=this)[0]=-i[0],e[1]=-i[1],e[2]=-i[2],this}cross(t,e){return e?S(this,t,e):S(this,this,t),this}scale(t){return m(this,this,t),this}normalize(){return v(this,this),this}dot(t){return b(this,t)}equals(t){return i=t,(e=this)[0]===i[0]&&e[1]===i[1]&&e[2]===i[2];var e,i}fuzzyEquals(t,e){return function(t,e,i=.001){return!1!==x(t[0],e[0],i)&&!1!==x(t[1],e[1],i)&&!1!==x(t[2],e[2],i)}(this,t,e)}applyMatrix3(t){return function(t,e,i){let s=e[0],n=e[1],o=e[2];t[0]=s*i[0]+n*i[3]+o*i[6],t[1]=s*i[1]+n*i[4]+o*i[7],t[2]=s*i[2]+n*i[5]+o*i[8]}(this,this,t),this}applyMatrix4(t){return function(t,e,i){let s=e[0],n=e[1],o=e[2],r=i[3]*s+i[7]*n+i[11]*o+i[15];r=r||1,t[0]=(i[0]*s+i[4]*n+i[8]*o+i[12])/r,t[1]=(i[1]*s+i[5]*n+i[9]*o+i[13])/r,t[2]=(i[2]*s+i[6]*n+i[10]*o+i[14])/r}(this,this,t),this}scaleRotateMatrix4(t){return function(t,e,i){let s=e[0],n=e[1],o=e[2],r=i[3]*s+i[7]*n+i[11]*o+i[15];r=r||1,t[0]=(i[0]*s+i[4]*n+i[8]*o)/r,t[1]=(i[1]*s+i[5]*n+i[9]*o)/r,t[2]=(i[2]*s+i[6]*n+i[10]*o)/r}(this,this,t),this}applyQuaternion(t){return function(t,e,i){let s=e[0],n=e[1],o=e[2],r=i[0],a=i[1],l=i[2],c=a*o-l*n,p=l*s-r*o,d=r*n-a*s,h=a*d-l*p,u=l*c-r*d,y=r*p-a*c,f=2*i[3];c*=f,p*=f,d*=f,h*=2,u*=2,y*=2,t[0]=s+c+h,t[1]=n+p+u,t[2]=o+d+y}(this,this,t),this}angle(t){return w(this,t)}lerp(t,e){return function(t,e,i,s){let n=e[0],o=e[1],r=e[2];t[0]=n+s*(i[0]-n),t[1]=o+s*(i[1]-o),t[2]=r+s*(i[2]-r)}(this,this,t,e),this}clone(){return new L(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],i=this[1],s=this[2];return this[0]=t[0]*e+t[4]*i+t[8]*s,this[1]=t[1]*e+t[5]*i+t[9]*s,this[2]=t[2]*e+t[6]*i+t[10]*s,this.normalize()}log(t=""){""!==t&&(t+=" - "),console.log(`${t}X: ${this.x}, Y: ${this.y}, Z: ${this.z}`)}}class J extends M{constructor(t=o.WORLD_2D,e="World 1"){super(e),-1===Object.values(o).indexOf(t)&&(console.warn(`World: Invalid world type '${t}', using 'World2D`),t=o.WORLD_2D),this.isWorld=!0,this.type=t,this.position=new R,this.activeStageUUID=null,this.loadPosition=new L,this.loadDistance=0}componentFamily(){return["World",this.type]}activeStage(){return this.getStageByUUID(this.activeStageUUID)??this}setActiveStage(t){return this.activeStageUUID=null,t&&t.isEntity&&this.getStageByUUID(t.uuid)&&(this.activeStageUUID=t.uuid),this}addEntity(...t){if(super.addEntity(...t),!this.activeStageUUID){const t=this.getStages();t.length>0&&this.setActiveStage(t[0])}return this}getEntities(t=!0){const e=[];for(const i of super.getEntities())!t&&i.isStage||e.push(i);return e}getFirstStage(){const t=this.getStages();if(t.length>0)return t[0]}getStages(){const t=[];for(const e of super.getEntities())e.isStage&&t.push(e);return t}getStageByName(t){const e=this.getEntityByProperty("name",t);if(e&&e.isStage)return e}getStageByUUID(t){const e=this.getEntityByProperty("uuid",t);if(e&&e.isStage)return e}getStageByProperty(t,e){for(const i of this.getStages())if(i[t]===e)return i}traverseStages(t,e=!0){if(!("function"==typeof t&&t(this)))for(const i of this.getStages())i.traverse(t,e)}copy(t,e=!0){super.copy(t,e),this.position.copy(t.position);const i=t.getStages().indexOf(t.activeStage());return this.activeStageUUID=-1!==i?this.getStages()[i].uuid:null,this.loadPosition.copy(t.loadPosition),this.loadDistance=t.loadDistance,this}dispose(){super.dispose()}toJSON(t=!0){const e=super.toJSON(t);return e.position=JSON.stringify(this.position.toArray()),e.activeStageUUID=this.activeStageUUID,e.loadPosition=JSON.stringify(this.loadPosition.toArray()),e.loadDistance=this.loadDistance,e}fromJSON(t){return super.fromJSON(t),void 0!==t.position&&this.position.copy(JSON.parse(t.position)),void 0!==t.activeStageUUID&&(this.activeStageUUID=t.activeStageUUID),void 0!==t.loadPosition&&this.loadPosition.copy(JSON.parse(t.loadPosition)),void 0!==t.loadDistance&&(this.loadDistance=t.loadDistance),this}}M.register("World2D",J),M.register("World3D",J),M.register("WorldUI",J);class j{constructor(t="My Project"){this.isProject=!0,this.type="Project",this.name=t,this.uuid=d.generate(),this.activeWorldUUID=null,this.startWorldUUID=null,this.notes="",this.settings={orientation:s.PORTRAIT,preload:10,unload:10},this.worlds={}}setting(t){switch("object"!=typeof this.settings&&(this.settings={}),t){case"orientation":case"orient":return this.settings.orientation??s.PORTRAIT;case"preload":case"add":return this.settings.preload??10;case"unload":case"remove":return this.settings.unload??10}}activeWorld(){let t=this.getWorldByUUID(this.activeWorldUUID);if(!t||!t.isWorld){const e=Object.keys(this.worlds);e.length>0&&(t=this.worlds[e[0]])}return t}setActiveWorld(t){return t&&t.isWorld?(this.worlds[t.uuid]&&(this.activeWorldUUID=t.uuid),this):this}addWorld(t){return t&&t.isWorld?(-1!==Object.values(o).indexOf(t.type)?(this.worlds[t.uuid]=t,null==this.activeWorldUUID&&(this.activeWorldUUID=t.uuid)):console.error(`Project.addWorld(): Invalid world type '${t.type}'`,t),this):this}getWorldByName(t){return this.getWorldByProperty("name",t)}getWorldByUUID(t){if(t)return this.worlds[t]}getWorldByProperty(t,e){for(const i in this.worlds){const s=this.worlds[i];if(s[t]===e)return s}}removeWorld(t){t&&t.isWorld&&delete this.worlds[t.uuid]}traverseWorlds(t,e=!0){for(const i in this.worlds){const s=this.worlds[i];"function"==typeof t&&t(s),e&&s.traverseStages(t,e)}}worldCount(t){if(!t)return Object.keys(this.worlds).length;let e=0;for(const i in this.worlds)this.worlds[i].type===t&&e++;return e}findEntityByUUID(t,e=!1){let i=[];e&&(i=[...this.worlds]);for(const e of i){if(t&&e.uuid&&t===e.uuid)return e;const i=e.getEntityByProperty("uuid",t);if(i)return i}}clear(){for(const t in this.worlds){const e=this.worlds[t];this.removeWorld(e),"function"==typeof e.dispose&&e.dispose()}this.name="My Project",this.uuid=d.generate(),this.activeWorldUUID=null}toJSON(){const e={};e.meta={type:"Salinity",version:t,generator:"Salinity.Project.toJSON()"},e.assets=l.toJSON(),e.object={type:this.type,name:this.name,uuid:this.uuid,activeWorldUUID:this.activeWorldUUID,startWorldUUID:this.startWorldUUID},e.notes=this.notes,e.settings=structuredClone(this.settings),e.worlds=[];for(const t in this.worlds){const i=this.worlds[t];e.worlds.push(i.toJSON())}return e}fromJSON(e,i=!0){const s=e.meta?.type??"undefined";if("Salinity"!==s)return void console.error(`Project.fromJSON(): Unknown project type '${s}', expected 'Salinity'`);const n=e.meta?.version??"unknown";if(n!==t&&console.warn(`Project.fromJSON(): Project saved in 'v${n}', attempting to load with 'v${t}'`),e.object&&e.object.type===this.type){this.clear(),i&&l.fromJSON(e.assets),this.name=e.object.name,this.uuid=e.object.uuid,this.activeWorldUUID=e.object.activeWorldUUID,this.startWorldUUID=e.object.startWorldUUID,this.notes=e.notes,this.settings=structuredClone(e.settings);for(const t of e.worlds){const e=(new J).fromJSON(t);console.log(e.type),this.addWorld(e)}return this}console.error("Project.fromJSON(): Save file corrupt, no 'Project' object found!")}}class B{static isIterable(t){return t&&"function"==typeof t[Symbol.iterator]}static swapItems(t,e,i){return t[e]=t.splice(i,1,t[e])[0],t}static combineEntityArrays(t,e){const i=[...t];for(const s of e)!1===B.includesEntity(s,t)&&i.push(s);return i}static compareEntityArrays(t,e){t=Array.isArray(t)?t:[t],e=Array.isArray(e)?e:[e];for(const i of t)if(!1===B.includesEntity(i,e))return!1;for(const i of e)if(!1===B.includesEntity(i,t))return!1;return!0}static includesEntity(t,...e){if(!t||!t.isEntity)return!1;if(0===e.length)return!1;e.length>0&&Array.isArray(e[0])&&(e=e[0]);for(const i of e)if(i.isEntity&&i.uuid===t.uuid)return!0;return!1}static removeEntityFromArray(t,...e){if(e.length>0&&Array.isArray(e[0])&&(e=e[0]),!t||!t.isEntity)return[...e];const i=[];for(const s of e)s.uuid!==t.uuid&&i.push(s);return i}static shareValues(t,e){for(let i=0;i<t.length;i++)if(e.includes(t[i]))return!0;return!1}}class F{#t=!1;#e=0;#i=0;#s=0;#n=0;#o=0;#r=0;#a=0;constructor(t=!0,e=0){t&&this.start(),this.#e-=e,this.#s-=e}start(t=!1){t&&this.reset(),this.#e=performance.now(),this.#s=this.#e,this.#t=!0}stop(){this.getDeltaTime(),this.#t=!1}toggle(){this.#t?this.stop():this.start()}reset(){this.#e=performance.now(),this.#s=this.#e,this.#i=0,this.#n=0}getElapsedTime(){return this.#i}getDeltaTime(){if(!this.#t)return this.#a=0,0;const t=performance.now(),e=(t-this.#s)/1e3;return this.#s=t,this.#i+=e,this.#n++,this.#o+=e,this.#r++,this.#o>1&&(this.#a=this.#r,this.#o=0,this.#r=0),e}isRunning(){return this.#t}isStopped(){return!this.#t}count(){return this.#n}averageDelta(){const t=1/this.#a;return Math.min(1,t)}fps(){return this.#a}}const V=i.toString(),$={};for(const t of i)$[t]=t;const _="app,"+V,q=JSON.stringify($).replace(/\"/g,"");class H{static app=void 0;static cloneChildren(t,e){for(const i of e.getEntities()){const s=i.clone(!1);if(H.loadScriptsFromComponents(s,i),i.isStage||H.cloneChildren(s,i),e.isStage&&t.isWorld){const e=t.loadDistance+Math.abs(s.position.length());s.traverse((t=>{t.loadedDistance=e}))}t.add(s);for(const t of s.components)"function"==typeof t.onLoad&&t.onLoad()}}static loadScriptsFromComponents(t,e){if(t&&t.isEntity&&e&&e.isEntity&&e.components)for(const i of e.components){if("script"!==i.type||!i.data)continue;const e=i.data.script,s=l.get(e);if(!s||!s.isScript)continue;let n=`${s.source}\n`;for(const t in i.data.variables){const e=i.data.variables[t];if(e&&"object"==typeof e)if(void 0!==e.value){let i=JSON.stringify(e.value);i=i.replace(/[.*+`'"?^${}()|[\]\\]/g,"\\$&"),n+=`let ${t} = JSON.parse('${i}');\n`}else n+=`let ${t} = undefined;\n`}n+=`return ${q};`;const o=new Function(_,n).bind(t)(H.app);for(const e in o){if("function"!=typeof o[e])continue;const i=o[e].bind(t);H.app.addEvent(e,t,i)}}}static removeEntity(t,e){t&&t.isWorld&&e&&e.isEntity&&(H.app.dispatch("destroy",{},[e.uuid]),t.removeEntity(e,!0),"function"==typeof e.dispose&&e.dispose())}static cloneStage(t,e,i=!0){t&&t.isWorld&&e&&e.isStage&&H.cloneChildren(t,e)}static loadStages(t,e,i=10){if(!t||!t.isWorld)return;if(!e||!e.isWorld)return;if(i<0)return;const s=t.loadDistance;let n=0;for(;t.loadDistance-s<i;){const s=[];for(const i of e.getStages())i.enabled&&(i.start>=0&&i.start>t.loadDistance||i.finish>=0&&i.finish<t.loadDistance||s.push(i));if(!(s.length>0)){t.loadDistance+=i;break}H.cloneStage(t,s[Math.floor(Math.random()*s.length)]),n++}n>0&&H.app.dispatch("init")}static loadWorld(t,e){if(!t||!t.isWorld)return;if(!e||!e.isWorld)return;if(null!=e.background)if(e.background.isColor)t.background=e.background.clone();else{const i=l.get(e.background);i&&i.isTexture&&(t.background=i.clone())}const i=e.getComponentByType("physics");if(i){const e=t.addComponent(i.type,i.toJSON(),!1);e.onLoad(),t.physics=e}H.cloneChildren(t,e)}static renderWorld(t){t&&t.isWorld}static setCamera(t,e){H.app.camera=e}static setSize(t,e){H.app}static dispose(){}}class Y extends M{constructor(t=n.STAGE_2D,e="Start"){super(e),-1===Object.values(n).indexOf(t)&&(console.warn(`Stage: Invalid stage type '${t}', using 'Stage2D`),t=n.STAGE_2D),this.isStage=!0,this.type=t,this.enabled=!0,this.start=0,this.finish=-1,this.beginPosition=new L,this.endPosition=new L}componentFamily(){return["Stage",this.type]}copy(t,e=!0){return super.copy(t,e),this.enabled=t.enabled,this.start=t.start,this.finish=t.finish,this.beginPosition.copy(t.beginPosition),this.endPosition.copy(t.endPosition),this}dispose(){super.dispose()}toJSON(t=!0){const e=super.toJSON(t);return e.enabled=this.enabled,e.start=this.start,e.finish=this.finish,e.beginPosition=JSON.stringify(this.beginPosition.toArray()),e.endPosition=JSON.stringify(this.endPosition.toArray()),e}fromJSON(t){return super.fromJSON(t),void 0!==t.enabled&&(this.enabled=t.enabled),void 0!==t.start&&(this.start=t.start),void 0!==t.finish&&(this.finish=t.finish),void 0!==t.beginPosition&&this.beginPosition.copy(JSON.parse(t.beginPosition)),void 0!==t.endPosition&&this.endPosition.copy(JSON.parse(t.endPosition)),this}}M.register("Stage2D",Y),M.register("Stage3D",Y),M.register("StageUI",Y);let X=null;class Z{constructor(){this.project=new j,this.dom=document.createElement("div"),this.events={},this.world=null,this.scene=null,this.gameClock=new F(!1),this.keys={},this.pointer={x:0,y:0},this.isPlaying=!1}addEvent(t,e,s){-1!==i.indexOf(t)&&e&&e.uuid&&"function"==typeof s&&(this.events[t]||(this.events[t]={}),this.events[t][e.uuid]||(this.events[t][e.uuid]=[]),this.events[t][e.uuid].push(s))}clearEvents(t=[],e=[]){0===t.length&&(t=[...i]);const s=[...e];for(const i of t){const t=this.events[i];if("object"!=typeof t)return;e=0===s.length?Object.keys(t):[...s];for(const i of e)delete t[i]}}dispatch(t,e={},i=[]){const s=this.events[t];if("object"==typeof s){0===i.length&&(i=Object.keys(s));for(const t of i){const i=s[t];if(Array.isArray(i))for(const t of i)if("function"==typeof t)try{t(e)}catch(t){console.error(t.message||t,t.stack||"")}}"init"===t?this.clearEvents([t],i):"destroy"===t&&this.clearEvents([],i)}}load(t,e=!0){H.app=this,this.project.fromJSON(t,e),this.world=this.project.activeWorld();const i=this.project.setting("preload");this.scene=new J(o.WORLD_2D),H.loadWorld(this.scene,this.world),H.loadStages(this.scene,this.world,i)}animate(){if(this.gameClock.isRunning()){const t=this.gameClock.getDeltaTime(),e=this.gameClock.getElapsedTime();if(this.dispatch("update",{delta:t,total:e}),this.scene.physics){this.scene.physics.onUpdate(t);for(const e of this.scene.getEntities())for(const i of e.components)"function"==typeof i.onUpdate&&i.onUpdate(t)}this.camera&&this.camera.target&&this.camera.target.isVector3}H.renderWorld(this.world),this.isPlaying&&(X=requestAnimationFrame(function(){this.animate()}.bind(this)))}start(){this.isPlaying||(this.isPlaying=!0,this._appKeyDown=K.bind(this),this._appKeyUp=G.bind(this),this._appPointerDown=Q.bind(this),this._appPointerUp=tt.bind(this),this._appPointerMove=et.bind(this),document.addEventListener("keydown",this._appKeyDown),document.addEventListener("keyup",this._appKeyUp),document.addEventListener("pointerdown",this._appPointerDown),document.addEventListener("pointerup",this._appPointerUp),document.addEventListener("pointermove",this._appPointerMove),this.gameClock.start(!0),H.renderWorld(this.world),cancelAnimationFrame(X),X=requestAnimationFrame(function(){this.animate()}.bind(this)))}pause(){this.isPlaying&&this.gameClock.toggle()}stop(){this.isPlaying&&(this.isPlaying=!1,document.removeEventListener("keydown",this._appKeyDown),document.removeEventListener("keyup",this._appKeyUp),document.removeEventListener("pointerdown",this._appPointerDown),document.removeEventListener("pointerup",this._appPointerUp),document.removeEventListener("pointermove",this._appPointerMove),cancelAnimationFrame(X),X=null,this.renderer&&this.renderer.clear(),this.gameClock.stop(),H.dispose(),this.project.clear(),this.clearEvents())}setSize(t,e){t=Math.ceil(Math.max(1,t)),e=Math.ceil(Math.max(1,e)),this.camera&&this.camera.setSize(t,e),this.renderer&&this.renderer.setSize(t,e),H.setSize(t,e)}gameCoordinates(t){this.updatePointer(t);return{x:0,y:0}}updatePointer(t){const e=this.dom.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top;this.pointer.x=i/e.width*2-1,this.pointer.y=-s/e.height*2+1}}function K(t){this.isPlaying&&(this.keys[t.key]=!0,this.dispatch("keydown",t))}function G(t){this.isPlaying&&(this.keys[t.key]=!1,this.dispatch("keyup",t))}function Q(t){this.isPlaying&&this.dispatch("pointerdown",t)}function tt(t){this.isPlaying&&this.dispatch("pointerup",t)}function et(t){this.isPlaying&&this.dispatch("pointermove",t)}class it{constructor(){this.items={}}add(t,e){this.items[t]=e}get(t){return this.items[t]}getByProperty(t,e){for(const i in this.items)if(this.items[i][t]===e)return this.items[i]}remove(t){delete this.items[t]}removeByProperty(t,e){for(const i in this.items)this.items[i][t]===e&&delete this.items[i]}clear(){this.items={}}}class st{constructor(t,e,i){const s=this;let n,o=!1,r=0,a=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){a++,o||"function"!=typeof s.onStart||s.onStart(t,r,a),o=!0},this.itemEnd=function(t){r++,"function"==typeof s.onProgress&&s.onProgress(t,r,a),r===a&&(o=!1,"function"==typeof s.onLoad&&s.onLoad())},this.itemError=function(t){"function"==typeof s.onError&&s.onError(t)},this.resolveURL=function(t){return n?n(t):t},this.setURLModifier=function(t){return n=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,i=l.length;e<i;e+=2){const i=l[e],s=l[e+1];if(i.global&&(i.lastIndex=0),i.test(t))return s}return null}}}const nt=new st;class ot{constructor(t){this.manager=void 0!==t?t:nt,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise((function(s,n){i.load(t,s,e,n)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const rt={};class at extends ot{constructor(t){super(t)}load(t,e,i,s){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const n=it.get(t);if(void 0!==n)return this.manager.itemStart(t),setTimeout((()=>{e&&e(n),this.manager.itemEnd(t)}),0),n;if(void 0!==rt[t])return void rt[t].push({onLoad:e,onProgress:i,onError:s});rt[t]=[],rt[t].push({onLoad:e,onProgress:i,onError:s});const o=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),r=this.mimeType,a=this.responseType;fetch(o).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("FileLoader.load(): HTTP Status 0 received"),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const i=rt[t],s=e.body.getReader(),n=e.headers.get("X-File-Size")||e.headers.get("Content-Length"),o=n?parseInt(n):0,r=0!==o;let a=0;const l=new ReadableStream({start(t){!function e(){s.read().then((({done:s,value:n})=>{if(s)t.close();else{a+=n.byteLength;const s=new ProgressEvent("progress",{lengthComputable:r,loaded:a,total:o});for(let t=0,e=i.length;t<e;t++){const e=i[t];e.onProgress&&e.onProgress(s)}t.enqueue(n),e()}}))}()}});return new Response(l)}console.error(`Fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(a){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,r)));case"json":return t.json();default:if(void 0===r)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(r),i=e&&e[1]?e[1].toLowerCase():void 0,s=new TextDecoder(i);return t.arrayBuffer().then((t=>s.decode(t)))}}})).then((e=>{it.add(t,e);const i=rt[t];delete rt[t];for(let t=0,s=i.length;t<s;t++){const s=i[t];s.onLoad&&s.onLoad(e)}})).catch((e=>{const i=rt[t];if(void 0===i)throw this.manager.itemError(t),e;delete rt[t];for(let t=0,s=i.length;t<s;t++){const s=i[t];s.onError&&s.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class lt extends ot{constructor(t){super(t)}load(t,e,i,s){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const n=this,o=it.get(t);if(void 0!==o)return n.manager.itemStart(t),setTimeout((function(){e&&e(o),n.manager.itemEnd(t)}),0),o;const r=document.createElement("img");function a(){c(),it.add(t,this),e&&e(this),n.manager.itemEnd(t)}function l(e){c(),s&&s(e),n.manager.itemError(t),n.manager.itemEnd(t)}function c(){r.removeEventListener("load",a,!1),r.removeEventListener("error",l,!1)}return r.addEventListener("load",a,!1),r.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(r.crossOrigin=this.crossOrigin),n.manager.itemStart(t),r.src=t,r}}class ct{constructor(t=""){this.isAsset=!0,this.type="Asset",this.name=t??"",this.uuid=d.generate(),this.category="unknown"}toJSON(){return{type:this.type,name:this.name,uuid:this.uuid,category:this.category}}fromJSON(t){return void 0!==t.name&&(this.name=t.name),void 0!==t.uuid&&(this.uuid=t.uuid),void 0!==t.category&&(this.category=t.category),this}}class pt extends ct{constructor(){super("New Palette"),this.isPalette=!0,this.type="Palette",this.colors=[]}default16(){return this.colors=[0,8421504,12632256,16777215,65535,255,128,8388736,16711935,16711680,8388608,8421376,16776960,65280,32768,32896],this}purpleGold(){return this.colors=[0,16777215,13893887,16762880],this}toJSON(){const t=super.toJSON();return t.colors=JSON.stringify(this.colors),t}fromJSON(t){return super.fromJSON(t),void 0!==t.colors&&(this.colors=JSON.parse(t.colors)),this}}l.register("Palette",pt);let dt=class extends ct{constructor(t=r.JAVASCRIPT,e=!1){super("New Script"),this.isScript=!0,this.type="Script",this.format=t,this.position=0,this.scrollLeft=0,this.scrollTop=0,this.selectFrom=0,this.selectTo=0,t===r.JAVASCRIPT?this.source=`//\n// Lifecycle Events:    init, update, destroy\n// Input Events:        keydown, keyup, pointerdown, pointerup, pointermove\n// Within Events:\n//      'this'          represents entity this script is attached to\n//      'app'           access .renderer, .project, .scene, .camera, .keys\n// Pointer Events:\n//      'event.entity'  entity under pointer (if there is one)\n// Update Event:\n//      'event.delta'   time since last frame (in seconds)\n//      'event.total'   total elapsed time (in seconds)\n//\n${function(t=!1){return t?"\n//\n// Example Script Properties\n//      - 'info' property text will appear in Advisor\n//      - see 'ComponentManager.js' for more information\n//\nlet variables = {\n\n    // The following 'asset' types are saved as asset UUID values\n    geometry: { type: 'asset', class: 'geometry', info: 'Geometry Asset' },\n    material: { type: 'asset', class: 'material', info: 'Material Asset' },\n    script: { type: 'asset', class: 'script', info: 'Script Asset' },\n    shape: { type: 'asset', class: 'shape', info: 'Shape Asset' },\n    texture: { type: 'asset', class: 'texture', info: 'Texture Asset' },\n    divider1: { type: 'divider' },\n    prefab: { type: 'asset', class: 'prefab', info: 'Prefab Asset' },\n    divider2: { type: 'divider' },\n\n    // Dropdown selection box, saved as 'string' value\n    select: { type: 'select', default: 'Banana', select: [ 'Apple', 'Banana', 'Cherry' ], info: 'Selection Box' },\n\n    // Numeric values, saved as 'number' values\n    number: { type: 'number', default: 0.05, min: 0, max: 1, step: 0.05, label: 'test', info: 'Floating Point' },\n    int: { type: 'int', default: 5, min: 3, max: 10, info: 'Integer' },\n\n    // Angle, saved as 'number' value in radians\n    angle: { type: 'angle', default: 2 * Math.PI, min: 0, max: 360, info: 'Angle' },\n\n    // Numeric value +/- a range value, saved as Array\n    variable: { type: 'variable', default: [ 0, 0 ], min: 0, max: 100, info: 'Ranged Value' },\n    slider: { type: 'slider', default: 0, min: 0, max: 9, step: 1, precision: 0, info: 'Numeric Slider' },\n\n    // Boolean\n    boolean: { type: 'boolean', default: true, info: 'true || false' },\n\n    // Color returns integer value at runtime\n    color: { type: 'color', default: 0xff0000, info: 'Color Value' },\n\n    // Strings\n    string: { type: 'string', info: 'String Value' },\n    multiline: { type: 'string', rows: 4, info: 'Multiline String' },\n    keyboard: { type: 'key', default: 'Escape' },\n\n    // Vectors returned as Array types at runtime\n    numberArray: { type: 'vector', size: 1, info: 'Numeric Array' },\n    vector2: { type: 'vector', size: 2, tint: true, label: [ 'x', 'y' ], info: 'Vector 2' },\n    vector3: { type: 'vector', size: 3, tint: true, min: [ 1, 1, 1 ], max: [ 2, 2, 2 ], step: 0.1, precision: 2, info: 'Vector 3' },\n    vector4: { type: 'vector', size: 4, tint: true, info: 'Vector 4' },\n};\n":"\n// Script Properties:\nlet variables = {\n//  myNumber: { type: 'number', default: 10 },\n//  myString: { type: 'string', default: '' },\n//  myColor: { type: 'color', default: 0x0000ff },\n};\n"}(e)}\n// ...script scope variable declarations allowed here...\n\n// "init()" is executed when an entity is loaded\nfunction init() {\n\n}\n\n// "update()" is executed once each frame\nfunction update(event) {\n\n}\n\n// "destroy()" is executed right before an entity is removed\nfunction destroy() {\n\n}\n\n// Example Input Event\nfunction keydown(event) {\n\n}\n`:t===r.PYTHON&&(this.source="# This program adds two numbers\n\nnum1 = 1.5\nnum2 = 6.3\n\n# Add two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))\n")}toJSON(){const t=super.toJSON();return t.format=this.format,t.position=this.position,t.scrollLeft=this.scrollLeft,t.scrollTop=this.scrollTop,t.selectFrom=this.selectFrom,t.selectTo=this.selectTo,t.source=this.source,t}fromJSON(t){return super.fromJSON(t),void 0!==t.format&&(this.format=t.format),void 0!==t.position&&(this.position=t.position),void 0!==t.scrollLeft&&(this.scrollLeft=t.scrollLeft),void 0!==t.scrollTop&&(this.scrollTop=t.scrollTop),void 0!==t.selectFrom&&(this.selectFrom=t.selectFrom),void 0!==t.selectTo&&(this.selectTo=t.selectTo),void 0!==t.source&&(this.source=t.source),this}};l.register("Script",dt);class ht extends dt{constructor(){super(),this.name="Move Camera",this.category="camera",this.source="\n// Properties\nlet variables = {\n    // Rotation in degress per second\n    moveX: { type: 'number', default: 0 },\n    moveY: { type: 'number', default: 2 },\n    moveZ: { type: 'number', default: 0 },\n};\n\nfunction update(event) {\n    app.camera.position.x += moveX * event.delta;\n    app.camera.position.y += moveY * event.delta;\n    app.camera.position.z += moveZ * event.delta;\n}\n"}}class ut extends dt{constructor(){super(),this.name="Orbit Entity",this.category="camera",this.source="\n// Properties\nlet variables = {\n    distance: { type: 'number', default: 10 },\n    orbit: { type: 'boolean', default: true },\n    pan: { type: 'boolean', default: false },\n    rotate: { type: 'boolean', default: false },\n    smooth: { type: 'boolean', default: true },\n};\n\n// Locals\nlet controls;\nlet direction;\nlet quaternion;\nlet up;\nlet rotation;\n\nfunction init() {\n    // Init Orbit Controls\n    app.camera.position.x = this.position.x;\n    app.camera.position.y = this.position.y;\n    app.camera.position.z = this.position.z + distance;\n    controls = new SALT.OrbitControls(app.camera, app.renderer.domElement, this);\n    controls.enablePan = pan;\n    controls.enableRotate = rotate;\n    controls.smoothAnimate = smooth;\n\n    // Initialize Temp Variables\n    direction = new THREE.Vector3();\n    quaternion = new THREE.Quaternion();\n    up = new THREE.Vector3(0, 1, 0);\n    rotation = new THREE.Vector3().copy(this.rotation)\n}\n\nfunction update(event) {\n    if (orbit) {\n        // Maintain World Up\n        this.getWorldQuaternion(quaternion);\n        direction.copy(up).applyQuaternion(quaternion);\n        app.camera.up.lerp(direction, event.delta * 10);\n\n        // Rotate to Match Entity\n        const angleDiff = (rotation.y - this.rotation.y);\n        controls.applyRotation(angleDiff);\n        rotation.copy(this.rotation);\n    }\n\n    // Update Orbit Controls\n    controls.centerOnTarget(this);\n    controls.update(event.delta);\n}\n"}}class yt extends dt{constructor(){super(),this.name="Drag Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    updateSpeed: { type: 'slider', default: 10, min: 0, max: 50 },\n};\n\n// Locals\nlet downOnEntity = false;\nlet position;\nlet pointer;\nlet camera;\n\nfunction init() {\n    position = new THREE.Vector3();\n    pointer = new THREE.Vector3();\n    camera = new THREE.Vector3();\n\n    // Starting Position\n    position.copy(this.position);\n}\n\nfunction pointerdown(event) {\n    if (event.entity === this && event.button !== 2) {\n        const coords = app.gameCoordinates(event);\n        pointer.copy(coords ? coords : this.position);\n        camera.copy(app.camera.position);\n        downOnEntity = true;\n    }\n}\n\nfunction pointermove(event) {\n    if (downOnEntity) {\n        const coords = app.gameCoordinates(event);\n        if (coords) pointer.copy(coords);\n    }\n}\n\nfunction pointerup(event) {\n    downOnEntity = false;\n}\n\nfunction update(event) {\n    if (downOnEntity) {\n        // Update Pointer\n        if (downOnEntity) position.lerp(pointer, event.delta * updateSpeed);\n\n        // Camera Moved?\n        pointer.x += app.camera.position.x - camera.x;\n        pointer.y += app.camera.position.y - camera.y;\n        pointer.z += app.camera.position.z - camera.z;\n        camera.copy(app.camera.position);\n    } else {\n        // Dissipate Target\n        position.lerp(this.position, event.delta * updateSpeed);\n    }\n\n    // Update Position\n    this.position.lerp(position, event.delta * updateSpeed);\n}\n\n"}}class ft extends dt{constructor(){super(),this.name="Driving Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    axis: { type: 'select', default: 'XY (2D)', select: [ 'XY (2D)', 'XZ (3D)' ] },\n    moveSpeed: { type: 'number', default: 5 },\n    turnSpeed: { type: 'number', default: 5 },\n    keyLeft: { type: 'key', default: 'ArrowLeft' },\n    keyRight: { type: 'key', default: 'ArrowRight' },\n    keyUp: { type: 'key', default: 'ArrowUp' },\n    keyDown: { type: 'key', default: 'ArrowDown' },\n};\n\n// Locals\nlet position, rotation;\nlet direction;\nlet quaternion;\nlet up;\nlet spin;\n\nfunction init() {\n    // Prep Variables\n    moveSpeed /= 100;\n    turnSpeed /= 100;\n\n    // Initialize Temp Variables\n    position = new THREE.Vector3();\n    rotation = new THREE.Vector3();\n    direction = new THREE.Vector3();\n    quaternion = new THREE.Quaternion();\n    up = new THREE.Vector3();\n    spin = new THREE.Vector3();\n\n    // Movement Type\n    if (axis === 'XY (2D)') {\n        spin.z = turnSpeed;\n        up.y = 1;\n    }\n    if (axis === 'XZ (3D)') {\n        spin.y = turnSpeed;\n        moveSpeed *= -1;\n        up.z = 1;\n    }\n\n    // Starting Position\n    position.copy(this.position);\n}\n\nfunction update(event) {\n    // Rotate\n    if (app.keys[keyLeft] || app.keys[keyRight]) {\n        rotation.setFromEuler(this.rotation);\n        if (app.keys[keyLeft]) rotation.add(spin);\n        if (app.keys[keyRight]) rotation.sub(spin);\n        this.rotation.setFromVector3(rotation);\n    }\n\n    // Movement\n    if (app.keys[keyUp] || app.keys[keyDown]) {\n        this.getWorldQuaternion(quaternion);\n        direction.copy(up).applyQuaternion(quaternion);\n        direction.multiplyScalar(moveSpeed);\n        if (app.keys[keyUp]) position.add(direction);\n        if (app.keys[keyDown]) position.sub(direction);\n    } else {\n        // Dissipate Movement\n        position.lerp(this.position, event.delta * 10);\n    }\n\n    // Update Position\n    this.position.lerp(position, event.delta * 10);\n}\n"}}class mt extends dt{constructor(){super(),this.name="Key Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    moveSpeed: { type: 'number', default: 5 },\n    pixels: { type: 'number', default: 1 },\n    keyLeft: { type: 'key', default: 'ArrowLeft' },\n    keyRight: { type: 'key', default: 'ArrowRight' },\n    keyUp: { type: 'key', default: 'ArrowUp' },\n    keyDown: { type: 'key', default: 'ArrowDown' },\n};\n\n// Locals\nlet position;\n\nfunction init() {\n    // Starting Position\n    position = new THREE.Vector3().copy(this.position);\n\n    // \"Target\" Position (for smooth scrolling OrbitControls)\n    this.target = new THREE.Vector3().copy(position);\n}\n\nfunction update(event) {\n    // Movement\n    if (app.keys[keyLeft] || app.keys[keyRight] || app.keys[keyUp] || app.keys[keyDown]) {\n        if (app.keys[keyLeft]) position.x -= moveSpeed / 100;\n        if (app.keys[keyRight]) position.x += moveSpeed / 100;\n        if (app.keys[keyUp]) position.y += moveSpeed / 100;\n        if (app.keys[keyDown]) position.y -= moveSpeed / 100;\n    } else {\n        // Dissipate Movement\n        position.lerp(this.target, event.delta * moveSpeed);\n    }\n\n    this.target.lerp(position, event.delta * moveSpeed);\n\n    // Update Position\n    this.position.x = ((this.target.x * 100) - (this.target.x * 100) % pixels) / 100;\n    this.position.y = ((this.target.y * 100) - (this.target.y * 100) % pixels) / 100;\n    this.position.z = ((this.target.z * 100) - (this.target.z * 100) % pixels) / 100;\n}\n"}}class gt extends dt{constructor(){super(),this.name="Zig Zag Controls",this.category="control",this.source="\n// Properties\nlet variables = {\n    forward: { type: 'number', default: 2 },\n    sideways: { type: 'number', default: 4 },\n    keySwitch: { type: 'key', default: ' ' },\n};\n\nfunction update(event) {\n    this.position.x += sideways * event.delta;\n    this.position.y += forward * event.delta;\n}\n\nfunction keydown(event) {\n    if (event.key === keySwitch) sideways *= -1;\n}\n"}}class vt extends dt{constructor(){super(),this.name="Color Change",this.category="entity",this.source="\n// Properties\nlet variables = {\n    color: { type: 'color', default: 0xff0000 },\n};\n\nfunction init() {\n    this.updateComponent('material', { color: Number(color) });\n}\n\nfunction pointerdown(event) {\n    if (event.entity === this) {\n        const clr = new THREE.Color(Math.random(), Math.random(), Math.random());\n        this.replaceComponent('material', { color: clr });\n    }\n}\n"}}class bt extends dt{constructor(){super(),this.name="Follow Camera",this.category="entity",this.source="\n// Properties\nlet variables = {\n    offsetX: { type: 'number', default: 0 },\n    offsetY: { type: 'number', default: 0 },\n    offsetZ: { type: 'number', default: 0 },\n};\n\nlet offset;\n\nfunction init() {\n    offset = new THREE.Vector3();\n    if (this.target) {\n        offset.copy(this.position).sub(this.target.position);\n    }\n}\n\nfunction update(event) {\n    if (app.camera && app.camera.target) {\n        this.position.x = app.camera.target.x + offsetX;\n        this.position.y = app.camera.target.y + offsetY;\n        this.position.z = app.camera.target.z + offsetZ;\n\n        if (this.target) {\n            this.target.position.copy(this.position).sub(offset);\n        }\n    }\n}\n"}}class St extends dt{constructor(){super(),this.name="Rotate Entity",this.category="entity",this.source="\n// Properties\nlet variables = {\n    // Rotation in degress per second\n    rotateX: { type: 'number', default: 0 },\n    rotateY: { type: 'number', default: 0 },\n    rotateZ: { type: 'number', default: 180 },\n};\n\nfunction update(event) {\n    this.rotation.x += (rotateX * (Math.PI / 180) * event.delta);\n    this.rotation.y += (rotateY * (Math.PI / 180) * event.delta);\n    this.rotation.z += (rotateZ * (Math.PI / 180) * event.delta);\n}\n"}}class wt{static absolute(t){return t.x=Math.abs(t.x),t.y=Math.abs(t.y),t.z=Math.abs(t.z),t}static isNaN(t){return!!isNaN(t.x)||(!!isNaN(t.y)||(!!isNaN(t.z)||!(null==t.w||!isNaN(t.w))))}static noZero(t,e=.001){return e=Math.abs(e),wt.sanity(t),t.x>=0&&t.x<e&&(t.x=e),t.y>=0&&t.y<e&&(t.y=e),t.z>=0&&t.z<e&&(t.z=e),t.x<0&&t.x>-1*e&&(t.x=-1*e),t.y<0&&t.y>-1*e&&(t.y=-1*e),t.z<0&&t.z>-1*e&&(t.z=-1*e),t}static printOut(t,e=""){return""!==e&&(e+=" - "),console.info(`${e}X: ${t.x}, Y: ${t.y}, Z: ${t.z}`),t}static round(t,e=0){const i=Math.pow(10,e);return t.x=Math.round(t.x*i)/i,t.y=Math.round(t.y*i)/i,t.z=Math.round(t.z*i)/i,t}static sanity(t){return isNaN(t.x)&&(t.x=0),isNaN(t.y)&&(t.y=0),isNaN(t.z)&&(t.z=0),null!=t.w&&isNaN(t.w)&&(t.w=1),t}}class xt extends M{constructor(t="Entity"){super(t),this.isEntity2D=!0,this.type="Entity2D",this.lookAtCamera=!1,this.bloom=!1}componentFamily(){return["Entity2D"]}copy(t,e=!0){return super.copy(t,e),this.lookAtCamera=t.lookAtCamera,this.bloom=t.bloom,this}dispose(){super.dispose()}toJSON(t=!0){const e=super.toJSON(t);return e.lookAtCamera=this.lookAtCamera,e.bloom=this.bloom,e}fromJSON(t){return super.fromJSON(t),void 0!==t.lookAtCamera&&(this.lookAtCamera=t.lookAtCamera),void 0!==t.bloom&&(this.bloom=t.bloom),this}}M.register("Entity2D",xt);class kt extends M{constructor(t="Entity"){super(t),this.isEntity3D=!0,this.type="Entity3D",this.lookAtCamera=!1,this.lookAtYOnly=!1,this.bloom=!1}componentFamily(){return["Entity3D"]}copy(t,e=!0){return super.copy(t,e),this.lookAtCamera=t.lookAtCamera,this.lookAtYOnly=t.lookAtYOnly,this.bloom=t.bloom,this}dispose(){super.dispose()}toJSON(t=!0){const e=super.toJSON(t);return e.lookAtCamera=this.lookAtCamera,e.lookAtYOnly=this.lookAtYOnly,e.bloom=this.bloom,e}fromJSON(t){return super.fromJSON(t),void 0!==t.lookAtCamera&&(this.lookAtCamera=t.lookAtCamera),void 0!==t.lookAtYOnly&&(this.lookAtYOnly=t.lookAtYOnly),void 0!==t.bloom&&(this.bloom=t.bloom),this}}M.register("Entity3D",kt);class Et extends kt{constructor({name:t,type:e="PerspectiveCamera",width:i=1e3,height:s=1e3,fit:n,near:o,far:r,fieldOfView:a}={}){super(t??"Camera"),"OrthographicCamera"!==e&&"PerspectiveCamera"!==e&&(e="PerspectiveCamera"),this.isCamera=!0,this.isCamera3D=!0,this.type=e,"width"!==n&&"height"!==n&&(n="none"),this.fit=n,this.near=o??("PerspectiveCamera"===e?.01:-1e3),this.far=r??1e3,this.fieldOfView=a??58.1,this.isPerspectiveCamera="PerspectiveCamera"===e,this.isOrthographicCamera="OrthographicCamera"===e,this.aspect=1,this.rotateLock=!1,this.view=null,this.zoom=1,this.fov=58.1,this.setSize(i,s)}updateMatrix(){}getWorldDirection(t){}updateMatrixWorld(t){}updateWorldMatrix(t,e){}changeType(t){if(!t||"string"!=typeof t)return this;if("orthographic"===(t=t.toLowerCase().replace("camera","")))this.type="OrthographicCamera";else{if("perspective"!==t)return this;this.type="PerspectiveCamera"}return this.isPerspectiveCamera="PerspectiveCamera"===this.type,this.isOrthographicCamera="OrthographicCamera"===this.type,this.isPerspectiveCamera&&(this.near=10/this.far),this.isOrthographicCamera&&(this.near=-1*this.far),this.updateProjectionMatrix(),this}changeFit(t){return"landscape"===t&&(t="width"),"portrait"===t&&(t="height"),"width"!==t&&"height"!==t&&(t="none"),this.fit=t,this}setSize(t=1e3,i=1e3){if(this.lastWidth=t,this.lastHeight=i,this.aspect=t/i,"height"===this.fit)this.fov=this.fieldOfView;else{const t=Math.tan(Math.PI/180*this.fieldOfView/2);"width"===this.fit?this.fov=360/Math.PI*Math.atan(t/this.aspect):this.fov=360/Math.PI*Math.atan(t*(i/e))}return"width"===this.fit?i=(t=e)/this.aspect:"height"===this.fit&&(t=(i=e)*this.aspect),this.left=-t/2,this.right=t/2,this.top=i/2,this.bottom=-i/2,this.updateProjectionMatrix(),this}updateProjectionMatrix(t){t&&(t.isObject3D&&(t=t.position),this.target.copy(t));const e=this.position.distanceTo(this.target),i=O.noZero(1e3/e);if(this.zoom=i,this.isPerspectiveCamera){let t=this.near*Math.tan(Math.PI/180*.5*this.fov),e=2*t,i=this.aspect*e,s=-.5*i;const n=this.view;if(n&&n.enabled){const o=n.fullWidth,r=n.fullHeight;s+=n.offsetX*i/o,t-=n.offsetY*e/r,i*=n.width/o,e*=n.height/r}this.projectionMatrix.makePerspective(s,s+i,t,t-e,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}if(this.isOrthographicCamera){const t=(this.right-this.left)/(2*i),e=(this.top-this.bottom)/(2*i),s=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let o=s-t,r=s+t,a=n+e,l=n-e;const c=this.view;if(c&&c.enabled){const t=(this.right-this.left)/c.fullWidth/i,e=(this.top-this.bottom)/c.fullHeight/i;o+=t*c.offsetX,r=o+t*c.width,a-=e*c.offsetY,l=a-e*c.height}this.projectionMatrix.makeOrthographic(o,r,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}}setViewOffset(t,e,i,s,n,o){this.view||(this.view={}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=s,this.view.width=n,this.view.height=o,this.setSize(t,e)}clearViewOffset(){this.view&&this.view.enabled&&(this.view.enabled=!1,this.setSize(this.view.fullWidth,this.view.fullHeight))}copy(t,e=!0){return super.copy(t,e),this.changeType(t.type),this.fit=t.fit,this.near=t.near,this.far=t.far,this.fieldOfView=t.fieldOfView,this.setSize(t.lastWidth,t.lastHeight),this}toJSON(t=!0){const e=super.toJSON(t);return e.cameraType=this.type,e.type="Camera3D",e.fit=this.fit,e.near=this.near,e.far=this.far,e.fieldOfView=this.fieldOfView,e}fromJSON(t){return super.fromJSON(t),void 0!==t.cameraType&&(this.type=t.cameraType,this.changeType(this.type)),void 0!==t.fit&&(this.fit=t.fit),void 0!==t.near&&(this.near=t.near),void 0!==t.far&&(this.far=t.far),void 0!==t.fieldOfView&&(this.fieldOfView=t.fieldOfView),this}}M.register("Camera3D",Et);class Ct extends M{constructor(t="Entity"){super(t),this.isEntityUI=!0,this.type="EntityUI"}componentFamily(){return["EntityUI"]}copy(t,e=!0){return super.copy(t,e),this}dispose(){super.dispose()}toJSON(t=!0){return super.toJSON(t)}fromJSON(t){return super.fromJSON(t),this}}M.register("EntityUI",Ct);class Ot{init(t={}){if(t.isBufferGeometry){const e=t.uuid;l.add(t),(t=this.defaultData("style","asset")).asset=e}let e;switch(t.style){case"asset":const i=l.get(t.asset);i&&i.isBufferGeometry&&(e=i);break;case"box":case"capsule":case"circle":case"cone":case"cylinder":case"lathe":case"plane":case"platonicSolid":case"ring":case"roundedBox":case"shape":case"sphere":case"torus":case"torusKnot":case"tube":break;default:console.error(`GeometryComponent.init(): Invalid style '${t.style}'`)}if(e&&e.isBufferGeometry){const t=e.constructor.name;e.name=t}this.backend=e,this.data=t}dispose(){}attach(){if(this.entity){const t=this.entity.getComponent("material");t&&t.attach()}}detach(){if(this.entity){const t=this.entity.getComponent("material");t&&t.detach()}}}Ot.config={schema:{style:[{type:"select",default:"box",select:["asset","box","capsule","circle","cone","cylinder","lathe","plane","platonicSolid","ring","roundedBox","shape","sphere","torus","torusKnot","tube"]}],asset:{type:"asset",class:"geometry",if:{style:["asset"]}},shape:{type:"asset",class:"shape",if:{style:["lathe","shape","tube"]}},styleDivider:{type:"divider"},polyhedron:[{type:"select",default:"dodecahedron",select:["dodecahedron","icosahedron","octahedron","tetrahedron"],if:{style:["platonicSolid"]}}],points:{type:"shape",alias:"points",default:null,if:{style:["lathe"]}},shapes:{type:"shape",alias:"shape",default:null,if:{style:["shape"]}},path:{type:"shape",alias:"curve",default:null,if:{style:["tube"]}},depth:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","roundedBox"]}},{type:"number",default:.5,min:0,step:"grid",if:{style:["shape"]}}],height:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","capsule","cone","cylinder","plane","roundedBox"]}}],width:[{type:"number",default:1,min:0,step:"grid",if:{style:["box","plane","roundedBox"]}}],widthSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box","plane"]}},{type:"int",default:24,min:4,max:1024,if:{style:["sphere"]}}],heightSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box","plane"]}},{type:"int",default:1,min:1,max:1024,if:{style:["cone","cylinder"]}},{type:"int",default:24,min:1,max:1024,if:{style:["sphere"]}}],depthSegments:[{type:"int",default:1,min:1,max:1024,promode:!0,if:{style:["box"]}}],radius:[{type:"number",default:.25,min:0,step:.01,if:{style:["roundedBox"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["circle","cone","platonicSolid","sphere"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["torus"]}},{type:"number",default:.4,min:0,step:.01,if:{style:["torusKnot"]}},{type:"number",default:.1,min:0,step:.01,if:{style:["tube"]}}],radiusTop:[{type:"number",default:.5,min:0,step:.01,if:{style:["capsule"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["cylinder"]}}],radiusBottom:[{type:"number",default:.5,min:0,step:.01,if:{style:["capsule"]}},{type:"number",default:.5,min:0,step:.01,if:{style:["cylinder"]}}],segments:[{type:"int",default:36,min:3,max:64,if:{style:["circle"]}},{type:"int",default:16,min:1,max:64,if:{style:["lathe"]}},{type:"int",default:4,min:1,max:10,if:{style:["roundedBox"]}}],thetaLength:[{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["circle","ring"]}},{type:"angle",default:2*Math.PI,min:0,max:360,promode:!0,if:{style:["capsule","cone","cylinder"]}},{type:"angle",default:Math.PI,min:0,max:720,promode:!0,if:{style:["sphere"]}}],thetaStart:[{type:"angle",default:0,if:{style:["circle","ring","sphere"]}},{type:"angle",default:0,promode:!0,if:{style:["capsule","cone","cylinder"]}}],phiLength:{type:"angle",default:2*Math.PI,max:360,if:{style:["lathe","sphere"]}},phiStart:{type:"angle",default:0,if:{style:["sphere"]}},capSegments:{type:"int",default:6,min:1,max:36,if:{style:["capsule"]}},radialSegments:[{type:"int",default:24,min:2,max:64,if:{style:["capsule","cone","cylinder","torus","torusKnot","tube"]}}],openEnded:{type:"boolean",default:!1,if:{style:["cone","cylinder"]}},detail:{type:"slider",default:0,min:0,max:9,step:1,precision:0,if:{style:["platonicSolid"]}},innerRadius:{type:"number",default:.25,min:0,step:.01,if:{style:["ring"]}},outerRadius:{type:"number",default:.5,min:0,step:.01,if:{style:["ring"]}},phiSegments:{type:"int",default:10,min:1,max:64,promode:!0,if:{style:["ring"]}},thetaSegments:{type:"int",default:36,min:3,max:128,if:{style:["ring"]}},steps:{type:"int",alias:"Depth Segments",default:3,min:1,max:128,promode:!0,if:{style:["shape"]}},bevelEnabled:{type:"boolean",alias:"bevel",default:!1,if:{style:["shape"]},rebuild:!0},bevelThickness:{type:"number",default:.1,min:0,step:.01,if:{style:["shape"],bevelEnabled:[!0]}},bevelSize:{type:"number",default:.1,min:0,step:.01,if:{style:["shape"],bevelEnabled:[!0]}},bevelSegments:{type:"int",default:4,min:0,max:64,promode:!0,if:{style:["shape"],bevelEnabled:[!0]}},curveSegments:{type:"int",default:16,min:1,max:128,promode:!0,if:{style:["shape"]}},tube:[{type:"number",default:.2,min:0,step:.01,if:{style:["torus"]}},{type:"number",default:.1,min:0,step:.01,if:{style:["torusKnot"]}}],tubularSegments:[{type:"int",default:32,min:3,max:128,if:{style:["torus"]}},{type:"int",default:64,min:3,max:128,if:{style:["torusKnot"]}},{type:"int",default:128,min:2,if:{style:["tube"]}}],arc:{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["torus"]}},p:{type:"number",default:2,min:1,max:128,if:{style:["torusKnot"]}},q:{type:"number",default:3,min:1,max:128,if:{style:["torusKnot"]}},closed:{type:"boolean",default:!0,if:{style:["tube"]}}},icon:"",color:"rgb(255, 113, 0)",multiple:!1,dependencies:["material"],family:["Entity3D"]},A.register("geometry",Ot);const Pt=["NoBlending","NormalBlending","AdditiveBlending","SubstractiveBlending","MultiplyBlending","CustomBlending"],Dt=["FrontSide","BackSide","DoubleSide"];class At{init(t={}){const e={};if(t.isMaterial){const e=t.uuid;l.add(t),(t=this.defaultData("style","asset")).asset=e}else{for(const i in t){const s=t[i];e[i]=s;let n=At.config.schema[i];if(Array.isArray(n)&&n.length>0&&(n=n[0]),s&&n&&"asset"===n.type)if(s.isTexture)l.add(s);else{const t=l.get(s);t&&t.isTexture?e[i]=t:e[i]=null}}delete e.base,delete e.style,delete e.edgeSize,delete e.gradientSize,delete e.premultiplyAlpha,delete e.useUv,"string"==typeof e.blending&&(e.blending=Pt.indexOf(e.blending)),"string"==typeof e.side&&(e.side=Dt.indexOf(e.side)),"BasicDepthPacking"===e.depthPacking&&(e.depthPacking=THREE.BasicDepthPacking),"RGBADepthPacking"===e.depthPacking&&(e.depthPacking=THREE.RGBADepthPacking)}let i;if("asset"===t.style){const e=l.get(t.asset);e&&e.isMaterial&&(i=e.clone())}else console.error(`MaterialComponent.init(): Invalid style '${t.style}'`);i&&i.isMaterial,this.backend=i,this.data=t}dispose(){}attach(){refreshMesh(this)}detach(){refreshMesh(this)}}At.config={schema:{style:[{type:"select",default:"standard",promode:!0,select:["asset","basic","depth","lambert","matcap","normal","phong","physical","points","shader","standard"]},{type:"select",default:"standard",select:["asset","basic","points","standard"]}],styleDivider:{type:"divider"},asset:{type:"asset",class:"material",if:{style:["asset"]}},color:{type:"color",if:{style:["basic","lambert","matcap","phong","physical","points","standard"]}},emissive:{type:"color",default:0,promode:!0,if:{style:["lambert","phong","physical","standard"]}},emissiveIntensity:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["lambert","phong","physical","standard"]}},opacity:{type:"slider",default:1,min:0,max:1,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","points","standard"]}},depthTest:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}},depthWrite:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}},flatShading:{type:"boolean",default:!1,if:{style:["phong","physical","standard","normal","matcap"]}},premultiplyAlpha:{type:"boolean",default:!0,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","points","standard"]}},wireframe:{type:"boolean",default:!1,if:{style:["basic","depth","lambert","normal","phong","physical","standard"]}},vertexColors:{type:"boolean",default:!1,promode:!0,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}},size:{type:"slider",default:.05,min:0,max:1,if:{style:["points"]}},sizeAttenuation:{type:"boolean",default:!0,if:{style:["points"]}},useUv:{type:"boolean",default:!1,if:{style:["points"]}},metalness:{type:"slider",default:.1,min:0,max:1,if:{style:["physical","standard"]}},roughness:{type:"slider",default:1,min:0,max:1,if:{style:["physical","standard"]}},specular:{type:"color",default:1118481,if:{style:["phong"]}},shininess:{type:"number",default:30,if:{style:["phong"]}},clearcoat:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},clearcoatRoughness:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},ior:{type:"slider",default:1.5,min:1,max:2,if:{style:["physical"]}},sheen:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},sheenRoughness:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},sheenColor:{type:"color",if:{style:["physical"]}},specularColor:{type:"color",promode:!0,if:{style:["physical"]}},specularIntensity:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["physical"]}},thickness:{type:"slider",default:0,min:0,max:5,if:{style:["physical"]}},transmission:{type:"slider",default:0,min:0,max:1,if:{style:["physical"]}},depthPacking:{type:"select",default:"BasicDepthPacking",select:["BasicDepthPacking","RGBADepthPacking"],if:{style:["depth"]}},map:[{type:"asset",class:"texture",alias:"texture",if:{style:["basic","depth","lambert","matcap","phong","points","physical","standard"]}}],matcap:{type:"asset",class:"texture",if:{style:["matcap"]}},alphaMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","depth","lambert","matcap","phong","physical","points","standard"]}},bumpMap:{type:"asset",class:"texture",promode:!0,if:{style:["matcap","normal","phong","physical","standard"]}},bumpScale:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["matcap","normal","phong","physical","standard"]}},clearcoatNormalMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical"]}},clearcoatNormalScale:{type:"vector2",default:[1,1],promode:!0,if:{style:["physical"]}},displacementMap:{type:"asset",class:"texture",promode:!0,if:{style:["depth","matcap","normal","phong","physical","standard"]}},displacementScale:{type:"slider",default:1,min:0,max:2,promode:!0,if:{style:["depth","matcap","normal","phong","physical","standard"]}},emissiveMap:{type:"asset",class:"texture",promode:!0,if:{style:["lambert","phong","physical","standard"]}},metalnessMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical","standard"]}},roughnessMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical","standard"]}},specularMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong"]}},thicknessMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical"]}},transmissionMap:{type:"asset",class:"texture",promode:!0,if:{style:["physical"]}},aoMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},envMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},lightMap:{type:"asset",class:"texture",promode:!0,if:{style:["basic","lambert","phong","physical","standard"]}},normalMap:{type:"asset",class:"texture",if:{style:["matcap","normal","phong","physical","standard"]}},side:{type:"select",default:"FrontSide",select:Dt,if:{style:["basic","depth","lambert","matcap","normal","phong","physical","standard"]}}},icon:"",color:"rgb(165, 243, 0)",multiple:!1,dependencies:["geometry"],family:["Entity3D"]},A.register("material",At);class Mt{init(t={}){this.backed=mesh,this.data=t}dispose(){}attach(){this.entity&&this.backend&&this.entity.add(this.backend)}detach(){this.entity&&this.backend&&this.entity.remove(this.backend)}}Mt.config={icon:"",color:"#F7DB63",multiple:!0,family:["Entity3D"]},A.register("mesh",Mt);class Ut{init(t={}){if(t.isScript){const e=t.uuid;l.add(t),(t=this.defaultData()).script=e}const e=l.get(t.script);if(e&&e.isScript){t.variables||(t.variables={});let i={};if(e.source)try{const t=`${e.source}\nreturn variables;`;i=new Function("",t)()}catch(t){}for(const e in i){const s=i[e];s.type?(e in t.variables&&(s.value=t.variables[e].value),void 0===s.value&&(s.value=s.default),void 0===s.value&&(s.value=A.defaultValue(s.type))):s.value=null}t.variables=structuredClone(i)}this.backend=void 0,this.data=t}}Ut.config={schema:{script:{type:"asset",class:"script",rebuild:!0},divider:{type:"divider"},variables:{type:"object",default:{}}},icon:"",color:"#090B11",width:"40%",multiple:!0,dependencies:[],family:["Entity3D"]},A.register("script",Ut);class Nt{init(t={}){let e;this.backend=e,this.data=t}dispose(){}attach(){this.entity&&this.backend&&this.entity.add(this.backend)}detach(){this.entity&&this.backend&&this.entity.remove(this.backend)}}Nt.config={schema:{style:[{type:"select",default:"basic",select:["asset","basic","array"]}],divider:{type:"divider"},asset:{type:"asset",if:{style:["asset"]}},assetDivider:{type:"divider"},geometry:{type:"asset",class:"geometry",if:{style:["asset"]}},material:{type:"asset",class:"material",if:{style:["asset"]}},script:{type:"asset",class:"script",if:{style:["asset"]}},shape:{type:"asset",class:"shape",if:{style:["asset"]}},texture:{type:"asset",class:"texture",if:{style:["asset"]}},prefabDivider:{type:"divider"},prefab:{type:"asset",class:"prefab",if:{style:["asset"]}},select:{type:"select",default:"Zebra",select:["Apple","Banana","Cherry","Zebra","Red"],if:{style:["basic"]}},number:{type:"number",default:.05,min:0,max:1,label:"test",if:{style:["basic"]}},int:{type:"int",default:5,min:3,max:10,if:{style:["basic"]}},angle:{type:"angle",default:2*Math.PI,min:0,max:360,if:{style:["basic"]}},variable:{type:"variable",default:[0,0],min:0,max:100,if:{style:["basic"]}},slider:{type:"slider",default:0,min:0,max:9,step:1,precision:0,if:{style:["basic"]}},boolean:{type:"boolean",default:!0,if:{style:["basic"]}},color:{type:"color",default:16711680,if:{style:["basic"]}},string:{type:"string",if:{style:["basic"]}},multiline:{type:"string",rows:4,if:{style:["basic"]}},numberArray:{type:"vector",size:1,if:{style:["array"]}},vector2:{type:"vector",size:2,tint:!0,label:["x","y"],if:{style:["array"]}},vector3:{type:"vector",size:3,tint:!0,min:[1,1,1],max:[2,2,2],step:.1,precision:2,if:{style:["array"]}},vector4:{type:"vector",size:4,tint:!0,if:{style:["array"]}}},icon:"",color:"rgb(128, 128, 128)",multiple:!1,dependencies:[],family:["Entity3D"]},A.register("test",Nt);const Tt={x:0,y:9.81,z:0};class It{init(t={}){let e;this.backend=e,this.data=t}dispose(){const t=this.backend;t&&t.free()}attach(){}detach(){}onLoad(){Tt.set(0,0,0),this.data.gravity&&Tt.fromArray(this.data.gravity);this.backend=null}onUpdate(t=0){const e=this.backend;e&&t>.01&&(e.timestep=t,e.step())}}It.config={schema:{gravity:{type:"vector",default:[0,-9.807,0],size:3,tint:!0,step:.1,precision:2}},icon:"",color:"#0F4F94",multiple:!1,dependencies:[],family:["World3D"]},A.register("physics",It);class zt{init(t={}){let e;switch(t.style){case"ascii":case"bloom":case"cartoon":case"dither":case"edge":case"levels":case"pixel":case"tint":break;default:console.error(`PostComponent.init(): Invalid style '${t.style}'`)}this.backend=e,this.data=t}dispose(){const t=this.backend;if(t&&t.uniforms)for(const e in t.uniforms){const i=t.uniforms[e];i&&i.value&&i.value.isTexture&&"function"==typeof i.value.dispose&&i.value.dispose()}}}zt.config={schema:{style:[{type:"select",default:"levels",select:["ascii","bloom","cartoon","dither","edge","levels","pixel","tint"]}],divider:{type:"divider"},textSize:{type:"slider",default:16,min:4,max:64,step:1,precision:0,if:{style:["ascii"]}},textColor:{type:"color",default:16777215,if:{style:["ascii"]}},characters:{type:"string",default:" .,•:-+=*!?%X0#@",if:{style:["ascii"]}},threshold:{type:"slider",default:0,min:0,max:1,step:.05,precision:2,if:{style:["bloom"]}},strength:{type:"slider",default:1,min:0,max:3,step:.1,precision:2,if:{style:["bloom"]}},radius:{type:"slider",default:0,min:0,max:1,step:.05,precision:2,if:{style:["bloom"]}},edgeColor:{type:"color",default:0,if:{style:["cartoon"]}},edgeStrength:{type:"slider",default:0,min:0,max:1,precision:2,if:{style:["cartoon"]}},gradient:{type:"slider",default:5,min:2,max:32,step:1,precision:0,if:{style:["cartoon"]}},palette:{type:"asset",class:"palette",if:{style:["dither"]}},bias:{type:"slider",default:.25,min:-1,max:1,precision:2,step:.05,if:{style:["dither"]}},scale:{type:"slider",default:1,min:1,max:9,precision:2,step:1,if:{style:["dither"]}},bitrate:{type:"slider",promode:!0,default:8,min:0,max:8,step:1,precision:0,if:{style:["levels"]}},hue:{type:"angle",default:0,min:-360,max:360,if:{style:["levels"]}},saturation:{type:"slider",default:0,min:-1,max:1,step:.1,precision:2,if:{style:["levels"]}},brightness:{type:"slider",default:0,min:-1,max:1,step:.1,precision:2,if:{style:["levels"]}},contrast:{type:"slider",default:0,min:-1,max:1,step:.1,precision:2,if:{style:["levels"]}},grayscale:{type:"slider",default:0,min:0,max:1,step:.1,precision:2,if:{style:["levels"]}},negative:{type:"boolean",default:!1,if:{style:["levels"]}},cellStyle:{type:"select",default:"none",select:["none","brick","cross","knit","tile","woven"],if:{style:["pixel"]}},cellSize:{type:"vector",default:[8,8],size:2,tint:!0,aspect:!0,label:["x","y"],min:[1,1],max:[1e3,1e3],precision:[2,2],if:{style:["pixel"]}},cutOff:{type:"slider",promode:!0,default:0,min:0,max:1,step:.05,precision:2,if:{style:["pixel"]}},color:{type:"color",default:16711680,if:{style:["tint"]}}},icon:"",color:"rgb(64, 64, 64)",multiple:!0,dependencies:[],family:["World3D"]},A.register("post",zt),"undefined"!=typeof window&&(window.__SALINITY__?console.warn(`Salinity v${window.__SALINITY__} already imported, now importing v${t}!`):window.__SALINITY__=t);export{i as APP_EVENTS,s as APP_ORIENTATION,e as APP_SIZE,Z as App,B as Arrays,l as AssetManager,it as Cache,Et as Camera3D,F as Clock,vt as ColorChange,A as ComponentManager,yt as DragControls,ft as DrivingControls,M as Entity,xt as Entity2D,kt as Entity3D,Ct as EntityUI,at as FileLoader,bt as FollowCamera,lt as ImageLoader,mt as KeyControls,ot as Loader,st as LoadingManager,O as Maths,ht as MoveCamera,ut as OrbitEntity,pt as Palette,j as Project,St as RotateEntity,r as SCRIPT_FORMAT,n as STAGE_TYPES,H as SceneManager,dt as Script,Y as Stage,P as System,d as Uuid,t as VERSION,wt as Vectors,o as WORLD_TYPES,J as World,gt as ZigZagControls};
